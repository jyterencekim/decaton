<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1414" onload="init(evt)" viewBox="0 0 1200 1414" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1397"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1397"> </text>
<g id="frames">
<g>
<title>all (254 samples, 100.00%)</title><rect x="10.0" y="1363.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1374.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.39%)</title><rect x="10.0" y="1347.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>__GI___mprotect (1 samples, 0.39%)</title><rect x="14.6" y="1347.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 7.48%)</title><rect x="19.3" y="1347.0" width="88.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.3" y="1358.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (19 samples, 7.48%)</title><rect x="19.3" y="1331.0" width="88.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.39%)</title><rect x="19.3" y="1315.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.39%)</title><rect x="19.3" y="1299.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.39%)</title><rect x="19.3" y="1283.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="22.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.39%)</title><rect x="19.3" y="1267.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.39%)</title><rect x="19.3" y="1251.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="19.3" y="1235.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.39%)</title><rect x="19.3" y="1219.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.39%)</title><rect x="19.3" y="1203.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.39%)</title><rect x="19.3" y="1187.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.39%)</title><rect x="19.3" y="1171.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.39%)</title><rect x="19.3" y="1155.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.39%)</title><rect x="19.3" y="1139.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.39%)</title><rect x="19.3" y="1123.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.3" y="1134.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.39%)</title><rect x="19.3" y="1107.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.39%)</title><rect x="19.3" y="1091.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.39%)</title><rect x="19.3" y="1075.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.3" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.39%)</title><rect x="19.3" y="1059.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (18 samples, 7.09%)</title><rect x="23.9" y="1315.0" width="83.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="1326.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.79%)</title><rect x="23.9" y="1299.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.9" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.79%)</title><rect x="23.9" y="1283.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.9" y="1294.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.39%)</title><rect x="23.9" y="1267.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.9" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.39%)</title><rect x="23.9" y="1251.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.9" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.39%)</title><rect x="23.9" y="1235.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.39%)</title><rect x="28.6" y="1267.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.6" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="28.6" y="1251.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.6" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.39%)</title><rect x="28.6" y="1235.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="28.6" y="1219.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.6" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.39%)</title><rect x="28.6" y="1203.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.39%)</title><rect x="28.6" y="1187.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.39%)</title><rect x="28.6" y="1171.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.39%)</title><rect x="28.6" y="1155.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.79%)</title><rect x="33.2" y="1299.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.79%)</title><rect x="33.2" y="1283.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.79%)</title><rect x="33.2" y="1267.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/1207268042.accept (2 samples, 0.79%)</title><rect x="33.2" y="1251.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.79%)</title><rect x="33.2" y="1235.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.79%)</title><rect x="33.2" y="1219.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.2" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.79%)</title><rect x="33.2" y="1203.0" width="9.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.18%)</title><rect x="42.5" y="1299.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/1607585257.accept (3 samples, 1.18%)</title><rect x="42.5" y="1283.0" width="14.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.18%)</title><rect x="42.5" y="1267.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.79%)</title><rect x="42.5" y="1251.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.79%)</title><rect x="42.5" y="1235.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.79%)</title><rect x="42.5" y="1219.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.5" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.79%)</title><rect x="42.5" y="1203.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.79%)</title><rect x="42.5" y="1187.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.5" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.39%)</title><rect x="47.2" y="1171.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.39%)</title><rect x="47.2" y="1155.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.39%)</title><rect x="47.2" y="1139.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.39%)</title><rect x="47.2" y="1123.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.39%)</title><rect x="47.2" y="1107.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.39%)</title><rect x="51.8" y="1251.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.39%)</title><rect x="51.8" y="1235.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.33%)</title><rect x="56.5" y="1299.0" width="51.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.5" y="1310.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.33%)</title><rect x="56.5" y="1283.0" width="51.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.5" y="1294.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.76%)</title><rect x="56.5" y="1267.0" width="32.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.5" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.57%)</title><rect x="56.5" y="1251.0" width="18.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.57%)</title><rect x="56.5" y="1235.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.39%)</title><rect x="56.5" y="1219.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.39%)</title><rect x="56.5" y="1203.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.39%)</title><rect x="56.5" y="1187.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.39%)</title><rect x="56.5" y="1171.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.39%)</title><rect x="56.5" y="1155.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.5" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.39%)</title><rect x="56.5" y="1139.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.5" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.39%)</title><rect x="56.5" y="1123.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="59.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$265/578409116.shouldBlock (1 samples, 0.39%)</title><rect x="61.1" y="1219.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.39%)</title><rect x="61.1" y="1203.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.39%)</title><rect x="61.1" y="1187.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.39%)</title><rect x="61.1" y="1171.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="61.1" y="1155.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.39%)</title><rect x="61.1" y="1139.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.1" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.39%)</title><rect x="61.1" y="1123.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.1" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="61.1" y="1107.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.1" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.39%)</title><rect x="61.1" y="1091.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.1" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.39%)</title><rect x="61.1" y="1075.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.1" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.39%)</title><rect x="61.1" y="1059.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.39%)</title><rect x="61.1" y="1043.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.39%)</title><rect x="61.1" y="1027.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.1" y="1038.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method_ic_miss(JavaThread*) (1 samples, 0.39%)</title><rect x="61.1" y="1011.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="64.1" y="1022.0"></text>
</g>
<g>
<title>SharedRuntime::handle_ic_miss_helper(JavaThread*, Thread*) (1 samples, 0.39%)</title><rect x="61.1" y="995.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="64.1" y="1006.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.39%)</title><rect x="61.1" y="979.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="64.1" y="990.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle, int, Bytecodes::Code, Thread*) (1 samples, 0.39%)</title><rect x="61.1" y="963.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="64.1" y="974.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invokeinterface(CallInfo&amp;, Handle, constantPoolHandle, int, Thread*) (1 samples, 0.39%)</title><rect x="61.1" y="947.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="64.1" y="958.0"></text>
</g>
<g>
<title>LinkResolver::resolve_pool(KlassHandle&amp;, Symbol*&amp;, Symbol*&amp;, KlassHandle&amp;, constantPoolHandle, int, Thread*) (1 samples, 0.39%)</title><rect x="61.1" y="931.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.39%)</title><rect x="65.7" y="1219.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.39%)</title><rect x="65.7" y="1203.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="68.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.39%)</title><rect x="70.4" y="1219.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.39%)</title><rect x="70.4" y="1203.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="70.4" y="1187.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="70.4" y="1171.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.39%)</title><rect x="70.4" y="1155.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.39%)</title><rect x="70.4" y="1139.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.39%)</title><rect x="70.4" y="1123.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (1 samples, 0.39%)</title><rect x="70.4" y="1107.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.4" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (1 samples, 0.39%)</title><rect x="70.4" y="1091.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (3 samples, 1.18%)</title><rect x="75.0" y="1251.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.79%)</title><rect x="75.0" y="1235.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="78.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.79%)</title><rect x="75.0" y="1219.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="78.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.79%)</title><rect x="75.0" y="1203.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.39%)</title><rect x="79.7" y="1187.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.39%)</title><rect x="79.7" y="1171.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="82.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.39%)</title><rect x="79.7" y="1155.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="82.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.39%)</title><rect x="79.7" y="1139.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.39%)</title><rect x="79.7" y="1123.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.39%)</title><rect x="79.7" y="1107.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.39%)</title><rect x="79.7" y="1091.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.39%)</title><rect x="79.7" y="1075.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.39%)</title><rect x="84.3" y="1235.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.79%)</title><rect x="89.0" y="1267.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.79%)</title><rect x="89.0" y="1251.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.79%)</title><rect x="89.0" y="1235.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.39%)</title><rect x="93.6" y="1219.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="96.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.39%)</title><rect x="93.6" y="1203.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.39%)</title><rect x="93.6" y="1187.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="93.6" y="1171.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.39%)</title><rect x="93.6" y="1155.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="93.6" y="1139.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.39%)</title><rect x="93.6" y="1123.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.39%)</title><rect x="93.6" y="1107.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.39%)</title><rect x="93.6" y="1091.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="96.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.39%)</title><rect x="93.6" y="1075.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="96.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.39%)</title><rect x="93.6" y="1059.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.39%)</title><rect x="98.3" y="1267.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.39%)</title><rect x="98.3" y="1251.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.39%)</title><rect x="98.3" y="1235.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="98.3" y="1219.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.39%)</title><rect x="98.3" y="1203.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.39%)</title><rect x="98.3" y="1187.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.39%)</title><rect x="98.3" y="1171.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="101.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.39%)</title><rect x="98.3" y="1155.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.39%)</title><rect x="98.3" y="1139.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="101.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.setIfExists (1 samples, 0.39%)</title><rect x="98.3" y="1123.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="101.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.get (1 samples, 0.39%)</title><rect x="98.3" y="1107.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="101.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.39%)</title><rect x="98.3" y="1091.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.39%)</title><rect x="98.3" y="1075.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.39%)</title><rect x="102.9" y="1267.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.39%)</title><rect x="102.9" y="1251.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.39%)</title><rect x="102.9" y="1235.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.39%)</title><rect x="102.9" y="1219.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.39%)</title><rect x="102.9" y="1203.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="105.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.39%)</title><rect x="102.9" y="1187.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="105.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.39%)</title><rect x="102.9" y="1171.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="105.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.39%)</title><rect x="102.9" y="1155.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="105.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.39%)</title><rect x="102.9" y="1139.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.39%)</title><rect x="102.9" y="1123.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="105.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.39%)</title><rect x="102.9" y="1107.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.9" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.39%)</title><rect x="102.9" y="1091.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.39%)</title><rect x="102.9" y="1075.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.39%)</title><rect x="102.9" y="1059.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$263/515315119.test (1 samples, 0.39%)</title><rect x="102.9" y="1043.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Thread.run (136 samples, 53.54%)</title><rect x="107.6" y="1347.0" width="631.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.6" y="1358.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (136 samples, 53.54%)</title><rect x="107.6" y="1331.0" width="631.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="110.6" y="1342.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (136 samples, 53.54%)</title><rect x="107.6" y="1315.0" width="631.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.6" y="1326.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1305327612.run (132 samples, 51.97%)</title><rect x="112.2" y="1299.0" width="613.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.2" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1305327612...</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (132 samples, 51.97%)</title><rect x="112.2" y="1283.0" width="613.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.2" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (132 samples, 51.97%)</title><rect x="112.2" y="1267.0" width="613.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.2" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (132 samples, 51.97%)</title><rect x="112.2" y="1251.0" width="613.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="115.2" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.79%)</title><rect x="126.1" y="1235.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="129.1" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.79%)</title><rect x="126.1" y="1219.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.79%)</title><rect x="126.1" y="1203.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.1" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.39%)</title><rect x="126.1" y="1187.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.1" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.39%)</title><rect x="130.8" y="1187.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (9 samples, 3.54%)</title><rect x="135.4" y="1235.0" width="41.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="138.4" y="1246.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.36%)</title><rect x="149.4" y="1219.0" width="27.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.4" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.36%)</title><rect x="149.4" y="1203.0" width="27.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.4" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 2.36%)</title><rect x="149.4" y="1187.0" width="27.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="152.4" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.36%)</title><rect x="149.4" y="1171.0" width="27.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.4" y="1182.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$301/2005349875.accept (6 samples, 2.36%)</title><rect x="149.4" y="1155.0" width="27.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="152.4" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (6 samples, 2.36%)</title><rect x="149.4" y="1139.0" width="27.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.4" y="1150.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 2.36%)</title><rect x="149.4" y="1123.0" width="27.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="152.4" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 2.36%)</title><rect x="149.4" y="1107.0" width="27.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.4" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 2.36%)</title><rect x="149.4" y="1091.0" width="27.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.4" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 1.18%)</title><rect x="149.4" y="1075.0" width="13.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 1.18%)</title><rect x="149.4" y="1059.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="152.4" y="1070.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.79%)</title><rect x="154.0" y="1043.0" width="9.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="157.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.18%)</title><rect x="163.3" y="1075.0" width="13.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (24 samples, 9.45%)</title><rect x="177.2" y="1235.0" width="111.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.2" y="1246.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/524241174.extract (24 samples, 9.45%)</title><rect x="177.2" y="1219.0" width="111.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="180.2" y="1230.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (24 samples, 9.45%)</title><rect x="177.2" y="1203.0" width="111.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="180.2" y="1214.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 9.45%)</title><rect x="177.2" y="1187.0" width="111.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="180.2" y="1198.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 9.45%)</title><rect x="177.2" y="1171.0" width="111.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="180.2" y="1182.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (24 samples, 9.45%)</title><rect x="177.2" y="1155.0" width="111.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="180.2" y="1166.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 1.97%)</title><rect x="177.2" y="1139.0" width="23.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="180.2" y="1150.0">c..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="186.5" y="1123.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="189.5" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="186.5" y="1107.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="189.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.39%)</title><rect x="191.2" y="1123.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="194.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.39%)</title><rect x="191.2" y="1107.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.39%)</title><rect x="191.2" y="1091.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.39%)</title><rect x="191.2" y="1075.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.39%)</title><rect x="191.2" y="1059.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.39%)</title><rect x="191.2" y="1043.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.39%)</title><rect x="191.2" y="1027.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="194.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.39%)</title><rect x="195.8" y="1123.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.39%)</title><rect x="195.8" y="1107.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="198.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.39%)</title><rect x="195.8" y="1091.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.8" y="1102.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.39%)</title><rect x="195.8" y="1075.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="198.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="195.8" y="1059.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="198.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (18 samples, 7.09%)</title><rect x="200.5" y="1139.0" width="83.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.5" y="1150.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.39%)</title><rect x="200.5" y="1123.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.39%)</title><rect x="205.1" y="1123.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.18%)</title><rect x="209.8" y="1123.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.18%)</title><rect x="209.8" y="1107.0" width="13.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.8" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.79%)</title><rect x="214.4" y="1091.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.79%)</title><rect x="214.4" y="1075.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.39%)</title><rect x="219.1" y="1059.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.39%)</title><rect x="223.7" y="1123.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.7" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="223.7" y="1107.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="226.7" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="223.7" y="1091.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="226.7" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="223.7" y="1075.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="226.7" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="223.7" y="1059.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="226.7" y="1070.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.39%)</title><rect x="223.7" y="1043.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="226.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (11 samples, 4.33%)</title><rect x="228.3" y="1123.0" width="51.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.3" y="1134.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 4.33%)</title><rect x="228.3" y="1107.0" width="51.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.3" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.39%)</title><rect x="228.3" y="1091.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.39%)</title><rect x="228.3" y="1075.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="231.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.39%)</title><rect x="228.3" y="1059.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.39%)</title><rect x="228.3" y="1043.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.39%)</title><rect x="228.3" y="1027.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.39%)</title><rect x="228.3" y="1011.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (10 samples, 3.94%)</title><rect x="233.0" y="1091.0" width="46.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.0" y="1102.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (10 samples, 3.94%)</title><rect x="233.0" y="1075.0" width="46.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.0" y="1086.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (10 samples, 3.94%)</title><rect x="233.0" y="1059.0" width="46.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="236.0" y="1070.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.97%)</title><rect x="233.0" y="1043.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.0" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.39%)</title><rect x="242.3" y="1027.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.39%)</title><rect x="246.9" y="1027.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.39%)</title><rect x="246.9" y="1011.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.39%)</title><rect x="251.6" y="1027.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.39%)</title><rect x="256.2" y="1043.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.39%)</title><rect x="256.2" y="1027.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.39%)</title><rect x="256.2" y="1011.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.39%)</title><rect x="256.2" y="995.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.39%)</title><rect x="256.2" y="979.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.39%)</title><rect x="260.9" y="1043.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.39%)</title><rect x="260.9" y="1027.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.39%)</title><rect x="260.9" y="1011.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.39%)</title><rect x="260.9" y="995.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.39%)</title><rect x="260.9" y="979.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.9" y="990.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.39%)</title><rect x="260.9" y="963.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.79%)</title><rect x="265.5" y="1043.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.79%)</title><rect x="265.5" y="1027.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.79%)</title><rect x="265.5" y="1011.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.39%)</title><rect x="274.8" y="1043.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.39%)</title><rect x="279.4" y="1123.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.4" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.39%)</title><rect x="284.1" y="1139.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.1" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.39%)</title><rect x="284.1" y="1123.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.1" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.39%)</title><rect x="284.1" y="1107.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.1" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.39%)</title><rect x="284.1" y="1091.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.39%)</title><rect x="284.1" y="1075.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (94 samples, 37.01%)</title><rect x="288.7" y="1235.0" width="436.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.7" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipel..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (6 samples, 2.36%)</title><rect x="307.3" y="1219.0" width="27.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.3" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.39%)</title><rect x="312.0" y="1203.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="315.0" y="1214.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.57%)</title><rect x="316.6" y="1203.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="319.6" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.57%)</title><rect x="316.6" y="1187.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.6" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.39%)</title><rect x="316.6" y="1171.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.39%)</title><rect x="316.6" y="1155.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="319.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.39%)</title><rect x="316.6" y="1139.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.39%)</title><rect x="316.6" y="1123.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.39%)</title><rect x="321.3" y="1171.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.39%)</title><rect x="321.3" y="1155.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.39%)</title><rect x="321.3" y="1139.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="324.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.79%)</title><rect x="325.9" y="1171.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.79%)</title><rect x="325.9" y="1155.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.79%)</title><rect x="325.9" y="1139.0" width="9.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (24 samples, 9.45%)</title><rect x="335.2" y="1219.0" width="111.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.2" y="1230.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (23 samples, 9.06%)</title><rect x="335.2" y="1203.0" width="106.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.2" y="1214.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.15%)</title><rect x="349.1" y="1187.0" width="37.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.1" y="1198.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.76%)</title><rect x="353.8" y="1171.0" width="32.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.8" y="1182.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 2.76%)</title><rect x="353.8" y="1155.0" width="32.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.8" y="1166.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 1.57%)</title><rect x="353.8" y="1139.0" width="18.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (4 samples, 1.57%)</title><rect x="353.8" y="1123.0" width="18.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 1.57%)</title><rect x="353.8" y="1107.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="356.8" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.18%)</title><rect x="353.8" y="1091.0" width="13.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="356.8" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.79%)</title><rect x="353.8" y="1075.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="356.8" y="1086.0"></text>
</g>
<g>
<title>frame::adjust_unextended_sp() (1 samples, 0.39%)</title><rect x="353.8" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.8" y="1070.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.39%)</title><rect x="358.4" y="1059.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="361.4" y="1070.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.39%)</title><rect x="358.4" y="1043.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="361.4" y="1054.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.39%)</title><rect x="358.4" y="1027.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="361.4" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.39%)</title><rect x="363.1" y="1075.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="366.1" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.39%)</title><rect x="363.1" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="366.1" y="1070.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.39%)</title><rect x="367.7" y="1091.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="370.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.79%)</title><rect x="372.4" y="1139.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="375.4" y="1150.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.39%)</title><rect x="381.7" y="1139.0" width="4.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="384.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.79%)</title><rect x="386.3" y="1187.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="389.3" y="1198.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.39%)</title><rect x="386.3" y="1171.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="389.3" y="1182.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.39%)</title><rect x="386.3" y="1155.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.39%)</title><rect x="390.9" y="1171.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.39%)</title><rect x="390.9" y="1155.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.9" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 3.94%)</title><rect x="395.6" y="1187.0" width="46.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="398.6" y="1198.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 3.94%)</title><rect x="395.6" y="1171.0" width="46.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.6" y="1182.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.39%)</title><rect x="395.6" y="1155.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.39%)</title><rect x="395.6" y="1139.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="398.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.39%)</title><rect x="395.6" y="1123.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="398.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.39%)</title><rect x="395.6" y="1107.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.39%)</title><rect x="395.6" y="1091.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="398.6" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 3.54%)</title><rect x="400.2" y="1155.0" width="41.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.2" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.76%)</title><rect x="409.5" y="1139.0" width="32.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="412.5" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.18%)</title><rect x="428.1" y="1123.0" width="13.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.39%)</title><rect x="437.4" y="1107.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.39%)</title><rect x="442.0" y="1203.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="445.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.39%)</title><rect x="442.0" y="1187.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.39%)</title><rect x="442.0" y="1171.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.0" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.39%)</title><rect x="442.0" y="1155.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.39%)</title><rect x="442.0" y="1139.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (59 samples, 23.23%)</title><rect x="446.7" y="1219.0" width="274.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.7" y="1230.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (58 samples, 22.83%)</title><rect x="446.7" y="1203.0" width="269.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.7" y="1214.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1477371236.process (50 samples, 19.69%)</title><rect x="446.7" y="1187.0" width="232.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.7" y="1198.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (50 samples, 19.69%)</title><rect x="446.7" y="1171.0" width="232.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.7" y="1182.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 19.29%)</title><rect x="446.7" y="1155.0" width="227.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.7" y="1166.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.39%)</title><rect x="446.7" y="1139.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="449.7" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.39%)</title><rect x="446.7" y="1123.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.7" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.39%)</title><rect x="446.7" y="1107.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.7" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.39%)</title><rect x="446.7" y="1091.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="449.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.39%)</title><rect x="446.7" y="1075.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.39%)</title><rect x="446.7" y="1059.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="449.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 18.90%)</title><rect x="451.3" y="1139.0" width="223.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="454.3" y="1150.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 18.90%)</title><rect x="451.3" y="1123.0" width="223.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.3" y="1134.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (44 samples, 17.32%)</title><rect x="469.9" y="1107.0" width="204.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="472.9" y="1118.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.39%)</title><rect x="483.9" y="1091.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="486.9" y="1102.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.39%)</title><rect x="488.5" y="1091.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="491.5" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.79%)</title><rect x="493.1" y="1091.0" width="9.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="496.1" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.79%)</title><rect x="493.1" y="1075.0" width="9.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="496.1" y="1086.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (8 samples, 3.15%)</title><rect x="502.4" y="1091.0" width="37.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="505.4" y="1102.0">jav..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (29 samples, 11.42%)</title><rect x="539.6" y="1091.0" width="134.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.6" y="1102.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.39%)</title><rect x="562.8" y="1075.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="565.8" y="1086.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.39%)</title><rect x="567.5" y="1075.0" width="4.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="570.5" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.39%)</title><rect x="572.1" y="1075.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="575.1" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="572.1" y="1059.0" width="4.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="575.1" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 2.76%)</title><rect x="576.8" y="1075.0" width="32.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="579.8" y="1086.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 4.33%)</title><rect x="609.3" y="1075.0" width="51.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="612.3" y="1086.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.39%)</title><rect x="660.4" y="1075.0" width="4.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="663.4" y="1086.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.39%)</title><rect x="665.0" y="1075.0" width="4.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="668.0" y="1086.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.39%)</title><rect x="669.7" y="1075.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="672.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.39%)</title><rect x="674.3" y="1155.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.3" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.39%)</title><rect x="674.3" y="1139.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="677.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.39%)</title><rect x="674.3" y="1123.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.39%)</title><rect x="679.0" y="1187.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.39%)</title><rect x="679.0" y="1171.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="682.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.39%)</title><rect x="683.6" y="1187.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="686.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.39%)</title><rect x="683.6" y="1171.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.6" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.39%)</title><rect x="683.6" y="1155.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="686.6" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.39%)</title><rect x="683.6" y="1139.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="686.6" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.39%)</title><rect x="683.6" y="1123.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="686.6" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="683.6" y="1107.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="686.6" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.39%)</title><rect x="683.6" y="1091.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="686.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.39%)</title><rect x="683.6" y="1075.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="686.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.39%)</title><rect x="688.3" y="1187.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="691.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.79%)</title><rect x="692.9" y="1187.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="695.9" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.79%)</title><rect x="692.9" y="1171.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.9" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.79%)</title><rect x="692.9" y="1155.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="695.9" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.79%)</title><rect x="692.9" y="1139.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="695.9" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.39%)</title><rect x="697.6" y="1123.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="700.6" y="1134.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.39%)</title><rect x="697.6" y="1107.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="700.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.79%)</title><rect x="702.2" y="1187.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="705.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.39%)</title><rect x="706.9" y="1171.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.39%)</title><rect x="706.9" y="1155.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.39%)</title><rect x="706.9" y="1139.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="709.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.39%)</title><rect x="706.9" y="1123.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.39%)</title><rect x="706.9" y="1107.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/288784734.accept (1 samples, 0.39%)</title><rect x="706.9" y="1091.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.39%)</title><rect x="711.5" y="1187.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.5" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.39%)</title><rect x="716.1" y="1203.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="719.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.39%)</title><rect x="720.8" y="1219.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="723.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.39%)</title><rect x="720.8" y="1203.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.39%)</title><rect x="720.8" y="1187.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="723.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.39%)</title><rect x="720.8" y="1171.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.39%)</title><rect x="720.8" y="1155.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="723.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.39%)</title><rect x="720.8" y="1139.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.8" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.39%)</title><rect x="720.8" y="1123.0" width="4.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="723.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.18%)</title><rect x="725.4" y="1299.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="728.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.18%)</title><rect x="725.4" y="1283.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="728.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.79%)</title><rect x="730.1" y="1267.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.79%)</title><rect x="730.1" y="1251.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="733.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.79%)</title><rect x="730.1" y="1235.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="733.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.79%)</title><rect x="730.1" y="1219.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.79%)</title><rect x="739.4" y="1347.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.4" y="1358.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.39%)</title><rect x="739.4" y="1331.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.39%)</title><rect x="744.0" y="1331.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="747.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.39%)</title><rect x="744.0" y="1315.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="747.0" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.39%)</title><rect x="744.0" y="1299.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="747.0" y="1310.0"></text>
</g>
<g>
<title>start_thread (95 samples, 37.40%)</title><rect x="748.7" y="1347.0" width="441.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="751.7" y="1358.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (95 samples, 37.40%)</title><rect x="748.7" y="1331.0" width="441.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="751.7" y="1342.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.72%)</title><rect x="748.7" y="1315.0" width="55.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="751.7" y="1326.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 4.72%)</title><rect x="748.7" y="1299.0" width="55.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="751.7" y="1310.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 4.72%)</title><rect x="748.7" y="1283.0" width="55.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="751.7" y="1294.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 4.72%)</title><rect x="748.7" y="1267.0" width="55.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="751.7" y="1278.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 3.15%)</title><rect x="767.2" y="1251.0" width="37.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="770.2" y="1262.0">G1P..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.18%)</title><rect x="790.5" y="1235.0" width="13.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="793.5" y="1246.0"></text>
</g>
<g>
<title>JavaThread::run() (83 samples, 32.68%)</title><rect x="804.4" y="1315.0" width="385.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="807.4" y="1326.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 32.68%)</title><rect x="804.4" y="1299.0" width="385.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.4" y="1310.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 32.68%)</title><rect x="804.4" y="1283.0" width="385.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.4" y="1294.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (83 samples, 32.68%)</title><rect x="804.4" y="1267.0" width="385.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="807.4" y="1278.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (81 samples, 31.89%)</title><rect x="804.4" y="1251.0" width="376.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.4" y="1262.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (81 samples, 31.89%)</title><rect x="804.4" y="1235.0" width="376.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="807.4" y="1246.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>Compile::Code_Gen() (52 samples, 20.47%)</title><rect x="804.4" y="1219.0" width="241.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="807.4" y="1230.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.18%)</title><rect x="804.4" y="1203.0" width="13.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.4" y="1214.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.39%)</title><rect x="804.4" y="1187.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.4" y="1198.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.79%)</title><rect x="809.1" y="1187.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="812.1" y="1198.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.79%)</title><rect x="809.1" y="1171.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="812.1" y="1182.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.39%)</title><rect x="813.7" y="1155.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="816.7" y="1166.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.39%)</title><rect x="813.7" y="1139.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="816.7" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (6 samples, 2.36%)</title><rect x="818.3" y="1203.0" width="27.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="821.3" y="1214.0">C..</text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.79%)</title><rect x="823.0" y="1187.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.0" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.39%)</title><rect x="823.0" y="1171.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.0" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.39%)</title><rect x="823.0" y="1155.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="826.0" y="1166.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.39%)</title><rect x="827.6" y="1171.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="830.6" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.79%)</title><rect x="832.3" y="1187.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="835.3" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.79%)</title><rect x="832.3" y="1171.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="835.3" y="1182.0"></text>
</g>
<g>
<title>HandlerImpl::emit_exception_handler(CodeBuffer&amp;) (1 samples, 0.39%)</title><rect x="841.6" y="1187.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="844.6" y="1198.0"></text>
</g>
<g>
<title>MacroAssembler::jump(AddressLiteral) (1 samples, 0.39%)</title><rect x="841.6" y="1171.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="844.6" y="1182.0"></text>
</g>
<g>
<title>Assembler::reachable(AddressLiteral) (1 samples, 0.39%)</title><rect x="841.6" y="1155.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="844.6" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (8 samples, 3.15%)</title><rect x="846.2" y="1203.0" width="37.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="849.2" y="1214.0">Mat..</text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.39%)</title><rect x="846.2" y="1187.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="849.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 2.76%)</title><rect x="850.9" y="1187.0" width="32.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="853.9" y="1198.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.18%)</title><rect x="850.9" y="1171.0" width="13.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="853.9" y="1182.0"></text>
</g>
<g>
<title>CallNode::match(ProjNode const*, Matcher const*) (1 samples, 0.39%)</title><rect x="864.8" y="1171.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="867.8" y="1182.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.39%)</title><rect x="864.8" y="1155.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.8" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.18%)</title><rect x="869.4" y="1171.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="872.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.39%)</title><rect x="869.4" y="1155.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="872.4" y="1166.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.39%)</title><rect x="869.4" y="1139.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="872.4" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.39%)</title><rect x="869.4" y="1123.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.4" y="1134.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="869.4" y="1107.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="872.4" y="1118.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.39%)</title><rect x="869.4" y="1091.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="872.4" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.79%)</title><rect x="874.1" y="1155.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="877.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.39%)</title><rect x="874.1" y="1139.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="877.1" y="1150.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.39%)</title><rect x="874.1" y="1123.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="877.1" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.39%)</title><rect x="874.1" y="1107.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="877.1" y="1118.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.39%)</title><rect x="874.1" y="1091.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.39%)</title><rect x="874.1" y="1075.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.1" y="1086.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.39%)</title><rect x="874.1" y="1059.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.39%)</title><rect x="874.1" y="1043.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="877.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.39%)</title><rect x="874.1" y="1027.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.1" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.39%)</title><rect x="874.1" y="1011.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.1" y="1022.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.39%)</title><rect x="874.1" y="995.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="877.1" y="1006.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.39%)</title><rect x="878.7" y="1139.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="881.7" y="1150.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.39%)</title><rect x="878.7" y="1123.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="881.7" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.39%)</title><rect x="883.4" y="1203.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="886.4" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.39%)</title><rect x="883.4" y="1187.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="886.4" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.39%)</title><rect x="883.4" y="1171.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 13.39%)</title><rect x="888.0" y="1203.0" width="158.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="891.0" y="1214.0">PhaseChaitin::Regist..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.39%)</title><rect x="888.0" y="1187.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.0" y="1198.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.39%)</title><rect x="892.7" y="1187.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.7" y="1198.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.39%)</title><rect x="897.3" y="1187.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="900.3" y="1198.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.39%)</title><rect x="902.0" y="1187.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="905.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.39%)</title><rect x="906.6" y="1187.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="909.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.39%)</title><rect x="906.6" y="1171.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="909.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.39%)</title><rect x="911.3" y="1187.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="914.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.39%)</title><rect x="911.3" y="1171.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.3" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="911.3" y="1155.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.3" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.36%)</title><rect x="915.9" y="1187.0" width="27.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="918.9" y="1198.0">P..</text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.39%)</title><rect x="934.5" y="1171.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.5" y="1182.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.39%)</title><rect x="939.1" y="1171.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.57%)</title><rect x="943.8" y="1187.0" width="18.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="946.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.18%)</title><rect x="948.4" y="1171.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.4" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="957.7" y="1155.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="960.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.39%)</title><rect x="962.4" y="1187.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.4" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.39%)</title><rect x="962.4" y="1171.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="965.4" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="962.4" y="1155.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="965.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 1.97%)</title><rect x="967.0" y="1187.0" width="23.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="970.0" y="1198.0">P..</text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.39%)</title><rect x="985.6" y="1171.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.39%)</title><rect x="990.2" y="1187.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.2" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.39%)</title><rect x="994.9" y="1187.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.9" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.18%)</title><rect x="999.5" y="1187.0" width="14.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.5" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.18%)</title><rect x="999.5" y="1171.0" width="14.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.5" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.18%)</title><rect x="999.5" y="1155.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1002.5" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 1.18%)</title><rect x="999.5" y="1139.0" width="14.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1002.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.39%)</title><rect x="1008.8" y="1123.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.79%)</title><rect x="1013.5" y="1187.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1016.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.39%)</title><rect x="1022.8" y="1187.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.8" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.57%)</title><rect x="1027.4" y="1187.0" width="18.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.4" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.39%)</title><rect x="1041.3" y="1171.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.3" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 9.84%)</title><rect x="1046.0" y="1219.0" width="116.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.0" y="1230.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.39%)</title><rect x="1046.0" y="1203.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.0" y="1214.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.39%)</title><rect x="1046.0" y="1187.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (20 samples, 7.87%)</title><rect x="1050.6" y="1203.0" width="92.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.6" y="1214.0">PhaseIdealL..</text>
</g>
<g>
<title>HaltNode::Opcode() const (1 samples, 0.39%)</title><rect x="1050.6" y="1187.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.6" y="1198.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.39%)</title><rect x="1055.3" y="1187.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.39%)</title><rect x="1059.9" y="1187.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.39%)</title><rect x="1064.6" y="1187.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1067.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (10 samples, 3.94%)</title><rect x="1069.2" y="1187.0" width="46.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.2" y="1198.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 3.54%)</title><rect x="1073.9" y="1171.0" width="41.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.9" y="1182.0">Pha..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.39%)</title><rect x="1073.9" y="1155.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1076.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.39%)</title><rect x="1078.5" y="1155.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1081.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 2.76%)</title><rect x="1083.1" y="1155.0" width="32.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1086.1" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.39%)</title><rect x="1111.0" y="1139.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (4 samples, 1.57%)</title><rect x="1115.7" y="1187.0" width="18.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.7" y="1198.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.39%)</title><rect x="1120.3" y="1171.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.39%)</title><rect x="1125.0" y="1171.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.39%)</title><rect x="1125.0" y="1155.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.39%)</title><rect x="1129.6" y="1171.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca(Node*, Node*) const (1 samples, 0.39%)</title><rect x="1129.6" y="1155.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const (1 samples, 0.39%)</title><rect x="1129.6" y="1139.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.39%)</title><rect x="1134.3" y="1187.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.39%)</title><rect x="1134.3" y="1171.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.3" y="1182.0"></text>
</g>
<g>
<title>CMoveNode::Value(PhaseTransform*) const (1 samples, 0.39%)</title><rect x="1134.3" y="1155.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1137.3" y="1166.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.39%)</title><rect x="1138.9" y="1187.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.9" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.57%)</title><rect x="1143.5" y="1203.0" width="18.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.57%)</title><rect x="1143.5" y="1187.0" width="18.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.5" y="1198.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.39%)</title><rect x="1143.5" y="1171.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.39%)</title><rect x="1148.2" y="1171.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.39%)</title><rect x="1152.8" y="1171.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.8" y="1182.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.39%)</title><rect x="1157.5" y="1171.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.5" y="1182.0"></text>
</g>
<g>
<title>short MAX2&lt;short&gt;(short, short) (1 samples, 0.39%)</title><rect x="1157.5" y="1155.0" width="4.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1160.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.18%)</title><rect x="1162.1" y="1219.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.18%)</title><rect x="1162.1" y="1203.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.18%)</title><rect x="1162.1" y="1187.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.18%)</title><rect x="1162.1" y="1171.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.18%)</title><rect x="1162.1" y="1155.0" width="14.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.18%)</title><rect x="1162.1" y="1139.0" width="14.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="1150.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1162.1" y="1123.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="1134.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_currentThread() (1 samples, 0.39%)</title><rect x="1162.1" y="1107.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="1118.0"></text>
</g>
<g>
<title>LibraryCallKit::generate_current_thread(Node*&amp;) (1 samples, 0.39%)</title><rect x="1162.1" y="1091.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.1" y="1102.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.39%)</title><rect x="1162.1" y="1075.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.39%)</title><rect x="1162.1" y="1059.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.39%)</title><rect x="1162.1" y="1043.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.1" y="1054.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.39%)</title><rect x="1162.1" y="1027.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.1" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1166.8" y="1123.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1166.8" y="1107.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1166.8" y="1091.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1166.8" y="1075.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1166.8" y="1059.0" width="9.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1166.8" y="1043.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1166.8" y="1027.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1166.8" y="1011.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1166.8" y="995.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1166.8" y="979.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1166.8" y="963.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1166.8" y="947.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1166.8" y="931.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1166.8" y="915.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1166.8" y="899.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1166.8" y="883.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1166.8" y="867.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1166.8" y="851.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1166.8" y="835.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1166.8" y="819.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1166.8" y="803.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1166.8" y="787.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1166.8" y="771.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.39%)</title><rect x="1166.8" y="755.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.8" y="766.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.39%)</title><rect x="1166.8" y="739.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.8" y="750.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.39%)</title><rect x="1166.8" y="723.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.8" y="734.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.39%)</title><rect x="1166.8" y="707.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.39%)</title><rect x="1166.8" y="691.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.8" y="702.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.39%)</title><rect x="1166.8" y="675.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.8" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="1027.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="1011.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="995.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="979.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="963.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="947.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="931.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="915.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="899.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="883.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="867.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="851.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="835.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="819.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="803.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="787.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="771.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="755.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="739.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="723.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="707.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="691.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="675.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="659.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="643.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="627.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="611.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="595.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="579.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="563.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="547.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="531.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="515.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="499.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="483.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="467.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="451.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="435.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="419.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="403.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="387.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="371.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="355.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="339.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="323.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="307.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="291.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="275.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="259.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="243.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.39%)</title><rect x="1171.4" y="227.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.39%)</title><rect x="1171.4" y="211.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.39%)</title><rect x="1171.4" y="195.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.39%)</title><rect x="1171.4" y="179.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.39%)</title><rect x="1171.4" y="163.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.39%)</title><rect x="1171.4" y="147.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.4" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_ordered_store(BasicType) (1 samples, 0.39%)</title><rect x="1171.4" y="131.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::store_oop_to_unknown(Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.39%)</title><rect x="1171.4" y="115.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.4" y="126.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.39%)</title><rect x="1171.4" y="99.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.4" y="110.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.39%)</title><rect x="1171.4" y="83.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::sync_kit(IdealKit&amp;) (1 samples, 0.39%)</title><rect x="1171.4" y="67.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.39%)</title><rect x="1171.4" y="51.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.4" y="62.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.39%)</title><rect x="1171.4" y="35.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.4" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.39%)</title><rect x="1176.1" y="1219.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="1230.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.39%)</title><rect x="1176.1" y="1203.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="1214.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.79%)</title><rect x="1180.7" y="1251.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="1262.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.79%)</title><rect x="1180.7" y="1235.0" width="9.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.79%)</title><rect x="1180.7" y="1219.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="1230.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.79%)</title><rect x="1180.7" y="1203.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="1214.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.39%)</title><rect x="1180.7" y="1187.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1198.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.39%)</title><rect x="1180.7" y="1171.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1182.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.39%)</title><rect x="1180.7" y="1155.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.39%)</title><rect x="1180.7" y="1139.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.39%)</title><rect x="1180.7" y="1123.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.39%)</title><rect x="1180.7" y="1107.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.39%)</title><rect x="1180.7" y="1091.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="1102.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.39%)</title><rect x="1180.7" y="1075.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1180.7" y="1059.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1070.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1180.7" y="1043.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="1054.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.39%)</title><rect x="1180.7" y="1027.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="1038.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.39%)</title><rect x="1180.7" y="1011.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="1022.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.39%)</title><rect x="1180.7" y="995.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="1006.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.39%)</title><rect x="1180.7" y="979.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="990.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.39%)</title><rect x="1180.7" y="963.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.39%)</title><rect x="1185.4" y="1187.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="1198.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.39%)</title><rect x="1185.4" y="1171.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="1182.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.39%)</title><rect x="1185.4" y="1155.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="1166.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.39%)</title><rect x="1185.4" y="1139.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="1150.0"></text>
</g>
<g>
<title>PcDesc::PcDesc(int, int, int) (1 samples, 0.39%)</title><rect x="1185.4" y="1123.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="1134.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (989 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.10%)</title><rect x="10.0" y="1011.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>BarrierSet::static_write_ref_array_pre(HeapWord*, unsigned long) (1 samples, 0.10%)</title><rect x="10.0" y="995.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (241 samples, 24.37%)</title><rect x="11.2" y="1011.0" width="287.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="1022.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (241 samples, 24.37%)</title><rect x="11.2" y="995.0" width="287.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="1006.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (240 samples, 24.27%)</title><rect x="12.4" y="979.0" width="286.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.4" y="990.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.40%)</title><rect x="12.4" y="963.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.40%)</title><rect x="12.4" y="947.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="13.6" y="931.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.spliterator (1 samples, 0.10%)</title><rect x="13.6" y="915.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="13.6" y="899.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="14.8" y="931.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="14.8" y="915.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="14.8" y="899.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="14.8" y="883.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="14.8" y="867.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="14.8" y="851.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.10%)</title><rect x="16.0" y="851.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="16.0" y="835.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.20%)</title><rect x="17.2" y="963.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.20%)</title><rect x="17.2" y="947.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="18.4" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="18.4" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="18.4" y="899.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="18.4" y="883.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="18.4" y="867.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="18.4" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.40%)</title><rect x="19.5" y="963.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.40%)</title><rect x="19.5" y="947.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.30%)</title><rect x="20.7" y="931.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.7" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$274/818057381.accept (3 samples, 0.30%)</title><rect x="20.7" y="915.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.30%)</title><rect x="20.7" y="899.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.7" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.30%)</title><rect x="20.7" y="883.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.7" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.30%)</title><rect x="20.7" y="867.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (183 samples, 18.50%)</title><rect x="24.3" y="963.0" width="218.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="974.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$273/569913147.accept (176 samples, 17.80%)</title><rect x="24.3" y="947.0" width="210.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="958.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (176 samples, 17.80%)</title><rect x="24.3" y="931.0" width="210.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.3" y="942.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (160 samples, 16.18%)</title><rect x="24.3" y="915.0" width="190.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="926.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (160 samples, 16.18%)</title><rect x="24.3" y="899.0" width="190.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.3" y="910.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (160 samples, 16.18%)</title><rect x="24.3" y="883.0" width="190.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.3" y="894.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 16.18%)</title><rect x="24.3" y="867.0" width="190.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.3" y="878.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 16.18%)</title><rect x="24.3" y="851.0" width="190.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.3" y="862.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (160 samples, 16.18%)</title><rect x="24.3" y="835.0" width="190.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.3" y="846.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 11.22%)</title><rect x="75.6" y="819.0" width="132.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.6" y="830.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 1.82%)</title><rect x="79.2" y="803.0" width="21.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.2" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 1.82%)</title><rect x="79.2" y="787.0" width="21.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 1.82%)</title><rect x="79.2" y="771.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="82.2" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.71%)</title><rect x="100.7" y="803.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (7 samples, 0.71%)</title><rect x="100.7" y="787.0" width="8.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="103.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.61%)</title><rect x="101.9" y="771.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 8.39%)</title><rect x="109.0" y="803.0" width="99.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.0" y="814.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 8.39%)</title><rect x="109.0" y="787.0" width="99.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.0" y="798.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="109.0" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 8.29%)</title><rect x="110.2" y="771.0" width="97.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="113.2" y="782.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 8.29%)</title><rect x="110.2" y="755.0" width="97.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.2" y="766.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 8.29%)</title><rect x="110.2" y="739.0" width="97.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.2" y="750.0">sun/misc/Un..</text>
</g>
<g>
<title>Unsafe_Unpark (71 samples, 7.18%)</title><rect x="111.4" y="723.0" width="84.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="114.4" y="734.0">Unsafe_Unp..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="113.8" y="707.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.8" y="718.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="116.2" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="119.2" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 4.45%)</title><rect x="117.4" y="707.0" width="52.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="120.4" y="718.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.20%)</title><rect x="169.9" y="707.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="172.9" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (20 samples, 2.02%)</title><rect x="172.3" y="707.0" width="23.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="175.3" y="718.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.61%)</title><rect x="196.1" y="723.0" width="7.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="199.1" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.40%)</title><rect x="203.3" y="723.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="206.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.20%)</title><rect x="208.1" y="819.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.20%)</title><rect x="208.1" y="803.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.20%)</title><rect x="208.1" y="787.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="211.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.40%)</title><rect x="210.4" y="819.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.40%)</title><rect x="210.4" y="803.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="213.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.40%)</title><rect x="210.4" y="787.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="211.6" y="771.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.20%)</title><rect x="212.8" y="771.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (9 samples, 0.91%)</title><rect x="215.2" y="915.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.71%)</title><rect x="217.6" y="899.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.10%)</title><rect x="224.8" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.10%)</title><rect x="224.8" y="867.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="224.8" y="851.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="227.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.10%)</title><rect x="224.8" y="835.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="224.8" y="819.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.51%)</title><rect x="226.0" y="915.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.51%)</title><rect x="226.0" y="899.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.51%)</title><rect x="226.0" y="883.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="231.9" y="915.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="231.9" y="899.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="231.9" y="883.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.20%)</title><rect x="231.9" y="867.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="234.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="231.9" y="851.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="234.3" y="947.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="234.3" y="931.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="234.3" y="915.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.3" y="926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="234.3" y="899.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="237.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.51%)</title><rect x="235.5" y="947.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.51%)</title><rect x="235.5" y="931.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.51%)</title><rect x="235.5" y="915.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.51%)</title><rect x="235.5" y="899.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="241.5" y="947.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.5" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="241.5" y="931.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.75%)</title><rect x="242.7" y="963.0" width="56.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="245.7" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.75%)</title><rect x="242.7" y="947.0" width="56.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.7" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 3.24%)</title><rect x="242.7" y="931.0" width="38.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.7" y="942.0">org..</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.10%)</title><rect x="242.7" y="915.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="245.7" y="926.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.10%)</title><rect x="242.7" y="899.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="245.7" y="910.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.10%)</title><rect x="242.7" y="883.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="245.7" y="894.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.10%)</title><rect x="242.7" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="245.7" y="878.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.10%)</title><rect x="242.7" y="851.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="245.7" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.10%)</title><rect x="242.7" y="835.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="245.7" y="846.0"></text>
</g>
<g>
<title>ConstantPool::resolve_string_constants_impl(constantPoolHandle, Thread*) (1 samples, 0.10%)</title><rect x="242.7" y="819.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="245.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (31 samples, 3.13%)</title><rect x="243.9" y="915.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.9" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (31 samples, 3.13%)</title><rect x="243.9" y="899.0" width="36.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.9" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (29 samples, 2.93%)</title><rect x="243.9" y="883.0" width="34.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.9" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (29 samples, 2.93%)</title><rect x="243.9" y="867.0" width="34.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.9" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (15 samples, 1.52%)</title><rect x="246.2" y="851.0" width="17.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="249.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.10%)</title><rect x="255.8" y="835.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.10%)</title><rect x="255.8" y="819.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="255.8" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.61%)</title><rect x="257.0" y="835.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.61%)</title><rect x="257.0" y="819.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="260.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.61%)</title><rect x="257.0" y="803.0" width="7.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.61%)</title><rect x="257.0" y="787.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.61%)</title><rect x="257.0" y="771.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.61%)</title><rect x="257.0" y="755.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.61%)</title><rect x="257.0" y="739.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (12 samples, 1.21%)</title><rect x="264.1" y="851.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 1.11%)</title><rect x="265.3" y="835.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 1.01%)</title><rect x="265.3" y="819.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.3" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 1.01%)</title><rect x="265.3" y="803.0" width="12.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.3" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="272.5" y="787.0" width="3.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="275.5" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="276.1" y="787.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="279.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.10%)</title><rect x="277.3" y="819.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.toArray (1 samples, 0.10%)</title><rect x="277.3" y="803.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="277.3" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="280.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="277.3" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="280.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="277.3" y="755.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="280.3" y="766.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.10%)</title><rect x="277.3" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="280.3" y="750.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.10%)</title><rect x="277.3" y="723.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="280.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.10%)</title><rect x="278.5" y="883.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="278.5" y="867.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="278.5" y="851.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="278.5" y="835.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="278.5" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="278.5" y="803.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="279.6" y="883.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.71%)</title><rect x="280.8" y="931.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.61%)</title><rect x="280.8" y="915.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.61%)</title><rect x="280.8" y="899.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.8" y="910.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="282.0" y="883.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/1521671532.accept (1 samples, 0.10%)</title><rect x="282.0" y="867.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="282.0" y="851.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="282.0" y="835.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="282.0" y="819.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.10%)</title><rect x="282.0" y="803.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="282.0" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="282.0" y="771.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="283.2" y="883.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="283.2" y="867.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="283.2" y="851.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="283.2" y="835.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="284.4" y="883.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="284.4" y="867.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.20%)</title><rect x="285.6" y="883.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.20%)</title><rect x="285.6" y="867.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="285.6" y="851.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="285.6" y="835.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.10%)</title><rect x="285.6" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.10%)</title><rect x="285.6" y="803.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="285.6" y="787.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="285.6" y="771.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="285.6" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="288.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="286.8" y="819.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.8" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="286.8" y="803.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="286.8" y="787.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="286.8" y="771.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="286.8" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.10%)</title><rect x="286.8" y="739.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="286.8" y="723.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$59/1360657223.get (1 samples, 0.10%)</title><rect x="286.8" y="707.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.10%)</title><rect x="288.0" y="915.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.10%)</title><rect x="288.0" y="899.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="291.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitCompletion.invoke (1 samples, 0.10%)</title><rect x="288.0" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.10%)</title><rect x="289.2" y="931.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.40%)</title><rect x="290.4" y="931.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.30%)</title><rect x="290.4" y="915.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.30%)</title><rect x="290.4" y="899.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="290.4" y="883.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="290.4" y="867.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.10%)</title><rect x="291.6" y="883.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.10%)</title><rect x="291.6" y="867.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="291.6" y="851.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.6" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="291.6" y="835.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.10%)</title><rect x="292.8" y="883.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="292.8" y="867.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="292.8" y="851.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="292.8" y="835.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="292.8" y="819.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="292.8" y="803.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="295.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="292.8" y="787.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.8" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="292.8" y="771.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="295.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.10%)</title><rect x="294.0" y="915.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.10%)</title><rect x="294.0" y="899.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="294.0" y="883.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="294.0" y="867.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.10%)</title><rect x="294.0" y="851.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.30%)</title><rect x="295.2" y="931.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.30%)</title><rect x="295.2" y="915.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (3 samples, 0.30%)</title><rect x="295.2" y="899.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="298.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (3 samples, 0.30%)</title><rect x="295.2" y="883.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.30%)</title><rect x="295.2" y="867.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.30%)</title><rect x="295.2" y="851.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.30%)</title><rect x="295.2" y="835.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.2" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.30%)</title><rect x="295.2" y="819.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.2" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.30%)</title><rect x="295.2" y="803.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.2" y="814.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (2 samples, 0.20%)</title><rect x="296.3" y="787.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.3" y="798.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (2 samples, 0.20%)</title><rect x="296.3" y="771.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.20%)</title><rect x="296.3" y="755.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.3" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.20%)</title><rect x="296.3" y="739.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.3" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.20%)</title><rect x="296.3" y="723.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.3" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (2 samples, 0.20%)</title><rect x="296.3" y="707.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.3" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$186/962721779.accept (2 samples, 0.20%)</title><rect x="296.3" y="691.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.3" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (666 samples, 67.34%)</title><rect x="298.7" y="1011.0" width="794.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.7" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (666 samples, 67.34%)</title><rect x="298.7" y="995.0" width="794.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.7" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (666 samples, 67.34%)</title><rect x="298.7" y="979.0" width="794.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.7" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/2041471046.run (442 samples, 44.69%)</title><rect x="303.5" y="963.0" width="527.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.5" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (442 samples, 44.69%)</title><rect x="303.5" y="947.0" width="527.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.5" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (442 samples, 44.69%)</title><rect x="303.5" y="931.0" width="527.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.5" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (442 samples, 44.69%)</title><rect x="303.5" y="915.0" width="527.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="306.5" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.71%)</title><rect x="309.5" y="899.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.71%)</title><rect x="309.5" y="883.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.71%)</title><rect x="309.5" y="867.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.71%)</title><rect x="309.5" y="851.0" width="8.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.5" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="314.2" y="835.0" width="3.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="317.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="314.2" y="819.0" width="3.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="317.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (38 samples, 3.84%)</title><rect x="317.8" y="899.0" width="45.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.8" y="910.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.20%)</title><rect x="327.4" y="883.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.83%)</title><rect x="329.8" y="883.0" width="33.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="332.8" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 2.83%)</title><rect x="329.8" y="867.0" width="33.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.8" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (28 samples, 2.83%)</title><rect x="329.8" y="851.0" width="33.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="332.8" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.40%)</title><rect x="329.8" y="835.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.30%)</title><rect x="329.8" y="819.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.30%)</title><rect x="329.8" y="803.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.8" y="814.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.30%)</title><rect x="329.8" y="787.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="332.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="333.3" y="819.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (24 samples, 2.43%)</title><rect x="334.5" y="835.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.5" y="846.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$319/1068542734.accept (24 samples, 2.43%)</title><rect x="334.5" y="819.0" width="28.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.5" y="830.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (24 samples, 2.43%)</title><rect x="334.5" y="803.0" width="28.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.5" y="814.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (24 samples, 2.43%)</title><rect x="334.5" y="787.0" width="28.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.5" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (23 samples, 2.33%)</title><rect x="335.7" y="771.0" width="27.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.7" y="782.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1071238194.accept (1 samples, 0.10%)</title><rect x="341.7" y="755.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.7" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="342.9" y="755.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="345.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (16 samples, 1.62%)</title><rect x="344.1" y="755.0" width="19.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.62%)</title><rect x="344.1" y="739.0" width="19.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/1071238194.accept (1 samples, 0.10%)</title><rect x="360.8" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$83 (1 samples, 0.10%)</title><rect x="360.8" y="707.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$286/1546886938.accept (1 samples, 0.10%)</title><rect x="362.0" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (135 samples, 13.65%)</title><rect x="363.2" y="899.0" width="161.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.2" y="910.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/524241174.extract (135 samples, 13.65%)</title><rect x="363.2" y="883.0" width="161.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.2" y="894.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (135 samples, 13.65%)</title><rect x="363.2" y="867.0" width="161.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="366.2" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (135 samples, 13.65%)</title><rect x="363.2" y="851.0" width="161.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="366.2" y="862.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (135 samples, 13.65%)</title><rect x="363.2" y="835.0" width="161.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.2" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (135 samples, 13.65%)</title><rect x="363.2" y="819.0" width="161.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.2" y="830.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="363.2" y="803.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="366.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="363.2" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="366.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="363.2" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="366.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="363.2" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="366.2" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="363.2" y="739.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="366.2" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="363.2" y="723.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="366.2" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="363.2" y="707.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="366.2" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="363.2" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="366.2" y="702.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="363.2" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="366.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (37 samples, 3.74%)</title><rect x="364.4" y="803.0" width="44.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.4" y="814.0">com/..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="373.9" y="787.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="376.9" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.91%)</title><rect x="375.1" y="787.0" width="10.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="378.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.81%)</title><rect x="376.3" y="771.0" width="9.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="379.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="385.8" y="787.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.40%)</title><rect x="385.8" y="771.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="388.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.40%)</title><rect x="385.8" y="755.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.8" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="385.8" y="739.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.8" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.40%)</title><rect x="385.8" y="723.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="388.8" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.40%)</title><rect x="385.8" y="707.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.8" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.40%)</title><rect x="385.8" y="691.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (15 samples, 1.52%)</title><rect x="390.6" y="787.0" width="17.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="393.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.20%)</title><rect x="406.1" y="771.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.20%)</title><rect x="406.1" y="755.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.20%)</title><rect x="406.1" y="739.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (90 samples, 9.10%)</title><rect x="408.5" y="803.0" width="107.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.5" y="814.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.40%)</title><rect x="412.1" y="787.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="415.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.40%)</title><rect x="412.1" y="771.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="415.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (16 samples, 1.62%)</title><rect x="416.9" y="787.0" width="19.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.42%)</title><rect x="419.2" y="771.0" width="16.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.30%)</title><rect x="420.4" y="755.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="423.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.40%)</title><rect x="424.0" y="755.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.20%)</title><rect x="426.4" y="739.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="429.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="427.6" y="723.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="430.6" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="427.6" y="707.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="430.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="427.6" y="691.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="430.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="427.6" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="430.6" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="427.6" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="430.6" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="427.6" y="643.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="430.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.30%)</title><rect x="428.8" y="755.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.30%)</title><rect x="428.8" y="739.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="431.2" y="723.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="434.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.30%)</title><rect x="432.4" y="755.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="435.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.20%)</title><rect x="435.9" y="787.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.20%)</title><rect x="435.9" y="771.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="438.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (62 samples, 6.27%)</title><rect x="438.3" y="787.0" width="74.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.3" y="798.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="440.7" y="771.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 5.97%)</title><rect x="441.9" y="771.0" width="70.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.9" y="782.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.72%)</title><rect x="443.1" y="755.0" width="20.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.51%)</title><rect x="444.3" y="739.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="447.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.51%)</title><rect x="444.3" y="723.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="447.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.51%)</title><rect x="444.3" y="707.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.51%)</title><rect x="444.3" y="691.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.20%)</title><rect x="447.9" y="675.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.91%)</title><rect x="450.3" y="739.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (7 samples, 0.71%)</title><rect x="450.3" y="723.0" width="8.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.20%)</title><rect x="458.6" y="723.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.20%)</title><rect x="458.6" y="707.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="461.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.20%)</title><rect x="458.6" y="691.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.20%)</title><rect x="458.6" y="675.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="461.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="461.0" y="739.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="461.0" y="723.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (41 samples, 4.15%)</title><rect x="463.4" y="755.0" width="48.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.4" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (41 samples, 4.15%)</title><rect x="463.4" y="739.0" width="48.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.4" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (41 samples, 4.15%)</title><rect x="463.4" y="723.0" width="48.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="466.4" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.31%)</title><rect x="468.2" y="707.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.20%)</title><rect x="470.5" y="691.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.61%)</title><rect x="472.9" y="691.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="475.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.61%)</title><rect x="472.9" y="675.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="475.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.61%)</title><rect x="472.9" y="659.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="475.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.20%)</title><rect x="472.9" y="643.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.40%)</title><rect x="475.3" y="643.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="480.1" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.10%)</title><rect x="480.1" y="675.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="481.3" y="691.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="484.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="481.3" y="675.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="482.5" y="691.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.91%)</title><rect x="483.7" y="707.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.71%)</title><rect x="486.1" y="691.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.71%)</title><rect x="486.1" y="675.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="489.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.71%)</title><rect x="486.1" y="659.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.71%)</title><rect x="486.1" y="643.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="489.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="494.4" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="497.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.61%)</title><rect x="495.6" y="707.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.61%)</title><rect x="495.6" y="691.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.61%)</title><rect x="495.6" y="675.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.61%)</title><rect x="495.6" y="659.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="498.6" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.51%)</title><rect x="496.8" y="643.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.8" y="654.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.51%)</title><rect x="496.8" y="627.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.8" y="638.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (5 samples, 0.51%)</title><rect x="496.8" y="611.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.30%)</title><rect x="502.8" y="707.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="505.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="502.8" y="691.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="505.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="502.8" y="675.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.40%)</title><rect x="506.3" y="707.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="509.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.20%)</title><rect x="508.7" y="691.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.7" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="508.7" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="511.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.10%)</title><rect x="508.7" y="659.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="511.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(instanceKlassHandle, bool, int, Thread*) (1 samples, 0.10%)</title><rect x="508.7" y="643.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="511.7" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="509.9" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="512.9" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="509.9" y="659.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="512.9" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="509.9" y="643.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="512.9" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.10%)</title><rect x="511.1" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.30%)</title><rect x="512.3" y="787.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="515.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.71%)</title><rect x="515.9" y="803.0" width="8.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="518.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.61%)</title><rect x="517.1" y="787.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="520.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.61%)</title><rect x="517.1" y="771.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="520.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.61%)</title><rect x="517.1" y="755.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.61%)</title><rect x="517.1" y="739.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="520.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (255 samples, 25.78%)</title><rect x="524.2" y="899.0" width="304.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.2" y="910.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.71%)</title><rect x="529.0" y="883.0" width="8.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="532.0" y="894.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.51%)</title><rect x="531.4" y="867.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="534.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (48 samples, 4.85%)</title><rect x="537.4" y="883.0" width="57.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.4" y="894.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="537.4" y="867.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="540.4" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 4.75%)</title><rect x="538.6" y="867.0" width="56.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="541.6" y="878.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (46 samples, 4.65%)</title><rect x="539.7" y="851.0" width="54.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="542.7" y="862.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.71%)</title><rect x="542.1" y="835.0" width="8.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="545.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.71%)</title><rect x="542.1" y="819.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.71%)</title><rect x="542.1" y="803.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.71%)</title><rect x="542.1" y="787.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="545.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.20%)</title><rect x="550.5" y="835.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="553.5" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.20%)</title><rect x="550.5" y="819.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="553.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.20%)</title><rect x="550.5" y="803.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="553.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.20%)</title><rect x="550.5" y="787.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="553.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.20%)</title><rect x="550.5" y="771.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="553.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (35 samples, 3.54%)</title><rect x="552.9" y="835.0" width="41.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="555.9" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 1.11%)</title><rect x="581.5" y="819.0" width="13.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.20%)</title><rect x="583.9" y="803.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.10%)</title><rect x="585.1" y="787.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="588.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.71%)</title><rect x="586.3" y="803.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="589.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="594.6" y="883.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.6" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.40%)</title><rect x="594.6" y="867.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="597.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (130 samples, 13.14%)</title><rect x="599.4" y="883.0" width="155.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="602.4" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (124 samples, 12.54%)</title><rect x="599.4" y="867.0" width="148.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="602.4" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (52 samples, 5.26%)</title><rect x="617.3" y="851.0" width="62.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="620.3" y="862.0">com/li..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.63%)</title><rect x="635.2" y="835.0" width="31.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.2" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 2.43%)</title><rect x="637.6" y="819.0" width="28.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.6" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.81%)</title><rect x="645.9" y="803.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.9" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.81%)</title><rect x="645.9" y="787.0" width="9.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.9" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.81%)</title><rect x="645.9" y="771.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="648.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.61%)</title><rect x="647.1" y="755.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="650.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="647.1" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="650.1" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="647.1" y="723.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="650.1" y="734.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="647.1" y="707.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="650.1" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.51%)</title><rect x="648.3" y="739.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.30%)</title><rect x="650.7" y="723.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.7" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.20%)</title><rect x="650.7" y="707.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="653.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.20%)</title><rect x="650.7" y="691.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="653.7" y="702.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="651.9" y="675.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="654.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="651.9" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="654.9" y="670.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.10%)</title><rect x="651.9" y="643.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="654.9" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="653.1" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="656.1" y="718.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="653.1" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="656.1" y="702.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="654.3" y="755.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="657.3" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.51%)</title><rect x="655.5" y="803.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="658.5" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="661.4" y="803.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="664.4" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="663.8" y="803.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="666.8" y="814.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.30%)</title><rect x="666.2" y="835.0" width="3.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="669.2" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.81%)</title><rect x="669.8" y="835.0" width="9.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="672.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.71%)</title><rect x="679.3" y="851.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="682.3" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.toString (7 samples, 0.71%)</title><rect x="679.3" y="835.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="682.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (7 samples, 0.71%)</title><rect x="679.3" y="819.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="682.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="687.7" y="851.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="687.7" y="835.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.7" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="687.7" y="819.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="690.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.10%)</title><rect x="687.7" y="803.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="690.7" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="687.7" y="787.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.7" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (49 samples, 4.95%)</title><rect x="688.9" y="851.0" width="58.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.9" y="862.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (46 samples, 4.65%)</title><rect x="692.5" y="835.0" width="54.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.5" y="846.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.51%)</title><rect x="692.5" y="819.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="695.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.51%)</title><rect x="692.5" y="803.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="695.5" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.51%)</title><rect x="692.5" y="787.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="695.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.51%)</title><rect x="692.5" y="771.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="695.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (41 samples, 4.15%)</title><rect x="698.4" y="819.0" width="49.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="701.4" y="830.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (38 samples, 3.84%)</title><rect x="702.0" y="803.0" width="45.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="705.0" y="814.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 1.72%)</title><rect x="727.1" y="787.0" width="20.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.30%)</title><rect x="740.2" y="771.0" width="3.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="743.2" y="782.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.30%)</title><rect x="743.8" y="771.0" width="3.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="746.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.61%)</title><rect x="747.4" y="867.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="750.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.61%)</title><rect x="747.4" y="851.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.61%)</title><rect x="747.4" y="835.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.61%)</title><rect x="747.4" y="819.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="750.4" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="752.1" y="803.0" width="1.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="755.1" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="752.1" y="787.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="755.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="753.3" y="803.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (50 samples, 5.06%)</title><rect x="754.5" y="883.0" width="59.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.5" y="894.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (50 samples, 5.06%)</title><rect x="754.5" y="867.0" width="59.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.5" y="878.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/455900147.process (26 samples, 2.63%)</title><rect x="755.7" y="851.0" width="31.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.7" y="862.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (26 samples, 2.63%)</title><rect x="755.7" y="835.0" width="31.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="758.7" y="846.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 2.33%)</title><rect x="759.3" y="819.0" width="27.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.3" y="830.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.61%)</title><rect x="760.5" y="803.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.5" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (6 samples, 0.61%)</title><rect x="760.5" y="787.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.5" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (6 samples, 0.61%)</title><rect x="760.5" y="771.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.5" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (6 samples, 0.61%)</title><rect x="760.5" y="755.0" width="7.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (5 samples, 0.51%)</title><rect x="761.7" y="739.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (3 samples, 0.30%)</title><rect x="764.1" y="723.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="767.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.40%)</title><rect x="767.6" y="803.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="770.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="770.0" y="787.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="773.0" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="770.0" y="771.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="773.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="771.2" y="787.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="774.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="771.2" y="771.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="774.2" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.21%)</title><rect x="772.4" y="803.0" width="14.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="775.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 0.40%)</title><rect x="786.7" y="851.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="789.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (4 samples, 0.40%)</title><rect x="786.7" y="835.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="789.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.40%)</title><rect x="786.7" y="819.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="789.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.10%)</title><rect x="790.3" y="803.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.10%)</title><rect x="790.3" y="787.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.10%)</title><rect x="790.3" y="771.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.10%)</title><rect x="790.3" y="755.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="793.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.30%)</title><rect x="791.5" y="851.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="791.5" y="835.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="794.5" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.20%)</title><rect x="792.7" y="835.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.71%)</title><rect x="795.1" y="851.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.51%)</title><rect x="797.5" y="835.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="800.5" y="846.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.40%)</title><rect x="797.5" y="819.0" width="4.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="800.5" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.10%)</title><rect x="802.2" y="819.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.30%)</title><rect x="803.4" y="851.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="805.8" y="835.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="808.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.61%)</title><rect x="807.0" y="851.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.61%)</title><rect x="807.0" y="835.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="810.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.61%)</title><rect x="807.0" y="819.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="810.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.51%)</title><rect x="807.0" y="803.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.40%)</title><rect x="807.0" y="787.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.40%)</title><rect x="807.0" y="771.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$311/52915030.accept (1 samples, 0.10%)</title><rect x="809.4" y="755.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="812.4" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="810.6" y="755.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="813.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="811.8" y="787.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="813.0" y="803.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.21%)</title><rect x="814.2" y="883.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.21%)</title><rect x="814.2" y="867.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.21%)</title><rect x="814.2" y="851.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.71%)</title><rect x="814.2" y="835.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.71%)</title><rect x="814.2" y="819.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.71%)</title><rect x="814.2" y="803.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="817.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$317/1206405497.accept (4 samples, 0.40%)</title><rect x="817.7" y="787.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="820.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.51%)</title><rect x="822.5" y="835.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="825.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$317/1206405497.accept (5 samples, 0.51%)</title><rect x="822.5" y="819.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (5 samples, 0.51%)</title><rect x="822.5" y="803.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.51%)</title><rect x="822.5" y="787.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="825.5" y="798.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.51%)</title><rect x="822.5" y="771.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="825.5" y="782.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.51%)</title><rect x="822.5" y="755.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="825.5" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.40%)</title><rect x="823.7" y="739.0" width="4.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="826.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.40%)</title><rect x="823.7" y="723.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="826.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.20%)</title><rect x="828.5" y="899.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="831.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="828.5" y="883.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="831.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.10%)</title><rect x="830.9" y="963.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.10%)</title><rect x="830.9" y="947.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="833.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.10%)</title><rect x="830.9" y="931.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="833.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.10%)</title><rect x="830.9" y="915.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="833.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="830.9" y="899.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="830.9" y="883.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="830.9" y="867.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.10%)</title><rect x="830.9" y="851.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.51%)</title><rect x="832.1" y="963.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="835.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.51%)</title><rect x="832.1" y="947.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="835.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.51%)</title><rect x="832.1" y="931.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="835.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.51%)</title><rect x="832.1" y="915.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (214 samples, 21.64%)</title><rect x="838.0" y="963.0" width="255.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="841.0" y="974.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (212 samples, 21.44%)</title><rect x="840.4" y="947.0" width="253.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="843.4" y="958.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (194 samples, 19.62%)</title><rect x="841.6" y="931.0" width="231.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.6" y="942.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 2.12%)</title><rect x="855.9" y="915.0" width="25.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.9" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 0.91%)</title><rect x="881.0" y="915.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="884.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.91%)</title><rect x="881.0" y="899.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="884.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.91%)</title><rect x="881.0" y="883.0" width="10.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="884.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.91%)</title><rect x="881.0" y="867.0" width="10.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="884.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (152 samples, 15.37%)</title><rect x="891.7" y="915.0" width="181.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="894.7" y="926.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (152 samples, 15.37%)</title><rect x="891.7" y="899.0" width="181.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="894.7" y="910.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="898.9" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="901.9" y="894.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.20%)</title><rect x="900.1" y="883.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="903.1" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="902.5" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.5" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (138 samples, 13.95%)</title><rect x="903.7" y="883.0" width="164.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="906.7" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="904.8" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="907.8" y="878.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.20%)</title><rect x="906.0" y="867.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="909.0" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 1.21%)</title><rect x="908.4" y="867.0" width="14.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="911.4" y="878.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.20%)</title><rect x="916.8" y="851.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="919.8" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="916.8" y="835.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.8" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="916.8" y="819.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.8" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="918.0" y="835.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="921.0" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.30%)</title><rect x="919.2" y="851.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="922.2" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="922.7" y="867.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="925.7" y="878.0"></text>
</g>
<g>
<title>__lll_lock_wait (9 samples, 0.91%)</title><rect x="925.1" y="867.0" width="10.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="928.1" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 4.04%)</title><rect x="935.9" y="867.0" width="47.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="938.9" y="878.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 5.46%)</title><rect x="983.6" y="867.0" width="64.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="986.6" y="878.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.51%)</title><rect x="1048.0" y="867.0" width="6.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1051.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.30%)</title><rect x="1054.0" y="867.0" width="3.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1057.0" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1057.6" y="867.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1060.6" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.40%)</title><rect x="1058.8" y="867.0" width="4.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1061.8" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="1063.5" y="867.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1066.5" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1064.7" y="867.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1067.7" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.20%)</title><rect x="1065.9" y="867.0" width="2.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1068.9" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.40%)</title><rect x="1068.3" y="883.0" width="4.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1071.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (17 samples, 1.72%)</title><rect x="1073.1" y="931.0" width="20.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1076.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (17 samples, 1.72%)</title><rect x="1073.1" y="915.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (17 samples, 1.72%)</title><rect x="1073.1" y="899.0" width="20.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1076.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 1.72%)</title><rect x="1073.1" y="883.0" width="20.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1076.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1093.4" y="1011.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1096.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1093.4" y="995.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1093.4" y="979.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1096.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="1093.4" y="963.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1096.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="1093.4" y="947.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="1093.4" y="931.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1096.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="1093.4" y="915.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1096.4" y="926.0"></text>
</g>
<g>
<title>start_thread (80 samples, 8.09%)</title><rect x="1094.6" y="1011.0" width="95.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1097.6" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (80 samples, 8.09%)</title><rect x="1094.6" y="995.0" width="95.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1097.6" y="1006.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.43%)</title><rect x="1094.6" y="979.0" width="28.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1097.6" y="990.0">Ga..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1094.6" y="963.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.6" y="974.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1094.6" y="947.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1097.6" y="958.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.20%)</title><rect x="1095.7" y="963.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.7" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.20%)</title><rect x="1095.7" y="947.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.7" y="958.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1095.7" y="931.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1098.7" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 2.02%)</title><rect x="1098.1" y="963.0" width="23.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.1" y="974.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.30%)</title><rect x="1098.1" y="947.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.1" y="958.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1098.1" y="931.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.1" y="942.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1099.3" y="931.0" width="2.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1102.3" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.51%)</title><rect x="1101.7" y="947.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.7" y="958.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1101.7" y="931.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.7" y="942.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1101.7" y="915.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.7" y="926.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.20%)</title><rect x="1101.7" y="899.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.7" y="910.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.10%)</title><rect x="1101.7" y="883.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.7" y="894.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.10%)</title><rect x="1101.7" y="867.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.7" y="878.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.10%)</title><rect x="1101.7" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.7" y="862.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.10%)</title><rect x="1101.7" y="835.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.7" y="846.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.10%)</title><rect x="1102.9" y="883.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.9" y="894.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.10%)</title><rect x="1102.9" y="867.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.9" y="878.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.10%)</title><rect x="1102.9" y="851.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.9" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.30%)</title><rect x="1104.1" y="931.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.1" y="942.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.30%)</title><rect x="1104.1" y="915.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.1" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (12 samples, 1.21%)</title><rect x="1107.7" y="947.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.7" y="958.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (12 samples, 1.21%)</title><rect x="1107.7" y="931.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.7" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (11 samples, 1.11%)</title><rect x="1107.7" y="915.0" width="13.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="926.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (11 samples, 1.11%)</title><rect x="1107.7" y="899.0" width="13.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.7" y="910.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(void**) (2 samples, 0.20%)</title><rect x="1107.7" y="883.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="1108.9" y="867.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.9" y="878.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="1108.9" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.9" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.91%)</title><rect x="1110.1" y="883.0" width="10.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.1" y="894.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (9 samples, 0.91%)</title><rect x="1110.1" y="867.0" width="10.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.1" y="878.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.20%)</title><rect x="1118.4" y="851.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.4" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.10%)</title><rect x="1118.4" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.4" y="846.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.10%)</title><rect x="1119.6" y="835.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.6" y="846.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.10%)</title><rect x="1120.8" y="915.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.10%)</title><rect x="1120.8" y="899.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1123.8" y="910.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1122.0" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.0" y="974.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1122.0" y="947.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.0" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.10%)</title><rect x="1122.0" y="931.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1125.0" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (55 samples, 5.56%)</title><rect x="1123.2" y="979.0" width="65.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.2" y="990.0">JavaThr..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (55 samples, 5.56%)</title><rect x="1123.2" y="963.0" width="65.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.2" y="974.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (55 samples, 5.56%)</title><rect x="1123.2" y="947.0" width="65.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.2" y="958.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (55 samples, 5.56%)</title><rect x="1123.2" y="931.0" width="65.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.2" y="942.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (54 samples, 5.46%)</title><rect x="1123.2" y="915.0" width="64.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.2" y="926.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (54 samples, 5.46%)</title><rect x="1123.2" y="899.0" width="64.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.2" y="910.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (22 samples, 2.22%)</title><rect x="1123.2" y="883.0" width="26.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.2" y="894.0">C..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1123.2" y="867.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.2" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="1123.2" y="851.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.2" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1124.4" y="867.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="878.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="1124.4" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.4" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="1124.4" y="835.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.4" y="846.0"></text>
</g>
<g>
<title>ConstantIntValue::write_on(DebugInfoWriteStream*) (1 samples, 0.10%)</title><rect x="1124.4" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.4" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.30%)</title><rect x="1125.6" y="867.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.6" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.20%)</title><rect x="1125.6" y="851.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="862.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.10%)</title><rect x="1125.6" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.6" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1125.6" y="819.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.6" y="830.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1125.6" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.6" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1126.8" y="835.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.8" y="846.0"></text>
</g>
<g>
<title>OrLNode::Opcode() const (1 samples, 0.10%)</title><rect x="1128.0" y="851.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.0" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.20%)</title><rect x="1129.2" y="867.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.20%)</title><rect x="1129.2" y="851.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1129.2" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1130.3" y="835.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.3" y="846.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="1130.3" y="819.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.3" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 1.52%)</title><rect x="1131.5" y="867.0" width="17.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.5" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1131.5" y="851.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1131.5" y="835.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.30%)</title><rect x="1132.7" y="851.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.7" y="862.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1135.1" y="835.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.51%)</title><rect x="1136.3" y="851.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.3" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1138.7" y="835.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1139.9" y="835.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.9" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1141.1" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1142.3" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1142.3" y="835.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1143.5" y="851.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.5" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1143.5" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.10%)</title><rect x="1143.5" y="819.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.5" y="830.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.10%)</title><rect x="1143.5" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.5" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.10%)</title><rect x="1144.7" y="851.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.7" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1145.9" y="851.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.9" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1145.9" y="835.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.9" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="1147.0" y="851.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="862.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1148.2" y="835.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.2" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1148.2" y="819.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.2" y="830.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 2.53%)</title><rect x="1149.4" y="883.0" width="29.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.4" y="894.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1149.4" y="867.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.4" y="878.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1149.4" y="851.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.4" y="862.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1150.6" y="867.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.6" y="878.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.10%)</title><rect x="1150.6" y="851.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1151.8" y="867.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1151.8" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="835.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="819.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="803.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="787.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="771.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="755.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="723.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1151.8" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.8" y="718.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1151.8" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.8" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1153.0" y="867.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.0" y="878.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1153.0" y="851.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.0" y="862.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1153.0" y="835.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 1.82%)</title><rect x="1154.2" y="867.0" width="21.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="878.0">P..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1154.2" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.10%)</title><rect x="1154.2" y="835.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1154.2" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1154.2" y="803.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.2" y="814.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1154.2" y="787.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1157.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.10%)</title><rect x="1155.4" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.4" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1156.6" y="851.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 1.21%)</title><rect x="1157.8" y="851.0" width="14.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (11 samples, 1.11%)</title><rect x="1159.0" y="835.0" width="13.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1159.0" y="819.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 1.01%)</title><rect x="1160.2" y="819.0" width="11.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.2" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.30%)</title><rect x="1168.5" y="803.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.30%)</title><rect x="1172.1" y="851.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.30%)</title><rect x="1175.7" y="867.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.7" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.30%)</title><rect x="1175.7" y="851.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="862.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1175.7" y="835.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="846.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1175.7" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="830.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1176.9" y="835.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="846.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="1178.1" y="835.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.51%)</title><rect x="1179.3" y="883.0" width="5.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.51%)</title><rect x="1179.3" y="867.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.51%)</title><rect x="1179.3" y="851.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.51%)</title><rect x="1179.3" y="835.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.51%)</title><rect x="1179.3" y="819.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.51%)</title><rect x="1179.3" y="803.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.10%)</title><rect x="1179.3" y="787.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.3" y="798.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.10%)</title><rect x="1179.3" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.3" y="782.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.10%)</title><rect x="1179.3" y="755.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.3" y="766.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1179.3" y="739.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="750.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1179.3" y="723.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1179.3" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1180.5" y="787.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1180.5" y="771.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1180.5" y="755.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1180.5" y="739.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1180.5" y="723.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1180.5" y="707.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1180.5" y="691.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1180.5" y="675.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1180.5" y="659.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1180.5" y="643.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1180.5" y="627.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1180.5" y="611.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1180.5" y="595.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="606.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1180.5" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="590.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1180.5" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="574.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1180.5" y="547.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="558.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.10%)</title><rect x="1180.5" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::was_executed_more_than(int) (1 samples, 0.10%)</title><rect x="1180.5" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.6" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.6" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.6" y="547.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.6" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.6" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.6" y="499.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.6" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.6" y="467.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.6" y="451.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.6" y="435.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.6" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.6" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.6" y="387.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.6" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.6" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.6" y="339.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.6" y="323.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.6" y="307.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.6" y="291.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.6" y="275.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.6" y="259.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.6" y="243.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.6" y="227.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.6" y="211.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.6" y="195.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.6" y="179.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.6" y="163.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.6" y="147.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.6" y="131.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1181.6" y="115.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.6" y="126.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1181.6" y="99.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.6" y="83.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.6" y="67.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="78.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1181.6" y="51.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="62.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.6" y="35.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1182.8" y="787.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1182.8" y="771.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1182.8" y="755.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1182.8" y="739.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1182.8" y="723.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1182.8" y="707.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1182.8" y="691.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1182.8" y="675.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1182.8" y="659.0" width="2.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1182.8" y="643.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1182.8" y="627.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.10%)</title><rect x="1182.8" y="611.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.10%)</title><rect x="1182.8" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1182.8" y="579.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1182.8" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1182.8" y="547.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1182.8" y="531.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1182.8" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.0" y="611.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.0" y="595.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.0" y="579.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.0" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.0" y="547.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.0" y="531.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.0" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.0" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.0" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.0" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.0" y="451.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.0" y="435.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.0" y="419.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.0" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.0" y="387.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.0" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.0" y="355.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.0" y="339.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.0" y="323.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.0" y="307.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1184.0" y="291.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1184.0" y="275.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.0" y="286.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1184.0" y="259.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="270.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.10%)</title><rect x="1184.0" y="243.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="254.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.10%)</title><rect x="1184.0" y="227.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.0" y="238.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.10%)</title><rect x="1184.0" y="211.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.0" y="222.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.10%)</title><rect x="1184.0" y="195.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.0" y="206.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1184.0" y="179.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.0" y="190.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1184.0" y="163.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1187.0" y="174.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.10%)</title><rect x="1185.2" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1185.2" y="867.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.2" y="878.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.10%)</title><rect x="1186.4" y="883.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.4" y="894.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.10%)</title><rect x="1186.4" y="867.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.4" y="878.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.10%)</title><rect x="1186.4" y="851.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.4" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1187.6" y="915.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1187.6" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.6" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1187.6" y="883.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.6" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1187.6" y="867.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1187.6" y="851.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="862.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.10%)</title><rect x="1187.6" y="835.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.6" y="846.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.10%)</title><rect x="1187.6" y="819.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.6" y="830.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.10%)</title><rect x="1187.6" y="803.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="963.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="974.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="947.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.8" y="958.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="931.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="942.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="915.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
</g>
</svg>

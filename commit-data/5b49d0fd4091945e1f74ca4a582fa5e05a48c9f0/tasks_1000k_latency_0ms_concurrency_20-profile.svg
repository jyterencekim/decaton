<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1237"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1237"> </text>
<g id="frames">
<g>
<title>all (948 samples, 100.00%)</title><rect x="10.0" y="1203.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (227 samples, 23.95%)</title><rect x="10.0" y="1187.0" width="282.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (227 samples, 23.95%)</title><rect x="10.0" y="1171.0" width="282.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (227 samples, 23.95%)</title><rect x="10.0" y="1155.0" width="282.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.11%)</title><rect x="10.0" y="1139.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.11%)</title><rect x="10.0" y="1123.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="10.0" y="1107.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="10.0" y="1091.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="10.0" y="1075.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="10.0" y="1059.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="10.0" y="1043.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="10.0" y="1027.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="10.0" y="1011.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="10.0" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/829601523.test (1 samples, 0.11%)</title><rect x="10.0" y="979.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.74%)</title><rect x="11.2" y="1139.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.74%)</title><rect x="11.2" y="1123.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.63%)</title><rect x="12.5" y="1107.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/2114292968.accept (6 samples, 0.63%)</title><rect x="12.5" y="1091.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.63%)</title><rect x="12.5" y="1075.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.63%)</title><rect x="12.5" y="1059.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.5" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.53%)</title><rect x="13.7" y="1043.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 19.73%)</title><rect x="20.0" y="1139.0" width="232.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="1150.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/227438945.accept (182 samples, 19.20%)</title><rect x="20.0" y="1123.0" width="226.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.0" y="1134.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (182 samples, 19.20%)</title><rect x="20.0" y="1107.0" width="226.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="1118.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (165 samples, 17.41%)</title><rect x="20.0" y="1091.0" width="205.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.0" y="1102.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (165 samples, 17.41%)</title><rect x="20.0" y="1075.0" width="205.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.0" y="1086.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (165 samples, 17.41%)</title><rect x="20.0" y="1059.0" width="205.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.0" y="1070.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (165 samples, 17.41%)</title><rect x="20.0" y="1043.0" width="205.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.0" y="1054.0">java/util/concurrent/Execut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (165 samples, 17.41%)</title><rect x="20.0" y="1027.0" width="205.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.0" y="1038.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (165 samples, 17.41%)</title><rect x="20.0" y="1011.0" width="205.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.0" y="1022.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (122 samples, 12.87%)</title><rect x="20.0" y="995.0" width="151.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.0" y="1006.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 2.22%)</title><rect x="20.0" y="979.0" width="26.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.0" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 2.22%)</title><rect x="20.0" y="963.0" width="26.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.0" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.37%)</title><rect x="29.9" y="947.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 1.37%)</title><rect x="29.9" y="931.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.63%)</title><rect x="46.1" y="979.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.63%)</title><rect x="46.1" y="963.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.11%)</title><rect x="48.6" y="947.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.6" y="958.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.11%)</title><rect x="48.6" y="931.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="51.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.32%)</title><rect x="49.8" y="947.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 10.02%)</title><rect x="53.6" y="979.0" width="118.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.6" y="990.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 10.02%)</title><rect x="53.6" y="963.0" width="118.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.6" y="974.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 10.02%)</title><rect x="53.6" y="947.0" width="118.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.6" y="958.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 10.02%)</title><rect x="53.6" y="931.0" width="118.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.6" y="942.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (95 samples, 10.02%)</title><rect x="53.6" y="915.0" width="118.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.6" y="926.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>Unsafe_Unpark (84 samples, 8.86%)</title><rect x="53.6" y="899.0" width="104.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="56.6" y="910.0">Unsafe_Unpark</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="54.8" y="883.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="57.8" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (62 samples, 6.54%)</title><rect x="56.1" y="883.0" width="77.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="59.1" y="894.0">__pthread..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (6 samples, 0.63%)</title><rect x="133.2" y="883.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="136.2" y="894.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.48%)</title><rect x="140.7" y="883.0" width="17.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="143.7" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (11 samples, 1.16%)</title><rect x="158.1" y="899.0" width="13.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="161.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (40 samples, 4.22%)</title><rect x="171.8" y="995.0" width="49.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.8" y="1006.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (40 samples, 4.22%)</title><rect x="171.8" y="979.0" width="49.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.8" y="990.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (40 samples, 4.22%)</title><rect x="171.8" y="963.0" width="49.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.8" y="974.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.21%)</title><rect x="221.6" y="995.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.21%)</title><rect x="221.6" y="979.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="224.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.21%)</title><rect x="221.6" y="963.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="224.1" y="995.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="224.1" y="979.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="224.1" y="963.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="227.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.11%)</title><rect x="224.1" y="947.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 1.16%)</title><rect x="225.3" y="1091.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 1.16%)</title><rect x="225.3" y="1075.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="237.8" y="1059.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="237.8" y="1043.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="240.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="237.8" y="1027.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.11%)</title><rect x="237.8" y="1011.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="237.8" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.21%)</title><rect x="239.0" y="1091.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="239.0" y="1075.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="242.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="239.0" y="1059.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="242.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.42%)</title><rect x="241.5" y="1091.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.42%)</title><rect x="241.5" y="1075.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.42%)</title><rect x="241.5" y="1059.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.42%)</title><rect x="241.5" y="1043.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.42%)</title><rect x="241.5" y="1027.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.21%)</title><rect x="246.5" y="1123.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.21%)</title><rect x="246.5" y="1107.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.21%)</title><rect x="246.5" y="1091.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.21%)</title><rect x="246.5" y="1075.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (3 samples, 0.32%)</title><rect x="249.0" y="1123.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.32%)</title><rect x="249.0" y="1107.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.11%)</title><rect x="251.5" y="1091.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.11%)</title><rect x="251.5" y="1075.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.11%)</title><rect x="251.5" y="1059.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.38%)</title><rect x="252.7" y="1139.0" width="39.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.7" y="1150.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.27%)</title><rect x="254.0" y="1123.0" width="38.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.0" y="1134.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 2.22%)</title><rect x="255.2" y="1107.0" width="26.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.2" y="1118.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (21 samples, 2.22%)</title><rect x="255.2" y="1091.0" width="26.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.2" y="1102.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (20 samples, 2.11%)</title><rect x="256.5" y="1075.0" width="24.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.5" y="1086.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (15 samples, 1.58%)</title><rect x="257.7" y="1059.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (15 samples, 1.58%)</title><rect x="257.7" y="1043.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.7" y="1054.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="258.9" y="1027.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="261.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.84%)</title><rect x="260.2" y="1027.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.32%)</title><rect x="260.2" y="1011.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.32%)</title><rect x="260.2" y="995.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.32%)</title><rect x="260.2" y="979.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.32%)</title><rect x="260.2" y="963.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.32%)</title><rect x="260.2" y="947.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (3 samples, 0.32%)</title><rect x="260.2" y="931.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.32%)</title><rect x="260.2" y="915.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="263.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.53%)</title><rect x="263.9" y="1011.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.53%)</title><rect x="263.9" y="995.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (5 samples, 0.53%)</title><rect x="270.1" y="1027.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.42%)</title><rect x="271.4" y="1011.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.42%)</title><rect x="271.4" y="995.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.4" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.42%)</title><rect x="271.4" y="979.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.4" y="990.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (3 samples, 0.32%)</title><rect x="272.6" y="963.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (3 samples, 0.32%)</title><rect x="272.6" y="947.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (3 samples, 0.32%)</title><rect x="272.6" y="931.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (3 samples, 0.32%)</title><rect x="272.6" y="915.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.21%)</title><rect x="276.4" y="1059.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.21%)</title><rect x="276.4" y="1043.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="276.4" y="1027.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="276.4" y="1011.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="276.4" y="995.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="279.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="276.4" y="979.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="279.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.11%)</title><rect x="276.4" y="963.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="279.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="277.6" y="979.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.11%)</title><rect x="277.6" y="963.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.6" y="974.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.11%)</title><rect x="277.6" y="947.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="280.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.11%)</title><rect x="278.9" y="1059.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.11%)</title><rect x="278.9" y="1043.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.11%)</title><rect x="278.9" y="1027.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="278.9" y="1011.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.9" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="278.9" y="995.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="281.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.11%)</title><rect x="280.1" y="1059.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.21%)</title><rect x="281.4" y="1107.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.21%)</title><rect x="281.4" y="1091.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="284.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.21%)</title><rect x="281.4" y="1075.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.11%)</title><rect x="282.6" y="1059.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.11%)</title><rect x="282.6" y="1043.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="282.6" y="1027.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="282.6" y="1011.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="282.6" y="995.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="282.6" y="979.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="282.6" y="963.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.6" y="974.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.11%)</title><rect x="282.6" y="947.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="282.6" y="931.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.11%)</title><rect x="282.6" y="915.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.11%)</title><rect x="282.6" y="899.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$60/551479935.get (1 samples, 0.11%)</title><rect x="282.6" y="883.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.11%)</title><rect x="283.8" y="1107.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.11%)</title><rect x="283.8" y="1091.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.21%)</title><rect x="285.1" y="1107.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.11%)</title><rect x="285.1" y="1091.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.11%)</title><rect x="285.1" y="1075.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.11%)</title><rect x="285.1" y="1059.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.11%)</title><rect x="285.1" y="1043.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getStruct (1 samples, 0.11%)</title><rect x="285.1" y="1027.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.11%)</title><rect x="286.3" y="1091.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="286.3" y="1075.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="286.3" y="1059.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="286.3" y="1043.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="286.3" y="1027.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.11%)</title><rect x="286.3" y="1011.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.11%)</title><rect x="286.3" y="995.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="979.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="963.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="947.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="931.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="915.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="899.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$6.sizeOf (1 samples, 0.11%)</title><rect x="286.3" y="883.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (4 samples, 0.42%)</title><rect x="287.6" y="1107.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="290.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.42%)</title><rect x="287.6" y="1091.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.11%)</title><rect x="287.6" y="1075.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$262/226350640.accept (1 samples, 0.11%)</title><rect x="287.6" y="1059.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="290.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.11%)</title><rect x="288.8" y="1075.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.8" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.11%)</title><rect x="288.8" y="1059.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.11%)</title><rect x="288.8" y="1043.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.8" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.11%)</title><rect x="288.8" y="1027.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.11%)</title><rect x="290.1" y="1075.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.11%)</title><rect x="290.1" y="1059.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.11%)</title><rect x="290.1" y="1043.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.11%)</title><rect x="290.1" y="1027.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.11%)</title><rect x="290.1" y="1011.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.11%)</title><rect x="291.3" y="1075.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.3" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (1 samples, 0.11%)</title><rect x="291.3" y="1059.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.3" y="1070.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.11%)</title><rect x="292.6" y="1187.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="295.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/Thread.run (621 samples, 65.51%)</title><rect x="293.8" y="1187.0" width="773.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="296.8" y="1198.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (621 samples, 65.51%)</title><rect x="293.8" y="1171.0" width="773.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.8" y="1182.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (621 samples, 65.51%)</title><rect x="293.8" y="1155.0" width="773.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.8" y="1166.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/649811818.run (425 samples, 44.83%)</title><rect x="300.0" y="1139.0" width="529.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="303.0" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (425 samples, 44.83%)</title><rect x="300.0" y="1123.0" width="529.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.0" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (425 samples, 44.83%)</title><rect x="300.0" y="1107.0" width="529.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="303.0" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (425 samples, 44.83%)</title><rect x="300.0" y="1091.0" width="529.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.0" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 0.53%)</title><rect x="303.8" y="1075.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="303.8" y="1059.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="306.8" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="303.8" y="1043.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="306.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="303.8" y="1027.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="306.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="303.8" y="1011.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="306.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.42%)</title><rect x="305.0" y="1059.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.42%)</title><rect x="305.0" y="1043.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="308.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="305.0" y="1027.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.11%)</title><rect x="306.2" y="1011.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.21%)</title><rect x="307.5" y="1027.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.5" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="308.7" y="1011.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="311.7" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="308.7" y="995.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="311.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (31 samples, 3.27%)</title><rect x="310.0" y="1075.0" width="38.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.0" y="1086.0">com..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.11%)</title><rect x="321.2" y="1059.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="324.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.11%)</title><rect x="321.2" y="1043.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$307/1292489595.get$Lambda (1 samples, 0.11%)</title><rect x="321.2" y="1027.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.2" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="321.2" y="1011.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="324.2" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="321.2" y="995.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="324.2" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="321.2" y="979.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="324.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="321.2" y="963.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="324.2" y="974.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.11%)</title><rect x="321.2" y="947.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="324.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 2.22%)</title><rect x="322.4" y="1059.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.4" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 2.22%)</title><rect x="322.4" y="1043.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.4" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 2.22%)</title><rect x="322.4" y="1027.0" width="26.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.4" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.53%)</title><rect x="322.4" y="1011.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.53%)</title><rect x="322.4" y="995.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.4" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.53%)</title><rect x="322.4" y="979.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$307/1292489595.accept (3 samples, 0.32%)</title><rect x="324.9" y="963.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.69%)</title><rect x="328.6" y="1011.0" width="20.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$307/1292489595.accept (16 samples, 1.69%)</title><rect x="328.6" y="995.0" width="20.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (16 samples, 1.69%)</title><rect x="328.6" y="979.0" width="20.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (15 samples, 1.58%)</title><rect x="328.6" y="963.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (12 samples, 1.27%)</title><rect x="332.4" y="947.0" width="14.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1585892032.accept (1 samples, 0.11%)</title><rect x="337.4" y="931.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.4" y="942.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="338.6" y="931.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="341.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.63%)</title><rect x="339.9" y="931.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.63%)</title><rect x="339.9" y="915.0" width="7.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.9" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1585892032.accept (2 samples, 0.21%)</title><rect x="344.8" y="899.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.11%)</title><rect x="347.3" y="963.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (142 samples, 14.98%)</title><rect x="348.6" y="1075.0" width="176.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.6" y="1086.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (142 samples, 14.98%)</title><rect x="348.6" y="1059.0" width="176.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.6" y="1070.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (142 samples, 14.98%)</title><rect x="348.6" y="1043.0" width="176.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.6" y="1054.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="348.6" y="1027.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="351.6" y="1038.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="348.6" y="1011.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="351.6" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="348.6" y="995.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="351.6" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="348.6" y="979.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="351.6" y="990.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="348.6" y="963.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="351.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 14.87%)</title><rect x="349.8" y="1027.0" width="175.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="352.8" y="1038.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (141 samples, 14.87%)</title><rect x="349.8" y="1011.0" width="175.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.8" y="1022.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (141 samples, 14.87%)</title><rect x="349.8" y="995.0" width="175.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.8" y="1006.0">com/fasterxml/jackson/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (46 samples, 4.85%)</title><rect x="349.8" y="979.0" width="57.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="352.8" y="990.0">com/fa..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="364.7" y="963.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="367.7" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (15 samples, 1.58%)</title><rect x="366.0" y="963.0" width="18.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="369.0" y="974.0"></text>
</g>
<g>
<title>[vdso] (15 samples, 1.58%)</title><rect x="366.0" y="947.0" width="18.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="369.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (7 samples, 0.74%)</title><rect x="384.7" y="963.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 0.63%)</title><rect x="385.9" y="947.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 0.63%)</title><rect x="385.9" y="931.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.53%)</title><rect x="385.9" y="915.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.53%)</title><rect x="385.9" y="899.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.53%)</title><rect x="385.9" y="883.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="388.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.53%)</title><rect x="385.9" y="867.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="388.9" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="392.1" y="915.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.1" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.11%)</title><rect x="392.1" y="899.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.1" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="392.1" y="883.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.1" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="392.1" y="867.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="395.1" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="392.1" y="851.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="395.1" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="392.1" y="835.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="395.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="392.1" y="819.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="395.1" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="392.1" y="803.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="395.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="392.1" y="787.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="395.1" y="798.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.11%)</title><rect x="392.1" y="771.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="395.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 1.16%)</title><rect x="393.4" y="963.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 1.05%)</title><rect x="393.4" y="947.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.4" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="398.4" y="931.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="401.4" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="398.4" y="915.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="401.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="398.4" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="401.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.42%)</title><rect x="399.6" y="931.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.6" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="399.6" y="915.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="402.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="399.6" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="402.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="399.6" y="883.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="402.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="399.6" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="402.6" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="399.6" y="851.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="402.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="399.6" y="835.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="402.6" y="846.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="399.6" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="402.6" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="399.6" y="803.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="402.6" y="814.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.11%)</title><rect x="399.6" y="787.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="402.6" y="798.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.11%)</title><rect x="400.8" y="915.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="403.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.21%)</title><rect x="402.1" y="915.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="405.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="404.6" y="931.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.11%)</title><rect x="404.6" y="915.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.11%)</title><rect x="404.6" y="899.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="405.8" y="947.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (92 samples, 9.70%)</title><rect x="407.1" y="979.0" width="114.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.1" y="990.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.21%)</title><rect x="407.1" y="963.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="410.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.84%)</title><rect x="409.6" y="963.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.63%)</title><rect x="412.0" y="947.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 1.05%)</title><rect x="419.5" y="963.0" width="12.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="422.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.05%)</title><rect x="419.5" y="947.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="422.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="422.0" y="931.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.21%)</title><rect x="423.2" y="931.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.11%)</title><rect x="424.5" y="915.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="427.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.32%)</title><rect x="425.7" y="931.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.32%)</title><rect x="425.7" y="915.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.32%)</title><rect x="425.7" y="899.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="428.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.32%)</title><rect x="425.7" y="883.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="428.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.21%)</title><rect x="429.5" y="931.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="432.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.21%)</title><rect x="429.5" y="915.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="432.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.11%)</title><rect x="430.7" y="899.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="433.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (8 samples, 0.84%)</title><rect x="432.0" y="963.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="435.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (8 samples, 0.84%)</title><rect x="432.0" y="947.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="435.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="439.4" y="931.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="442.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="439.4" y="915.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="439.4" y="899.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.4" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="439.4" y="883.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="442.4" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="440.7" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="443.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="440.7" y="867.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="443.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="440.7" y="851.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="443.7" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="440.7" y="835.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="443.7" y="846.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.11%)</title><rect x="440.7" y="819.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="443.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (61 samples, 6.43%)</title><rect x="441.9" y="963.0" width="75.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.9" y="974.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.21%)</title><rect x="441.9" y="947.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="444.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (59 samples, 6.22%)</title><rect x="444.4" y="947.0" width="73.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="447.4" y="958.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 2.11%)</title><rect x="444.4" y="931.0" width="24.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="447.4" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="445.7" y="915.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.42%)</title><rect x="446.9" y="915.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.42%)</title><rect x="446.9" y="899.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="449.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.42%)</title><rect x="446.9" y="883.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.32%)</title><rect x="448.1" y="867.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.21%)</title><rect x="449.4" y="851.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (13 samples, 1.37%)</title><rect x="451.9" y="915.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (5 samples, 0.53%)</title><rect x="451.9" y="899.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (8 samples, 0.84%)</title><rect x="458.1" y="899.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (8 samples, 0.84%)</title><rect x="458.1" y="883.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (7 samples, 0.74%)</title><rect x="459.3" y="867.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (7 samples, 0.74%)</title><rect x="459.3" y="851.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="468.1" y="915.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="471.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="468.1" y="899.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="471.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (39 samples, 4.11%)</title><rect x="469.3" y="931.0" width="48.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.3" y="942.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (39 samples, 4.11%)</title><rect x="469.3" y="915.0" width="48.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.3" y="926.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (37 samples, 3.90%)</title><rect x="471.8" y="899.0" width="46.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="474.8" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.69%)</title><rect x="475.5" y="883.0" width="19.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="478.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="479.3" y="867.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.84%)</title><rect x="480.5" y="867.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.84%)</title><rect x="480.5" y="851.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.84%)</title><rect x="480.5" y="835.0" width="10.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.42%)</title><rect x="485.5" y="819.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.42%)</title><rect x="485.5" y="803.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.21%)</title><rect x="488.0" y="787.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.0" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.21%)</title><rect x="488.0" y="771.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.32%)</title><rect x="490.5" y="867.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.11%)</title><rect x="490.5" y="851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.21%)</title><rect x="491.7" y="851.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="494.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.21%)</title><rect x="491.7" y="835.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="494.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="494.2" y="867.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="497.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="494.2" y="851.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.53%)</title><rect x="495.4" y="883.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.42%)</title><rect x="496.7" y="867.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="499.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.42%)</title><rect x="496.7" y="851.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.42%)</title><rect x="496.7" y="835.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.42%)</title><rect x="496.7" y="819.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.7" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.53%)</title><rect x="501.7" y="883.0" width="6.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.7" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.53%)</title><rect x="501.7" y="867.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="504.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.53%)</title><rect x="501.7" y="851.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (8 samples, 0.84%)</title><rect x="507.9" y="883.0" width="9.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="510.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (8 samples, 0.84%)</title><rect x="507.9" y="867.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="510.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.32%)</title><rect x="517.8" y="963.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="520.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.32%)</title><rect x="521.6" y="979.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="524.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.32%)</title><rect x="521.6" y="963.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="524.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.32%)</title><rect x="521.6" y="947.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.32%)</title><rect x="521.6" y="931.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="524.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.32%)</title><rect x="521.6" y="915.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (237 samples, 25.00%)</title><rect x="525.3" y="1075.0" width="295.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.3" y="1086.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (37 samples, 3.90%)</title><rect x="532.8" y="1059.0" width="46.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="535.8" y="1070.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (3 samples, 0.32%)</title><rect x="534.0" y="1043.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="537.0" y="1054.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 3.48%)</title><rect x="537.8" y="1043.0" width="41.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="540.8" y="1054.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 3.38%)</title><rect x="539.0" y="1027.0" width="39.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.0" y="1038.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 1.05%)</title><rect x="541.5" y="1011.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="544.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 1.05%)</title><rect x="541.5" y="995.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (10 samples, 1.05%)</title><rect x="541.5" y="979.0" width="12.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.5" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 1.05%)</title><rect x="541.5" y="963.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.5" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (10 samples, 1.05%)</title><rect x="541.5" y="947.0" width="12.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.5" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.53%)</title><rect x="553.9" y="1011.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="556.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.32%)</title><rect x="555.2" y="995.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="557.7" y="979.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="560.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.11%)</title><rect x="558.9" y="995.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="561.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 1.58%)</title><rect x="560.2" y="1011.0" width="18.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="563.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.53%)</title><rect x="570.1" y="995.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.1" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.53%)</title><rect x="570.1" y="979.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.21%)</title><rect x="576.4" y="995.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="579.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.53%)</title><rect x="578.8" y="1059.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.53%)</title><rect x="578.8" y="1043.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (119 samples, 12.55%)</title><rect x="585.1" y="1059.0" width="148.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.1" y="1070.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (115 samples, 12.13%)</title><rect x="585.1" y="1043.0" width="143.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.1" y="1054.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (38 samples, 4.01%)</title><rect x="591.3" y="1027.0" width="47.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="594.3" y="1038.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.69%)</title><rect x="606.2" y="1011.0" width="19.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="609.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.69%)</title><rect x="606.2" y="995.0" width="19.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="609.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.53%)</title><rect x="612.4" y="979.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="615.4" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.53%)</title><rect x="612.4" y="963.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.4" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.53%)</title><rect x="612.4" y="947.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="615.4" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.53%)</title><rect x="612.4" y="931.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="615.4" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.21%)</title><rect x="612.4" y="915.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="615.4" y="926.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.11%)</title><rect x="612.4" y="899.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="615.4" y="910.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.11%)</title><rect x="612.4" y="883.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="615.4" y="894.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="613.7" y="899.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="616.7" y="910.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.11%)</title><rect x="613.7" y="883.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="616.7" y="894.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.11%)</title><rect x="613.7" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="616.7" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.32%)</title><rect x="614.9" y="915.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="617.9" y="926.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="616.2" y="899.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="619.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="617.4" y="899.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="620.4" y="910.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="617.4" y="883.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="620.4" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="617.4" y="867.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="620.4" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.21%)</title><rect x="618.7" y="979.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.7" y="990.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="621.2" y="979.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="624.2" y="990.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.11%)</title><rect x="624.9" y="979.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="627.9" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.11%)</title><rect x="626.1" y="1011.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="626.1" y="995.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="629.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.11%)</title><rect x="626.1" y="979.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.1" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="626.1" y="963.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="629.1" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="626.1" y="947.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="626.1" y="931.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="629.1" y="942.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.11%)</title><rect x="627.4" y="1011.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="630.4" y="1022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.84%)</title><rect x="628.6" y="1011.0" width="10.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="631.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.63%)</title><rect x="638.6" y="1027.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.63%)</title><rect x="638.6" y="1011.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.6" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.11%)</title><rect x="638.6" y="995.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="641.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.53%)</title><rect x="639.8" y="995.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.8" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.11%)</title><rect x="644.8" y="979.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.8" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (66 samples, 6.96%)</title><rect x="646.1" y="1027.0" width="82.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.1" y="1038.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (54 samples, 5.70%)</title><rect x="661.0" y="1011.0" width="67.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="664.0" y="1022.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.32%)</title><rect x="661.0" y="995.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="664.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.32%)</title><rect x="661.0" y="979.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.0" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.32%)</title><rect x="661.0" y="963.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="664.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.32%)</title><rect x="661.0" y="947.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="664.0" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="664.7" y="995.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="667.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="664.7" y="979.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.7" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="664.7" y="963.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.7" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.11%)</title><rect x="664.7" y="947.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="664.7" y="931.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.7" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (50 samples, 5.27%)</title><rect x="666.0" y="995.0" width="62.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.0" y="1006.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (46 samples, 4.85%)</title><rect x="670.9" y="979.0" width="57.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.9" y="990.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (21 samples, 2.22%)</title><rect x="702.1" y="963.0" width="26.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.1" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.21%)</title><rect x="712.0" y="947.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="715.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 1.05%)</title><rect x="714.5" y="947.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.5" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.32%)</title><rect x="723.2" y="931.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="726.2" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.21%)</title><rect x="724.5" y="915.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="727.5" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.21%)</title><rect x="724.5" y="899.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.5" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.21%)</title><rect x="724.5" y="883.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="727.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.11%)</title><rect x="724.5" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="727.5" y="878.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="725.7" y="867.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="728.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="725.7" y="851.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.7" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.11%)</title><rect x="727.0" y="947.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="730.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 0.42%)</title><rect x="728.2" y="1043.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.2" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.42%)</title><rect x="728.2" y="1027.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.42%)</title><rect x="728.2" y="1011.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.42%)</title><rect x="728.2" y="995.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.2" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="729.5" y="979.0" width="3.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="732.5" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="730.7" y="963.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="733.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 6.43%)</title><rect x="733.2" y="1059.0" width="75.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="736.2" y="1070.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (61 samples, 6.43%)</title><rect x="733.2" y="1043.0" width="75.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.2" y="1054.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/958742860.process (27 samples, 2.85%)</title><rect x="734.4" y="1027.0" width="33.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.4" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (26 samples, 2.74%)</title><rect x="735.7" y="1011.0" width="32.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.7" y="1022.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 2.43%)</title><rect x="735.7" y="995.0" width="28.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="738.7" y="1006.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.21%)</title><rect x="750.6" y="979.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="753.6" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.21%)</title><rect x="750.6" y="963.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="753.6" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.21%)</title><rect x="750.6" y="947.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.6" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.21%)</title><rect x="750.6" y="931.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="753.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.21%)</title><rect x="750.6" y="915.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="753.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.84%)</title><rect x="753.1" y="979.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="756.1" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.74%)</title><rect x="754.3" y="963.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.74%)</title><rect x="754.3" y="947.0" width="8.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="757.3" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="763.1" y="979.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.1" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="763.1" y="963.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.1" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="763.1" y="947.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.32%)</title><rect x="764.3" y="995.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="767.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.32%)</title><rect x="764.3" y="979.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.32%)</title><rect x="764.3" y="963.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.32%)</title><rect x="764.3" y="947.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.32%)</title><rect x="768.0" y="1027.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="771.8" y="1027.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.21%)</title><rect x="771.8" y="1011.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.11%)</title><rect x="774.3" y="1027.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1458702002.get (1 samples, 0.11%)</title><rect x="774.3" y="1011.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (1 samples, 0.11%)</title><rect x="774.3" y="995.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="777.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.11%)</title><rect x="775.5" y="1027.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="778.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.11%)</title><rect x="775.5" y="1011.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/1468060011.get$Lambda (1 samples, 0.11%)</title><rect x="775.5" y="995.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="778.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.21%)</title><rect x="776.8" y="1027.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.11%)</title><rect x="778.0" y="1011.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.0" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.11%)</title><rect x="778.0" y="995.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.0" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (6 samples, 0.63%)</title><rect x="779.2" y="1027.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="782.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.53%)</title><rect x="780.5" y="1011.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.5" y="1022.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.53%)</title><rect x="780.5" y="995.0" width="6.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="783.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.21%)</title><rect x="786.7" y="1027.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.7" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="788.0" y="1011.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (9 samples, 0.95%)</title><rect x="789.2" y="1027.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="792.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.63%)</title><rect x="792.9" y="1011.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="795.9" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.11%)</title><rect x="799.2" y="995.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="802.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.74%)</title><rect x="800.4" y="1027.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.74%)</title><rect x="800.4" y="1011.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="803.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.74%)</title><rect x="800.4" y="995.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="803.4" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="800.4" y="979.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="803.4" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="800.4" y="963.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="803.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="800.4" y="947.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="803.4" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="800.4" y="931.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="803.4" y="942.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.11%)</title><rect x="800.4" y="915.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.63%)</title><rect x="801.6" y="979.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.6" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.53%)</title><rect x="801.6" y="963.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="804.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.53%)</title><rect x="801.6" y="947.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="804.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/1468060011.accept (2 samples, 0.21%)</title><rect x="805.4" y="931.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="808.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="807.9" y="963.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.95%)</title><rect x="809.1" y="1059.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="812.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 0.95%)</title><rect x="809.1" y="1043.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="812.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 0.95%)</title><rect x="809.1" y="1027.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="812.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.42%)</title><rect x="809.1" y="1011.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.42%)</title><rect x="809.1" y="995.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="812.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.42%)</title><rect x="809.1" y="979.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="812.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$305/1207023627.accept (2 samples, 0.21%)</title><rect x="810.4" y="963.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="813.4" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="812.8" y="963.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="815.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.53%)</title><rect x="814.1" y="1011.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$305/1207023627.accept (5 samples, 0.53%)</title><rect x="814.1" y="995.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="814.1" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="814.1" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="814.1" y="947.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="817.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="814.1" y="931.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.1" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="814.1" y="915.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="814.1" y="899.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="817.1" y="910.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.11%)</title><rect x="814.1" y="883.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="817.1" y="894.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit_epilogue() (1 samples, 0.11%)</title><rect x="814.1" y="867.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="817.1" y="878.0"></text>
</g>
<g>
<title>InstanceRefKlass::release_and_notify_pending_list_lock(BasicLock*) (1 samples, 0.11%)</title><rect x="814.1" y="851.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="817.1" y="862.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::pending_list_lock() (1 samples, 0.11%)</title><rect x="814.1" y="835.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.1" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::static_field_addr(int) (1 samples, 0.11%)</title><rect x="814.1" y="819.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (4 samples, 0.42%)</title><rect x="815.3" y="979.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="818.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.42%)</title><rect x="815.3" y="963.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.3" y="974.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.42%)</title><rect x="815.3" y="947.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="818.3" y="958.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.42%)</title><rect x="815.3" y="931.0" width="5.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="818.3" y="942.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="815.3" y="915.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="818.3" y="926.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="815.3" y="899.0" width="3.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="818.3" y="910.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="819.1" y="915.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="822.1" y="926.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.74%)</title><rect x="820.3" y="1075.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.3" y="1086.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.63%)</title><rect x="821.6" y="1059.0" width="7.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="824.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.63%)</title><rect x="829.0" y="1139.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.63%)</title><rect x="829.0" y="1123.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="832.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.63%)</title><rect x="829.0" y="1107.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.63%)</title><rect x="829.0" y="1091.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="832.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (185 samples, 19.51%)</title><rect x="836.5" y="1139.0" width="230.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="839.5" y="1150.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (185 samples, 19.51%)</title><rect x="836.5" y="1123.0" width="230.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="839.5" y="1134.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (167 samples, 17.62%)</title><rect x="842.7" y="1107.0" width="207.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="845.7" y="1118.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.21%)</title><rect x="863.9" y="1091.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="866.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.21%)</title><rect x="863.9" y="1075.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="866.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.21%)</title><rect x="863.9" y="1059.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="866.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 2.11%)</title><rect x="866.4" y="1091.0" width="24.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.4" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.74%)</title><rect x="891.3" y="1091.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="894.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.74%)</title><rect x="891.3" y="1075.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="894.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (7 samples, 0.74%)</title><rect x="891.3" y="1059.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="894.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (7 samples, 0.74%)</title><rect x="891.3" y="1043.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="894.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (121 samples, 12.76%)</title><rect x="900.0" y="1091.0" width="150.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.0" y="1102.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (121 samples, 12.76%)</title><rect x="900.0" y="1075.0" width="150.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.0" y="1086.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.21%)</title><rect x="907.4" y="1059.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="910.4" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="909.9" y="1059.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="912.9" y="1070.0"></text>
</g>
<g>
<title>Unsafe_Park (109 samples, 11.50%)</title><rect x="911.2" y="1059.0" width="135.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="914.2" y="1070.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="912.4" y="1043.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="915.4" y="1054.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.84%)</title><rect x="913.7" y="1043.0" width="9.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.7" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.32%)</title><rect x="919.9" y="1027.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.9" y="1038.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.11%)</title><rect x="923.6" y="1043.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="926.6" y="1054.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.32%)</title><rect x="924.9" y="1043.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="927.9" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (30 samples, 3.16%)</title><rect x="928.6" y="1043.0" width="37.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="931.6" y="1054.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (50 samples, 5.27%)</title><rect x="965.9" y="1043.0" width="62.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="968.9" y="1054.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.74%)</title><rect x="1028.2" y="1043.0" width="8.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1031.2" y="1054.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.21%)</title><rect x="1036.9" y="1043.0" width="2.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1039.9" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="1039.4" y="1043.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1042.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="1040.6" y="1043.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1043.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="1041.9" y="1043.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1044.9" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.21%)</title><rect x="1043.1" y="1043.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.1" y="1054.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="1045.6" y="1043.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.6" y="1054.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.21%)</title><rect x="1046.9" y="1059.0" width="2.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1049.9" y="1070.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1049.3" y="1059.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.37%)</title><rect x="1050.6" y="1107.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.37%)</title><rect x="1050.6" y="1091.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1053.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.37%)</title><rect x="1050.6" y="1075.0" width="16.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.37%)</title><rect x="1050.6" y="1059.0" width="16.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1053.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1066.8" y="1187.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1069.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1066.8" y="1171.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1069.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1066.8" y="1155.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1069.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.11%)</title><rect x="1066.8" y="1139.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1069.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.11%)</title><rect x="1066.8" y="1123.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1069.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.11%)</title><rect x="1066.8" y="1107.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1069.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.11%)</title><rect x="1066.8" y="1091.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1069.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.11%)</title><rect x="1066.8" y="1075.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1069.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.11%)</title><rect x="1066.8" y="1059.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1069.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1066.8" y="1043.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1069.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.11%)</title><rect x="1066.8" y="1027.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1069.8" y="1038.0"></text>
</g>
<g>
<title>start_thread (98 samples, 10.34%)</title><rect x="1068.0" y="1187.0" width="122.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1071.0" y="1198.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (98 samples, 10.34%)</title><rect x="1068.0" y="1171.0" width="122.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1071.0" y="1182.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 2.11%)</title><rect x="1068.0" y="1155.0" width="24.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1071.0" y="1166.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="1068.0" y="1139.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.0" y="1150.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1068.0" y="1123.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1071.0" y="1134.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.32%)</title><rect x="1069.3" y="1139.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.3" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.32%)</title><rect x="1069.3" y="1123.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.3" y="1134.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.11%)</title><rect x="1069.3" y="1107.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.3" y="1118.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.21%)</title><rect x="1070.5" y="1107.0" width="2.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1073.5" y="1118.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.69%)</title><rect x="1073.0" y="1139.0" width="19.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.0" y="1150.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.32%)</title><rect x="1073.0" y="1123.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1076.0" y="1134.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.32%)</title><rect x="1073.0" y="1107.0" width="3.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1076.0" y="1118.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.63%)</title><rect x="1076.7" y="1123.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1079.7" y="1134.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.21%)</title><rect x="1076.7" y="1107.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.7" y="1118.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.21%)</title><rect x="1076.7" y="1091.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1079.7" y="1102.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.21%)</title><rect x="1076.7" y="1075.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.7" y="1086.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.11%)</title><rect x="1078.0" y="1059.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.0" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.42%)</title><rect x="1079.2" y="1107.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.2" y="1118.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.42%)</title><rect x="1079.2" y="1091.0" width="5.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.2" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.74%)</title><rect x="1084.2" y="1123.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1087.2" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.74%)</title><rect x="1084.2" y="1107.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.2" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.74%)</title><rect x="1084.2" y="1091.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.2" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.74%)</title><rect x="1084.2" y="1075.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.2" y="1086.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.74%)</title><rect x="1084.2" y="1059.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.2" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.74%)</title><rect x="1084.2" y="1043.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.2" y="1054.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.32%)</title><rect x="1089.2" y="1027.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.2" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (76 samples, 8.02%)</title><rect x="1092.9" y="1155.0" width="94.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.9" y="1166.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 8.02%)</title><rect x="1092.9" y="1139.0" width="94.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.9" y="1150.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 8.02%)</title><rect x="1092.9" y="1123.0" width="94.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.9" y="1134.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (75 samples, 7.91%)</title><rect x="1092.9" y="1107.0" width="93.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.9" y="1118.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 7.91%)</title><rect x="1092.9" y="1091.0" width="93.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.9" y="1102.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (75 samples, 7.91%)</title><rect x="1092.9" y="1075.0" width="93.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.9" y="1086.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 3.69%)</title><rect x="1092.9" y="1059.0" width="43.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.9" y="1070.0">Comp..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.21%)</title><rect x="1092.9" y="1043.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.9" y="1054.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.11%)</title><rect x="1094.2" y="1027.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1097.2" y="1038.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.11%)</title><rect x="1094.2" y="1011.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.2" y="1022.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.11%)</title><rect x="1094.2" y="995.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.2" y="1006.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.53%)</title><rect x="1095.4" y="1043.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.4" y="1054.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.21%)</title><rect x="1095.4" y="1027.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.4" y="1038.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.32%)</title><rect x="1097.9" y="1027.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.32%)</title><rect x="1101.6" y="1043.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.32%)</title><rect x="1101.6" y="1027.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1101.6" y="1011.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.6" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1102.9" y="1011.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.9" y="1022.0"></text>
</g>
<g>
<title>jmpConNode::pinned() const (1 samples, 0.11%)</title><rect x="1104.1" y="1011.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.1" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;) (1 samples, 0.11%)</title><rect x="1105.4" y="1043.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (24 samples, 2.53%)</title><rect x="1106.6" y="1043.0" width="29.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.6" y="1054.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.11%)</title><rect x="1106.6" y="1027.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.11%)</title><rect x="1107.8" y="1027.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.11%)</title><rect x="1107.8" y="1011.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.8" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1107.8" y="995.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.21%)</title><rect x="1109.1" y="1027.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1112.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.53%)</title><rect x="1111.6" y="1027.0" width="6.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.32%)</title><rect x="1114.1" y="1011.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.1" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1116.6" y="995.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1119.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.11%)</title><rect x="1117.8" y="1027.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1117.8" y="1011.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.8" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (9 samples, 0.95%)</title><rect x="1119.1" y="1027.0" width="11.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.1" y="1038.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.11%)</title><rect x="1124.0" y="1011.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.0" y="1022.0"></text>
</g>
<g>
<title>RegMask::Size() const (4 samples, 0.42%)</title><rect x="1125.3" y="1011.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.42%)</title><rect x="1130.3" y="1027.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.21%)</title><rect x="1131.5" y="1011.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.5" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1132.7" y="995.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.7" y="1006.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.11%)</title><rect x="1132.7" y="979.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1134.0" y="1011.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.11%)</title><rect x="1135.2" y="1027.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.2" y="1038.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 3.38%)</title><rect x="1136.5" y="1059.0" width="39.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.5" y="1070.0">Com..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.11%)</title><rect x="1136.5" y="1043.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.5" y="1054.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1136.5" y="1027.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="1137.7" y="1043.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="1137.7" y="1027.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1137.7" y="1011.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1137.7" y="995.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.7" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.11%)</title><rect x="1139.0" y="1043.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.0" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1139.0" y="1027.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (25 samples, 2.64%)</title><rect x="1140.2" y="1043.0" width="31.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.2" y="1054.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.32%)</title><rect x="1140.2" y="1027.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.2" y="1038.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.11%)</title><rect x="1142.7" y="1011.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1143.9" y="1027.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 2.00%)</title><rect x="1145.2" y="1027.0" width="23.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.2" y="1038.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 1.69%)</title><rect x="1148.9" y="1011.0" width="19.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.11%)</title><rect x="1148.9" y="995.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 1.58%)</title><rect x="1150.2" y="995.0" width="18.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.32%)</title><rect x="1165.1" y="979.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1168.8" y="1027.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1170.1" y="1027.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1170.1" y="1011.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1170.1" y="995.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1170.1" y="979.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="947.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.1" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="931.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.1" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="915.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.1" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="899.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.1" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="883.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.1" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="867.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.1" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="851.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.1" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="835.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.1" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="819.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.1" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="803.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.1" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="771.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="755.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.1" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="739.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.1" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="723.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1170.1" y="707.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.1" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="691.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.1" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.32%)</title><rect x="1171.3" y="1043.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.32%)</title><rect x="1171.3" y="1027.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1038.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1171.3" y="1011.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="1022.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.11%)</title><rect x="1171.3" y="995.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1171.3" y="979.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.3" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1171.3" y="963.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.3" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1172.6" y="1011.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1173.8" y="1011.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1173.8" y="995.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.8" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="979.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.8" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="963.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="947.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="931.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="915.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="899.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.8" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="883.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="867.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="851.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1173.8" y="835.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.8" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1173.8" y="819.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.8" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.11%)</title><rect x="1175.1" y="1043.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.11%)</title><rect x="1175.1" y="1027.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.1" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1175.1" y="1011.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.1" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.74%)</title><rect x="1176.3" y="1059.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.74%)</title><rect x="1176.3" y="1043.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.74%)</title><rect x="1176.3" y="1027.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.74%)</title><rect x="1176.3" y="1011.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.74%)</title><rect x="1176.3" y="995.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.63%)</title><rect x="1176.3" y="979.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.53%)</title><rect x="1176.3" y="963.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.53%)</title><rect x="1176.3" y="947.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.53%)</title><rect x="1176.3" y="931.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.53%)</title><rect x="1176.3" y="915.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.53%)</title><rect x="1176.3" y="899.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.53%)</title><rect x="1176.3" y="883.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1176.3" y="867.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.32%)</title><rect x="1176.3" y="851.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.32%)</title><rect x="1176.3" y="835.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.32%)</title><rect x="1176.3" y="819.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.32%)</title><rect x="1176.3" y="803.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.32%)</title><rect x="1176.3" y="787.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1176.3" y="771.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1176.3" y="755.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1176.3" y="739.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1176.3" y="723.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1176.3" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1176.3" y="691.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1176.3" y="675.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1176.3" y="659.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1176.3" y="643.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.3" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1176.3" y="627.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1176.3" y="611.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1176.3" y="595.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="606.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.11%)</title><rect x="1176.3" y="579.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="590.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.11%)</title><rect x="1176.3" y="563.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.11%)</title><rect x="1176.3" y="547.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="558.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.11%)</title><rect x="1176.3" y="531.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.3" y="542.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.11%)</title><rect x="1176.3" y="515.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="526.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.11%)</title><rect x="1176.3" y="499.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.11%)</title><rect x="1176.3" y="483.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.11%)</title><rect x="1176.3" y="467.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1177.6" y="771.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1177.6" y="755.0" width="2.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1177.6" y="739.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1177.6" y="723.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="707.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="691.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="675.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="659.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="627.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="611.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="595.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="579.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="563.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="547.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="515.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="467.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="435.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="419.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="403.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="387.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="371.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="355.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="339.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="323.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="307.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="291.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="275.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="259.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="243.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="227.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="211.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="195.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="179.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="163.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="147.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="131.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="142.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.11%)</title><rect x="1178.8" y="115.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="126.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.11%)</title><rect x="1178.8" y="99.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1178.8" y="83.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="94.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1178.8" y="67.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="78.0"></text>
</g>
<g>
<title>TypeKlassPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1178.8" y="51.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="62.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.11%)</title><rect x="1178.8" y="35.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1180.0" y="867.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1180.0" y="851.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1180.0" y="835.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1180.0" y="819.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1180.0" y="803.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1180.0" y="787.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.21%)</title><rect x="1180.0" y="771.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1180.0" y="755.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1180.0" y="739.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1180.0" y="723.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1180.0" y="707.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1180.0" y="691.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.21%)</title><rect x="1180.0" y="675.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.0" y="659.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.0" y="643.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.0" y="627.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.0" y="611.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.0" y="595.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.0" y="579.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1180.0" y="563.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1180.0" y="547.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1180.0" y="531.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1180.0" y="515.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1180.0" y="499.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.0" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1180.0" y="483.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1180.0" y="467.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.0" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1180.0" y="451.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1180.0" y="435.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1180.0" y="419.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1180.0" y="403.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1180.0" y="387.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1180.0" y="371.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.0" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1180.0" y="355.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="366.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1180.0" y="339.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="350.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.11%)</title><rect x="1180.0" y="323.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.11%)</title><rect x="1180.0" y="307.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="318.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1180.0" y="291.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="302.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_appendix() (1 samples, 0.11%)</title><rect x="1181.3" y="659.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.11%)</title><rect x="1181.3" y="643.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.11%)</title><rect x="1181.3" y="627.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="638.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.11%)</title><rect x="1181.3" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::is_scavengable(void const*) (1 samples, 0.11%)</title><rect x="1181.3" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.3" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="963.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="947.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="931.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="915.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="899.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="883.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="867.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="851.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="835.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="819.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="803.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.5" y="787.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.5" y="771.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1182.5" y="755.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.11%)</title><rect x="1182.5" y="739.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1182.5" y="723.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="734.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1182.5" y="707.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="718.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1182.5" y="691.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="1182.5" y="675.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.11%)</title><rect x="1183.8" y="979.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.8" y="990.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.11%)</title><rect x="1183.8" y="963.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="974.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1183.8" y="947.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="958.0"></text>
</g>
<g>
<title>TypeTuple::xdual() const (1 samples, 0.11%)</title><rect x="1183.8" y="931.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.8" y="942.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.11%)</title><rect x="1185.0" y="1059.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.0" y="1070.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.11%)</title><rect x="1185.0" y="1043.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.0" y="1054.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.11%)</title><rect x="1186.3" y="1107.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.3" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.11%)</title><rect x="1186.3" y="1091.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="1102.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.11%)</title><rect x="1186.3" y="1075.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="1086.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.11%)</title><rect x="1186.3" y="1059.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="1070.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.11%)</title><rect x="1186.3" y="1043.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="1054.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.21%)</title><rect x="1187.5" y="1155.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="1166.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.21%)</title><rect x="1187.5" y="1139.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.5" y="1150.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.11%)</title><rect x="1187.5" y="1123.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.5" y="1134.0"></text>
</g>
<g>
<title>RuntimeService::record_safepoint_end() (1 samples, 0.11%)</title><rect x="1187.5" y="1107.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="1118.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.11%)</title><rect x="1188.8" y="1123.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="1134.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.8" y="1107.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.8" y="1118.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.11%)</title><rect x="1188.8" y="1091.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.8" y="1075.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.11%)</title><rect x="1188.8" y="1059.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::G1RootProcessor(G1CollectedHeap*) (1 samples, 0.11%)</title><rect x="1188.8" y="1043.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.8" y="1054.0"></text>
</g>
<g>
<title>CHeapObj&lt;(MemoryType)7&gt;::operator new(unsigned long) (1 samples, 0.11%)</title><rect x="1188.8" y="1027.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="1038.0"></text>
</g>
</g>
</svg>

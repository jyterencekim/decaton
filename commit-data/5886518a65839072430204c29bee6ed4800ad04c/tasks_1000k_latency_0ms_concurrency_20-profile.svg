<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,200 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.17%)</title><rect x="11.0" y="2035.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="2046.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.08%)</title><rect x="11.0" y="2019.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="12.0" y="2019.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="15.0" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (241 samples, 20.08%)</title><rect x="12.9" y="2035.0" width="236.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="2046.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (241 samples, 20.08%)</title><rect x="12.9" y="2019.0" width="236.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="2030.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.08%)</title><rect x="12.9" y="2003.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.9" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.08%)</title><rect x="12.9" y="1987.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.08%)</title><rect x="12.9" y="1971.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.08%)</title><rect x="12.9" y="1955.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="12.9" y="1939.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="15.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="12.9" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="12.9" y="1907.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="12.9" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="12.9" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="15.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="12.9" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="12.9" y="1843.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="15.9" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="12.9" y="1827.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="12.9" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.9" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="12.9" y="1795.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="12.9" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.9" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.write (1 samples, 0.08%)</title><rect x="12.9" y="1763.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="12.9" y="1747.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="1758.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="12.9" y="1731.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="15.9" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (240 samples, 20.00%)</title><rect x="13.9" y="2003.0" width="236.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.9" y="2014.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.17%)</title><rect x="13.9" y="1987.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.17%)</title><rect x="13.9" y="1971.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="13.9" y="1955.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.9" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="13.9" y="1939.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.9" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="13.9" y="1923.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="13.9" y="1907.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.9" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.17%)</title><rect x="13.9" y="1891.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.9" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="13.9" y="1875.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="16.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="13.9" y="1859.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="13.9" y="1843.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.9" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.9" y="1875.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.9" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="14.9" y="1859.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.9" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="14.9" y="1843.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="14.9" y="1827.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.9" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="14.9" y="1811.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="17.9" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.33%)</title><rect x="15.9" y="1987.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.33%)</title><rect x="15.9" y="1971.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.9" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.33%)</title><rect x="15.9" y="1955.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$270/1324297879.accept (4 samples, 0.33%)</title><rect x="15.9" y="1939.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.9" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.33%)</title><rect x="15.9" y="1923.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="18.9" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.33%)</title><rect x="15.9" y="1907.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.9" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.33%)</title><rect x="15.9" y="1891.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (174 samples, 14.50%)</title><rect x="19.8" y="1987.0" width="171.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.8" y="1998.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$269/1441843555.accept (169 samples, 14.08%)</title><rect x="19.8" y="1971.0" width="166.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.8" y="1982.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (169 samples, 14.08%)</title><rect x="19.8" y="1955.0" width="166.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.8" y="1966.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="19.8" y="1939.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.8" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (151 samples, 12.58%)</title><rect x="20.8" y="1939.0" width="148.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.8" y="1950.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (151 samples, 12.58%)</title><rect x="20.8" y="1923.0" width="148.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.8" y="1934.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (151 samples, 12.58%)</title><rect x="20.8" y="1907.0" width="148.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.8" y="1918.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (151 samples, 12.58%)</title><rect x="20.8" y="1891.0" width="148.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.8" y="1902.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (151 samples, 12.58%)</title><rect x="20.8" y="1875.0" width="148.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.8" y="1886.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (151 samples, 12.58%)</title><rect x="20.8" y="1859.0" width="148.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.8" y="1870.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (109 samples, 9.08%)</title><rect x="20.8" y="1843.0" width="107.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="23.8" y="1854.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.83%)</title><rect x="20.8" y="1827.0" width="21.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.8" y="1838.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.83%)</title><rect x="20.8" y="1811.0" width="21.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.8" y="1822.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.92%)</title><rect x="31.6" y="1795.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (11 samples, 0.92%)</title><rect x="31.6" y="1779.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.50%)</title><rect x="42.5" y="1827.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="45.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.50%)</title><rect x="42.5" y="1811.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.25%)</title><rect x="42.5" y="1795.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.5" y="1806.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.17%)</title><rect x="43.4" y="1779.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="46.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.25%)</title><rect x="45.4" y="1795.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (81 samples, 6.75%)</title><rect x="48.4" y="1827.0" width="79.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.4" y="1838.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (81 samples, 6.75%)</title><rect x="48.4" y="1811.0" width="79.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.4" y="1822.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (80 samples, 6.67%)</title><rect x="48.4" y="1795.0" width="78.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.4" y="1806.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 6.58%)</title><rect x="48.4" y="1779.0" width="77.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.4" y="1790.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (77 samples, 6.42%)</title><rect x="50.3" y="1763.0" width="75.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.3" y="1774.0">sun/misc..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="50.3" y="1747.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="53.3" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="51.3" y="1747.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="54.3" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Unpark (65 samples, 5.42%)</title><rect x="52.3" y="1747.0" width="63.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="55.3" y="1758.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="56.2" y="1731.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="59.2" y="1742.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="57.2" y="1731.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="60.2" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 3.50%)</title><rect x="58.2" y="1731.0" width="41.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="61.2" y="1742.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.25%)</title><rect x="99.5" y="1731.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="102.5" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.17%)</title><rect x="102.4" y="1731.0" width="13.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="105.4" y="1742.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.50%)</title><rect x="116.2" y="1747.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="119.2" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.17%)</title><rect x="122.1" y="1747.0" width="2.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="125.1" y="1758.0"></text>
</g>
<g>
<title>__restore_rt (1 samples, 0.08%)</title><rect x="124.1" y="1747.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="127.1" y="1758.0"></text>
</g>
<g>
<title>signalHandler(int, siginfo*, void*) (1 samples, 0.08%)</title><rect x="124.1" y="1731.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="127.1" y="1742.0"></text>
</g>
<g>
<title>JVM_handle_linux_signal (1 samples, 0.08%)</title><rect x="124.1" y="1715.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="127.1" y="1726.0"></text>
</g>
<g>
<title>os::WatcherThreadCrashProtection::check_crash_protection(int, Thread*) (1 samples, 0.08%)</title><rect x="124.1" y="1699.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="127.1" y="1710.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="125.1" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="128.1" y="1758.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.08%)</title><rect x="126.0" y="1779.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="127.0" y="1795.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="130.0" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (40 samples, 3.33%)</title><rect x="128.0" y="1843.0" width="39.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.0" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (40 samples, 3.33%)</title><rect x="128.0" y="1827.0" width="39.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.0" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (40 samples, 3.33%)</title><rect x="128.0" y="1811.0" width="39.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="131.0" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="166.3" y="1795.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="167.3" y="1843.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="170.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="167.3" y="1827.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="167.3" y="1811.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="168.3" y="1811.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="168.3" y="1795.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 0.92%)</title><rect x="169.3" y="1939.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.3" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 0.92%)</title><rect x="169.3" y="1923.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="172.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.83%)</title><rect x="170.3" y="1907.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.83%)</title><rect x="170.3" y="1891.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="179.1" y="1875.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="182.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="179.1" y="1859.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="179.1" y="1843.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="182.1" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.33%)</title><rect x="180.1" y="1939.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.33%)</title><rect x="180.1" y="1923.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.33%)</title><rect x="180.1" y="1907.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="183.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="184.0" y="1939.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="184.0" y="1923.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="185.0" y="1907.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="185.0" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="188.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="185.0" y="1875.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="188.0" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.08%)</title><rect x="186.0" y="1971.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="189.0" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.08%)</title><rect x="186.0" y="1955.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="189.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.25%)</title><rect x="187.0" y="1971.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.25%)</title><rect x="187.0" y="1955.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="187.0" y="1939.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="190.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.25%)</title><rect x="187.0" y="1923.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="189.9" y="1971.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="192.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="189.9" y="1955.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="192.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.00%)</title><rect x="190.9" y="1987.0" width="59.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.9" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (60 samples, 5.00%)</title><rect x="190.9" y="1971.0" width="59.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="193.9" y="1982.0">org/ap..</text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.08%)</title><rect x="190.9" y="1955.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (36 samples, 3.00%)</title><rect x="191.9" y="1955.0" width="35.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="194.9" y="1966.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="191.9" y="1939.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="191.9" y="1923.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="194.9" y="1934.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="191.9" y="1907.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="194.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (35 samples, 2.92%)</title><rect x="192.9" y="1939.0" width="34.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.9" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (35 samples, 2.92%)</title><rect x="192.9" y="1923.0" width="34.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.9" y="1934.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (32 samples, 2.67%)</title><rect x="192.9" y="1907.0" width="31.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.9" y="1918.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (32 samples, 2.67%)</title><rect x="192.9" y="1891.0" width="31.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="195.9" y="1902.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.50%)</title><rect x="193.9" y="1875.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.67%)</title><rect x="200.8" y="1859.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="203.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.58%)</title><rect x="201.7" y="1843.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.58%)</title><rect x="201.7" y="1827.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.58%)</title><rect x="201.7" y="1811.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.7" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.58%)</title><rect x="201.7" y="1795.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.7" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.58%)</title><rect x="201.7" y="1779.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.7" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.50%)</title><rect x="202.7" y="1763.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.7" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (2 samples, 0.17%)</title><rect x="208.6" y="1859.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (2 samples, 0.17%)</title><rect x="208.6" y="1843.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="211.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (2 samples, 0.17%)</title><rect x="208.6" y="1827.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="211.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="210.6" y="1859.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="210.6" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="210.6" y="1827.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="213.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="210.6" y="1811.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.6" y="1822.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.08%)</title><rect x="210.6" y="1795.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.6" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (13 samples, 1.08%)</title><rect x="211.6" y="1875.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="212.6" y="1859.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (11 samples, 0.92%)</title><rect x="213.5" y="1859.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.58%)</title><rect x="213.5" y="1843.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="216.5" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.58%)</title><rect x="213.5" y="1827.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.33%)</title><rect x="220.4" y="1843.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.4" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.33%)</title><rect x="220.4" y="1827.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (2 samples, 0.17%)</title><rect x="224.4" y="1907.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="224.4" y="1891.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="224.4" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.08%)</title><rect x="224.4" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.08%)</title><rect x="224.4" y="1843.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.toString (1 samples, 0.08%)</title><rect x="224.4" y="1827.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.4" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="224.4" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="227.4" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="224.4" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="227.4" y="1806.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="224.4" y="1779.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="227.4" y="1790.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="224.4" y="1763.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="227.4" y="1774.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="224.4" y="1747.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="227.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="225.3" y="1875.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="225.3" y="1859.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="228.3" y="1870.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="225.3" y="1843.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="228.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.08%)</title><rect x="226.3" y="1907.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.58%)</title><rect x="227.3" y="1955.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.50%)</title><rect x="227.3" y="1939.0" width="5.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.33%)</title><rect x="227.3" y="1923.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.3" y="1934.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="227.3" y="1907.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$237/533175558.accept (1 samples, 0.08%)</title><rect x="227.3" y="1891.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.08%)</title><rect x="227.3" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="227.3" y="1859.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.3" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="227.3" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$239/628904132.apply (1 samples, 0.08%)</title><rect x="227.3" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="227.3" y="1811.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (3 samples, 0.25%)</title><rect x="228.3" y="1907.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (3 samples, 0.25%)</title><rect x="228.3" y="1891.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.3" y="1902.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="228.3" y="1875.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="231.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="228.3" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="228.3" y="1843.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.08%)</title><rect x="229.3" y="1875.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="230.3" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="230.3" y="1859.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="230.3" y="1843.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="230.3" y="1827.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.17%)</title><rect x="231.2" y="1923.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.17%)</title><rect x="231.2" y="1907.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="231.2" y="1891.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="231.2" y="1875.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="231.2" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="231.2" y="1843.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="234.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="231.2" y="1827.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.2" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="231.2" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.2" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="231.2" y="1795.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="231.2" y="1779.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.2" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="231.2" y="1763.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.08%)</title><rect x="231.2" y="1747.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="234.2" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.getOpFlags (1 samples, 0.08%)</title><rect x="232.2" y="1875.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.08%)</title><rect x="233.2" y="1939.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="233.2" y="1923.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.08%)</title><rect x="233.2" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="236.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="234.2" y="1955.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="237.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.08%)</title><rect x="234.2" y="1939.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.08%)</title><rect x="235.2" y="1955.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="238.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.58%)</title><rect x="236.2" y="1955.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="239.2" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.50%)</title><rect x="236.2" y="1939.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.50%)</title><rect x="236.2" y="1923.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="237.1" y="1907.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="237.1" y="1891.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.08%)</title><rect x="237.1" y="1875.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.08%)</title><rect x="237.1" y="1859.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="237.1" y="1843.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="237.1" y="1827.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.08%)</title><rect x="237.1" y="1811.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.33%)</title><rect x="238.1" y="1907.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.25%)</title><rect x="238.1" y="1891.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.17%)</title><rect x="238.1" y="1875.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.17%)</title><rect x="238.1" y="1859.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.17%)</title><rect x="238.1" y="1843.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="238.1" y="1827.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.1" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="238.1" y="1811.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="241.1" y="1822.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="238.1" y="1795.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="241.1" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="239.1" y="1795.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="1806.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.08%)</title><rect x="239.1" y="1779.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.1" y="1790.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.08%)</title><rect x="239.1" y="1763.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="242.1" y="1774.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.08%)</title><rect x="239.1" y="1747.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.1" y="1758.0"></text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.08%)</title><rect x="239.1" y="1731.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="242.1" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (1 samples, 0.08%)</title><rect x="240.1" y="1875.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="240.1" y="1859.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.1" y="1870.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.iterator (1 samples, 0.08%)</title><rect x="241.1" y="1891.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="241.1" y="1875.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.08%)</title><rect x="241.1" y="1859.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="241.1" y="1843.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="241.1" y="1827.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="242.1" y="1939.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="245.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="242.1" y="1923.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="242.1" y="1907.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="242.1" y="1891.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="242.1" y="1875.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="242.1" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.08%)</title><rect x="242.1" y="1843.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.08%)</title><rect x="242.1" y="1827.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.08%)</title><rect x="242.1" y="1811.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="245.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.08%)</title><rect x="242.1" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.validate (1 samples, 0.08%)</title><rect x="242.1" y="1779.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="245.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.08%)</title><rect x="242.1" y="1763.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.1" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.validate (1 samples, 0.08%)</title><rect x="242.1" y="1747.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.1" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.validate (1 samples, 0.08%)</title><rect x="242.1" y="1731.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.1" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.25%)</title><rect x="243.0" y="1955.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.25%)</title><rect x="243.0" y="1939.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="243.0" y="1923.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="246.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$261/693578739.accept (1 samples, 0.08%)</title><rect x="243.0" y="1907.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="243.0" y="1891.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="243.0" y="1875.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="243.0" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="243.0" y="1843.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="243.0" y="1827.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="244.0" y="1923.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.0" y="1934.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="244.0" y="1907.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="247.0" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.08%)</title><rect x="244.0" y="1891.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.0" y="1902.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="244.0" y="1875.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="247.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="245.0" y="1923.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.0" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="245.0" y="1907.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.0" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="245.0" y="1891.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.0" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.08%)</title><rect x="245.0" y="1875.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="246.0" y="1955.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.0" y="1939.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="246.0" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (3 samples, 0.25%)</title><rect x="247.0" y="1955.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.25%)</title><rect x="247.0" y="1939.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.25%)</title><rect x="247.0" y="1923.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="248.0" y="1907.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="248.9" y="1891.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.9" y="1902.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="248.9" y="1875.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="251.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/Thread.run (711 samples, 59.25%)</title><rect x="249.9" y="2035.0" width="699.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="252.9" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (711 samples, 59.25%)</title><rect x="249.9" y="2019.0" width="699.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.9" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (711 samples, 59.25%)</title><rect x="249.9" y="2003.0" width="699.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.9" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$289/1890901998.run (466 samples, 38.83%)</title><rect x="252.9" y="1987.0" width="458.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.9" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$62 (465 samples, 38.75%)</title><rect x="253.9" y="1971.0" width="457.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.9" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (465 samples, 38.75%)</title><rect x="253.9" y="1955.0" width="457.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.9" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (464 samples, 38.67%)</title><rect x="253.9" y="1939.0" width="456.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="258.8" y="1923.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="261.8" y="1934.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.08%)</title><rect x="259.8" y="1923.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.8" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.00%)</title><rect x="260.8" y="1923.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.8" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.00%)</title><rect x="260.8" y="1907.0" width="11.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.8" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.00%)</title><rect x="260.8" y="1891.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="260.8" y="1875.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 0.92%)</title><rect x="261.7" y="1875.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.7" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="266.7" y="1859.0" width="5.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="269.7" y="1870.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.42%)</title><rect x="267.6" y="1843.0" width="5.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="270.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (35 samples, 2.92%)</title><rect x="272.6" y="1923.0" width="34.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.6" y="1934.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (35 samples, 2.92%)</title><rect x="272.6" y="1907.0" width="34.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.6" y="1918.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (35 samples, 2.92%)</title><rect x="272.6" y="1891.0" width="34.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="275.6" y="1902.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="284.4" y="1875.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="287.4" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 1.83%)</title><rect x="285.3" y="1875.0" width="21.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.3" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.25%)</title><rect x="285.3" y="1859.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="288.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.25%)</title><rect x="285.3" y="1843.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.25%)</title><rect x="285.3" y="1827.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/267947222.accept (2 samples, 0.17%)</title><rect x="286.3" y="1811.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 1.58%)</title><rect x="288.3" y="1859.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/267947222.accept (18 samples, 1.50%)</title><rect x="289.3" y="1843.0" width="17.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (18 samples, 1.50%)</title><rect x="289.3" y="1827.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (18 samples, 1.50%)</title><rect x="289.3" y="1811.0" width="17.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.3" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (18 samples, 1.50%)</title><rect x="289.3" y="1795.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.3" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$287/2016366364.accept (2 samples, 0.17%)</title><rect x="290.3" y="1779.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.3" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="292.2" y="1779.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="295.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (14 samples, 1.17%)</title><rect x="293.2" y="1779.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.42%)</title><rect x="293.2" y="1763.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.42%)</title><rect x="293.2" y="1747.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.2" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.75%)</title><rect x="298.1" y="1763.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.1" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (121 samples, 10.08%)</title><rect x="307.0" y="1923.0" width="119.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$45/524241174.extract (121 samples, 10.08%)</title><rect x="307.0" y="1907.0" width="119.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.0" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (121 samples, 10.08%)</title><rect x="307.0" y="1891.0" width="119.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="310.0" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 10.08%)</title><rect x="307.0" y="1875.0" width="119.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 10.08%)</title><rect x="307.0" y="1859.0" width="119.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.0" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (121 samples, 10.08%)</title><rect x="307.0" y="1843.0" width="119.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.0" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (40 samples, 3.33%)</title><rect x="307.0" y="1827.0" width="39.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="310.0" y="1838.0">com..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.75%)</title><rect x="316.8" y="1811.0" width="8.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="319.8" y="1822.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="319.8" y="1795.0" width="5.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="322.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.33%)</title><rect x="325.7" y="1811.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="328.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.25%)</title><rect x="325.7" y="1795.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.25%)</title><rect x="325.7" y="1779.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.25%)</title><rect x="325.7" y="1763.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.25%)</title><rect x="325.7" y="1747.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.7" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.25%)</title><rect x="325.7" y="1731.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.7" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.25%)</title><rect x="325.7" y="1715.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="328.6" y="1795.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.42%)</title><rect x="329.6" y="1811.0" width="16.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (16 samples, 1.33%)</title><rect x="329.6" y="1795.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.6" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="332.5" y="1779.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="335.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.42%)</title><rect x="333.5" y="1779.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.42%)</title><rect x="333.5" y="1763.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 0.58%)</title><rect x="338.4" y="1779.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 0.58%)</title><rect x="338.4" y="1763.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="338.4" y="1747.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="341.4" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="338.4" y="1731.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="341.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (6 samples, 0.50%)</title><rect x="339.4" y="1747.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="342.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="345.3" y="1795.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (77 samples, 6.42%)</title><rect x="346.3" y="1827.0" width="75.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.3" y="1838.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.33%)</title><rect x="348.3" y="1811.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (4 samples, 0.33%)</title><rect x="348.3" y="1795.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="351.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (4 samples, 0.33%)</title><rect x="348.3" y="1779.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="352.2" y="1811.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="352.2" y="1795.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="352.2" y="1779.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (2 samples, 0.17%)</title><rect x="353.2" y="1811.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.33%)</title><rect x="355.1" y="1811.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="355.1" y="1795.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="358.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.42%)</title><rect x="359.1" y="1811.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.1" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.33%)</title><rect x="360.1" y="1795.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="363.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.25%)</title><rect x="360.1" y="1779.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.17%)</title><rect x="361.1" y="1763.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="364.1" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="361.1" y="1747.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="364.1" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="361.1" y="1731.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="364.1" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="361.1" y="1715.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="364.1" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="361.1" y="1699.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="364.1" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="361.1" y="1683.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="364.1" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="361.1" y="1667.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="364.1" y="1678.0"></text>
</g>
<g>
<title>VMThread::execute(VM_Operation*) (1 samples, 0.08%)</title><rect x="361.1" y="1651.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="364.1" y="1662.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit_prologue() (1 samples, 0.08%)</title><rect x="361.1" y="1635.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="364.1" y="1646.0"></text>
</g>
<g>
<title>VM_GC_Operation::doit_prologue() (1 samples, 0.08%)</title><rect x="361.1" y="1619.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="364.1" y="1630.0"></text>
</g>
<g>
<title>InstanceRefKlass::acquire_pending_list_lock(BasicLock*) (1 samples, 0.08%)</title><rect x="361.1" y="1603.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="364.1" y="1614.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::pending_list_lock() (1 samples, 0.08%)</title><rect x="361.1" y="1587.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="364.1" y="1598.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="362.0" y="1747.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="363.0" y="1779.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="366.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="363.0" y="1763.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.25%)</title><rect x="364.0" y="1811.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.25%)</title><rect x="364.0" y="1795.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="367.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.08%)</title><rect x="366.9" y="1811.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.9" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (54 samples, 4.50%)</title><rect x="367.9" y="1811.0" width="53.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.9" y="1822.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.17%)</title><rect x="367.9" y="1795.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.9" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (52 samples, 4.33%)</title><rect x="369.9" y="1795.0" width="51.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.9" y="1806.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.25%)</title><rect x="369.9" y="1779.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.33%)</title><rect x="369.9" y="1763.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="372.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.33%)</title><rect x="369.9" y="1747.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="372.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.33%)</title><rect x="369.9" y="1731.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="372.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.83%)</title><rect x="373.8" y="1763.0" width="9.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="376.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="383.7" y="1763.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="383.7" y="1747.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (37 samples, 3.08%)</title><rect x="384.6" y="1779.0" width="36.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="387.6" y="1790.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (37 samples, 3.08%)</title><rect x="384.6" y="1763.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.6" y="1774.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="384.6" y="1747.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (36 samples, 3.00%)</title><rect x="385.6" y="1747.0" width="35.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="388.6" y="1758.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (20 samples, 1.67%)</title><rect x="390.6" y="1731.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.33%)</title><rect x="390.6" y="1715.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.6" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.25%)</title><rect x="394.5" y="1715.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.75%)</title><rect x="397.4" y="1715.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="400.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.75%)</title><rect x="397.4" y="1699.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="400.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.75%)</title><rect x="397.4" y="1683.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="400.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.50%)</title><rect x="400.4" y="1667.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (5 samples, 0.42%)</title><rect x="401.4" y="1651.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="404.4" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.08%)</title><rect x="405.3" y="1635.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="408.3" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.08%)</title><rect x="405.3" y="1619.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.3" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.17%)</title><rect x="406.3" y="1715.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="409.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="408.2" y="1715.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.17%)</title><rect x="410.2" y="1731.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="413.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="411.2" y="1715.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.08%)</title><rect x="411.2" y="1699.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="414.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.08%)</title><rect x="411.2" y="1683.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="414.2" y="1694.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="411.2" y="1667.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="412.2" y="1731.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.50%)</title><rect x="413.2" y="1731.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.50%)</title><rect x="413.2" y="1715.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.50%)</title><rect x="413.2" y="1699.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.50%)</title><rect x="413.2" y="1683.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.2" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.50%)</title><rect x="413.2" y="1667.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.2" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.42%)</title><rect x="414.2" y="1651.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.2" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.08%)</title><rect x="418.1" y="1635.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="421.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.17%)</title><rect x="419.1" y="1731.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.1" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="419.1" y="1715.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="422.1" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="419.1" y="1699.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.08%)</title><rect x="421.0" y="1811.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="424.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.33%)</title><rect x="422.0" y="1827.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.0" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.33%)</title><rect x="422.0" y="1811.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="425.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.33%)</title><rect x="422.0" y="1795.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="425.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (4 samples, 0.33%)</title><rect x="422.0" y="1779.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.0" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.33%)</title><rect x="422.0" y="1763.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (280 samples, 23.33%)</title><rect x="426.0" y="1923.0" width="275.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.0" y="1934.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (39 samples, 3.25%)</title><rect x="438.7" y="1907.0" width="38.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="441.7" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (39 samples, 3.25%)</title><rect x="438.7" y="1891.0" width="38.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="441.7" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (34 samples, 2.83%)</title><rect x="443.7" y="1875.0" width="33.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.7" y="1886.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.75%)</title><rect x="446.6" y="1859.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="449.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.75%)</title><rect x="446.6" y="1843.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="449.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (9 samples, 0.75%)</title><rect x="446.6" y="1827.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.75%)</title><rect x="446.6" y="1811.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (9 samples, 0.75%)</title><rect x="446.6" y="1795.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.6" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (22 samples, 1.83%)</title><rect x="455.5" y="1859.0" width="21.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="458.5" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (17 samples, 1.42%)</title><rect x="460.4" y="1843.0" width="16.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.4" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.83%)</title><rect x="461.4" y="1827.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="464.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (10 samples, 0.83%)</title><rect x="461.4" y="1811.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.50%)</title><rect x="471.2" y="1827.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="474.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.50%)</title><rect x="477.1" y="1907.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="480.1" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.50%)</title><rect x="477.1" y="1891.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="480.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (119 samples, 9.92%)</title><rect x="483.0" y="1907.0" width="117.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="486.0" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (113 samples, 9.42%)</title><rect x="483.0" y="1891.0" width="111.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.0" y="1902.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (21 samples, 1.75%)</title><rect x="492.8" y="1875.0" width="20.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (13 samples, 1.08%)</title><rect x="498.7" y="1859.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 1.00%)</title><rect x="499.7" y="1843.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (10 samples, 0.83%)</title><rect x="499.7" y="1827.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (10 samples, 0.83%)</title><rect x="499.7" y="1811.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 0.83%)</title><rect x="499.7" y="1795.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.7" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="499.7" y="1779.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="502.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.75%)</title><rect x="500.7" y="1779.0" width="8.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="503.7" y="1790.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="500.7" y="1763.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="503.7" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="501.7" y="1763.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="504.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.33%)</title><rect x="502.7" y="1763.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="505.7" y="1774.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="502.7" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="505.7" y="1758.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.08%)</title><rect x="503.6" y="1747.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="506.6" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="503.6" y="1731.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="506.6" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="504.6" y="1747.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="505.6" y="1747.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="508.6" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="505.6" y="1731.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="508.6" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="505.6" y="1715.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="508.6" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.25%)</title><rect x="506.6" y="1763.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.6" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.17%)</title><rect x="506.6" y="1747.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="509.6" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.17%)</title><rect x="506.6" y="1731.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="509.6" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.17%)</title><rect x="506.6" y="1715.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="509.6" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="506.6" y="1699.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="509.6" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="506.6" y="1683.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="509.6" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="506.6" y="1667.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="509.6" y="1678.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="506.6" y="1651.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="509.6" y="1662.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="506.6" y="1635.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.6" y="1646.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.08%)</title><rect x="507.6" y="1699.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="510.6" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="508.6" y="1747.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="511.6" y="1758.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.17%)</title><rect x="509.5" y="1827.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.5" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.17%)</title><rect x="511.5" y="1859.0" width="2.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="514.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (12 samples, 1.00%)</title><rect x="513.5" y="1875.0" width="11.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.08%)</title><rect x="513.5" y="1859.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="516.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.08%)</title><rect x="513.5" y="1843.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (11 samples, 0.92%)</title><rect x="514.5" y="1859.0" width="10.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="517.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (11 samples, 0.92%)</title><rect x="514.5" y="1843.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.5" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="525.3" y="1875.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="528.3" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (69 samples, 5.75%)</title><rect x="526.2" y="1875.0" width="67.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.2" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (67 samples, 5.58%)</title><rect x="528.2" y="1859.0" width="65.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.2" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 1.58%)</title><rect x="539.0" y="1843.0" width="18.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="542.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (19 samples, 1.58%)</title><rect x="539.0" y="1827.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="542.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (19 samples, 1.58%)</title><rect x="539.0" y="1811.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (19 samples, 1.58%)</title><rect x="539.0" y="1795.0" width="18.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="542.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (19 samples, 1.58%)</title><rect x="539.0" y="1779.0" width="18.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.0" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (37 samples, 3.08%)</title><rect x="557.7" y="1843.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="560.7" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (31 samples, 2.58%)</title><rect x="563.6" y="1827.0" width="30.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="566.6" y="1838.0">ja..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.08%)</title><rect x="566.6" y="1811.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="569.6" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.42%)</title><rect x="567.6" y="1811.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.42%)</title><rect x="567.6" y="1795.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="570.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (22 samples, 1.83%)</title><rect x="572.5" y="1811.0" width="21.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.5" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.08%)</title><rect x="578.4" y="1795.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="581.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="590.2" y="1779.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="593.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="590.2" y="1763.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="593.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="590.2" y="1747.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="593.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="590.2" y="1731.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="593.2" y="1742.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.08%)</title><rect x="590.2" y="1715.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="593.2" y="1726.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.25%)</title><rect x="591.1" y="1795.0" width="2.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="594.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.50%)</title><rect x="594.1" y="1891.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.1" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.50%)</title><rect x="594.1" y="1875.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.1" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.50%)</title><rect x="594.1" y="1859.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="597.1" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.50%)</title><rect x="594.1" y="1843.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="597.1" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.25%)</title><rect x="596.1" y="1827.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="599.1" y="1838.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.25%)</title><rect x="596.1" y="1811.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="599.1" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="599.0" y="1827.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="602.0" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (71 samples, 5.92%)</title><rect x="600.0" y="1907.0" width="69.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.0" y="1918.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (70 samples, 5.83%)</title><rect x="601.0" y="1891.0" width="68.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="604.0" y="1902.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$210/1038870843.process (28 samples, 2.33%)</title><rect x="601.0" y="1875.0" width="27.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.0" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (28 samples, 2.33%)</title><rect x="601.0" y="1859.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="604.0" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 1.92%)</title><rect x="602.0" y="1843.0" width="22.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="605.0" y="1854.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="603.0" y="1827.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="606.0" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.08%)</title><rect x="603.0" y="1811.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="606.0" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.08%)</title><rect x="603.0" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.0" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.08%)</title><rect x="603.0" y="1779.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="606.0" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (8 samples, 0.67%)</title><rect x="603.9" y="1827.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="606.9" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.50%)</title><rect x="605.9" y="1811.0" width="5.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="608.9" y="1822.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.42%)</title><rect x="606.9" y="1795.0" width="4.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="609.9" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.08%)</title><rect x="611.8" y="1827.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="623.6" y="1811.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="623.6" y="1795.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="626.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.33%)</title><rect x="624.6" y="1843.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="627.6" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.33%)</title><rect x="624.6" y="1827.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="627.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 0.33%)</title><rect x="624.6" y="1811.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="627.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.33%)</title><rect x="624.6" y="1795.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="627.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (4 samples, 0.33%)</title><rect x="624.6" y="1779.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="627.6" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (2 samples, 0.17%)</title><rect x="628.5" y="1875.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="631.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (10 samples, 0.83%)</title><rect x="630.5" y="1875.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.5" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (10 samples, 0.83%)</title><rect x="630.5" y="1859.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.5" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 0.75%)</title><rect x="631.5" y="1843.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="634.5" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 0.75%)</title><rect x="631.5" y="1827.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.5" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.75%)</title><rect x="631.5" y="1811.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="634.5" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.75%)</title><rect x="631.5" y="1795.0" width="8.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.5" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 0.75%)</title><rect x="631.5" y="1779.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.5" y="1790.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.33%)</title><rect x="640.3" y="1875.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="643.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.33%)</title><rect x="640.3" y="1859.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.3" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="642.3" y="1843.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="645.3" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="642.3" y="1827.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="645.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="643.3" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="646.3" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="643.3" y="1811.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="646.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="643.3" y="1795.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="646.3" y="1806.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="643.3" y="1779.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="646.3" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="643.3" y="1763.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="646.3" y="1774.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="643.3" y="1747.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.3" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="643.3" y="1731.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="646.3" y="1742.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.08%)</title><rect x="644.3" y="1875.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="644.3" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/574557462.get$Lambda (1 samples, 0.08%)</title><rect x="644.3" y="1843.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="647.3" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="644.3" y="1827.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="647.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="644.3" y="1811.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="647.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="644.3" y="1795.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="647.3" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="644.3" y="1779.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="647.3" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="644.3" y="1763.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="647.3" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="644.3" y="1747.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="647.3" y="1758.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="644.3" y="1731.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="647.3" y="1742.0"></text>
</g>
<g>
<title>SurvRateGroup::next_age_index() (1 samples, 0.08%)</title><rect x="644.3" y="1715.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="647.3" y="1726.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="645.2" y="1875.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="645.2" y="1859.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.2" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.58%)</title><rect x="646.2" y="1875.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="649.2" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.42%)</title><rect x="648.2" y="1859.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="651.2" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="649.2" y="1843.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="652.2" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.25%)</title><rect x="650.2" y="1843.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="653.2" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.17%)</title><rect x="653.1" y="1875.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="656.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.08%)</title><rect x="654.1" y="1859.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="657.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.25%)</title><rect x="655.1" y="1875.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="658.1" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.25%)</title><rect x="655.1" y="1859.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 0.25%)</title><rect x="655.1" y="1843.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.1" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.00%)</title><rect x="658.0" y="1843.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="661.0" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="658.0" y="1827.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="661.0" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="658.0" y="1811.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="661.0" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="658.0" y="1795.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="661.0" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="658.0" y="1779.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="661.0" y="1790.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="658.0" y="1763.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="661.0" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 0.75%)</title><rect x="659.0" y="1827.0" width="8.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.75%)</title><rect x="659.0" y="1811.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.0" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 0.75%)</title><rect x="659.0" y="1795.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.0" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/574557462.accept (7 samples, 0.58%)</title><rect x="660.0" y="1779.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.0" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="666.9" y="1779.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="669.9" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="667.9" y="1827.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="670.9" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.00%)</title><rect x="669.8" y="1907.0" width="23.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="672.8" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.00%)</title><rect x="669.8" y="1891.0" width="23.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="672.8" y="1902.0">j..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.58%)</title><rect x="671.8" y="1875.0" width="6.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="674.8" y="1886.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.58%)</title><rect x="671.8" y="1859.0" width="6.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="674.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.08%)</title><rect x="678.7" y="1875.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="681.7" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.42%)</title><rect x="678.7" y="1859.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="681.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.42%)</title><rect x="678.7" y="1843.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.42%)</title><rect x="678.7" y="1827.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/333156709.accept (3 samples, 0.25%)</title><rect x="679.7" y="1811.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.7" y="1822.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="682.6" y="1811.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="685.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.67%)</title><rect x="683.6" y="1859.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/333156709.accept (8 samples, 0.67%)</title><rect x="683.6" y="1843.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$57 (8 samples, 0.67%)</title><rect x="683.6" y="1827.0" width="7.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="686.6" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (8 samples, 0.67%)</title><rect x="683.6" y="1811.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="686.6" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.67%)</title><rect x="683.6" y="1795.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="686.6" y="1806.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.67%)</title><rect x="683.6" y="1779.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="686.6" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.50%)</title><rect x="685.6" y="1763.0" width="5.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="688.6" y="1774.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.50%)</title><rect x="685.6" y="1747.0" width="5.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="688.6" y="1758.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.08%)</title><rect x="691.5" y="1875.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.5" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="692.4" y="1875.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="695.4" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (8 samples, 0.67%)</title><rect x="693.4" y="1907.0" width="7.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="696.4" y="1918.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.75%)</title><rect x="701.3" y="1923.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="704.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.75%)</title><rect x="701.3" y="1907.0" width="8.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="704.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="710.1" y="1939.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.1" y="1950.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="710.1" y="1923.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="713.1" y="1934.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.08%)</title><rect x="710.1" y="1907.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="713.1" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="710.1" y="1891.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="713.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="711.1" y="1987.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="714.1" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="711.1" y="1971.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="714.1" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="711.1" y="1955.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="711.1" y="1939.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="714.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (240 samples, 20.00%)</title><rect x="713.1" y="1987.0" width="236.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="716.1" y="1998.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (240 samples, 20.00%)</title><rect x="713.1" y="1971.0" width="236.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="716.1" y="1982.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (215 samples, 17.92%)</title><rect x="716.0" y="1955.0" width="211.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.0" y="1966.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (29 samples, 2.42%)</title><rect x="731.8" y="1939.0" width="28.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="734.8" y="1950.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.08%)</title><rect x="760.3" y="1939.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="763.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="760.3" y="1923.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="760.3" y="1907.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="760.3" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="763.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="760.3" y="1875.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="763.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.33%)</title><rect x="761.3" y="1939.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="764.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.33%)</title><rect x="761.3" y="1923.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="764.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (165 samples, 13.75%)</title><rect x="765.2" y="1939.0" width="162.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.2" y="1950.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (164 samples, 13.67%)</title><rect x="766.2" y="1923.0" width="161.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="769.2" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="773.1" y="1907.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="776.1" y="1918.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.17%)</title><rect x="774.0" y="1907.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="777.0" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="776.0" y="1907.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.0" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="777.0" y="1907.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="780.0" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 12.33%)</title><rect x="778.0" y="1907.0" width="145.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="781.0" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.17%)</title><rect x="783.9" y="1891.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="786.9" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.25%)</title><rect x="785.9" y="1891.0" width="26.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="788.9" y="1902.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.50%)</title><rect x="793.7" y="1875.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="796.7" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="796.7" y="1859.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="799.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="797.7" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="800.7" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="798.6" y="1859.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="801.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="799.6" y="1875.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="802.6" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.75%)</title><rect x="801.6" y="1875.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="804.6" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="810.4" y="1875.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="813.4" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="812.4" y="1891.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="815.4" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.50%)</title><rect x="813.4" y="1891.0" width="5.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="816.4" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (34 samples, 2.83%)</title><rect x="819.3" y="1891.0" width="33.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="822.3" y="1902.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (58 samples, 4.83%)</title><rect x="852.7" y="1891.0" width="57.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="855.7" y="1902.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.17%)</title><rect x="909.7" y="1891.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="912.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.17%)</title><rect x="911.7" y="1891.0" width="2.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="914.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.25%)</title><rect x="913.7" y="1891.0" width="2.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="916.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.17%)</title><rect x="916.6" y="1891.0" width="2.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="919.6" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="918.6" y="1891.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.6" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="919.6" y="1891.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.6" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.25%)</title><rect x="920.6" y="1891.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="923.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.25%)</title><rect x="923.5" y="1907.0" width="3.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="926.5" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.08%)</title><rect x="926.5" y="1907.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="929.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 1.83%)</title><rect x="927.4" y="1955.0" width="21.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="930.4" y="1966.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 1.83%)</title><rect x="927.4" y="1939.0" width="21.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="930.4" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 1.83%)</title><rect x="927.4" y="1923.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="930.4" y="1934.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 1.83%)</title><rect x="927.4" y="1907.0" width="21.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="930.4" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="948.1" y="1891.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="951.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="949.1" y="2035.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="952.1" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.08%)</title><rect x="949.1" y="2019.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="952.1" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.08%)</title><rect x="949.1" y="2003.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="952.1" y="2014.0"></text>
</g>
<g>
<title>start_thread (244 samples, 20.33%)</title><rect x="950.1" y="2035.0" width="239.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="953.1" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (244 samples, 20.33%)</title><rect x="950.1" y="2019.0" width="239.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="953.1" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.92%)</title><rect x="950.1" y="2003.0" width="22.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="953.1" y="2014.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.50%)</title><rect x="950.1" y="1987.0" width="5.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="953.1" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.50%)</title><rect x="950.1" y="1971.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.1" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.25%)</title><rect x="950.1" y="1955.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="953.1" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.25%)</title><rect x="953.0" y="1955.0" width="3.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="956.0" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.42%)</title><rect x="956.0" y="1987.0" width="16.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.0" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.25%)</title><rect x="956.0" y="1971.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.0" y="1982.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="956.0" y="1955.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.0" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="956.9" y="1955.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="959.9" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="957.9" y="1955.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="960.9" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.50%)</title><rect x="958.9" y="1971.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.9" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.17%)</title><rect x="958.9" y="1955.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.9" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="958.9" y="1939.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.9" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="958.9" y="1923.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.9" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="958.9" y="1907.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.9" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="959.9" y="1939.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.9" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="959.9" y="1923.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="962.9" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.33%)</title><rect x="960.9" y="1955.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.9" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.33%)</title><rect x="960.9" y="1939.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.9" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.67%)</title><rect x="964.8" y="1971.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.8" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.67%)</title><rect x="964.8" y="1955.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.8" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.67%)</title><rect x="964.8" y="1939.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="967.8" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.67%)</title><rect x="964.8" y="1923.0" width="7.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.8" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.67%)</title><rect x="964.8" y="1907.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.8" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.67%)</title><rect x="964.8" y="1891.0" width="7.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.8" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.50%)</title><rect x="966.8" y="1875.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="969.8" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (4 samples, 0.33%)</title><rect x="967.8" y="1859.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="970.8" y="1870.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.08%)</title><rect x="969.7" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="972.7" y="1854.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="970.7" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="973.7" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="971.7" y="1859.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.7" y="1870.0"></text>
</g>
<g>
<title>JavaThread::run() (218 samples, 18.17%)</title><rect x="972.7" y="2003.0" width="214.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="975.7" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (218 samples, 18.17%)</title><rect x="972.7" y="1987.0" width="214.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.7" y="1998.0">JavaThread::thread_main_inne..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (218 samples, 18.17%)</title><rect x="972.7" y="1971.0" width="214.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.7" y="1982.0">CompileBroker::compiler_thre..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (218 samples, 18.17%)</title><rect x="972.7" y="1955.0" width="214.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.7" y="1966.0">CompileBroker::invoke_compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (217 samples, 18.08%)</title><rect x="972.7" y="1939.0" width="213.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.7" y="1950.0">C2Compiler::compile_method(c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (217 samples, 18.08%)</title><rect x="972.7" y="1923.0" width="213.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="975.7" y="1934.0">Compile::Compile(ciEnv*, C2C..</text>
</g>
<g>
<title>Compile::Code_Gen() (61 samples, 5.08%)</title><rect x="972.7" y="1907.0" width="60.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.7" y="1918.0">Compil..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.08%)</title><rect x="972.7" y="1891.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="975.7" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="972.7" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="975.7" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.25%)</title><rect x="973.7" y="1891.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="976.7" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.17%)</title><rect x="973.7" y="1875.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="976.7" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="973.7" y="1859.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.7" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="973.7" y="1843.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="976.7" y="1854.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.08%)</title><rect x="975.6" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.6" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.58%)</title><rect x="976.6" y="1891.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.6" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.58%)</title><rect x="976.6" y="1875.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.6" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.17%)</title><rect x="980.5" y="1859.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="983.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.08%)</title><rect x="982.5" y="1859.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="982.5" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="985.5" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="982.5" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.5" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.08%)</title><rect x="982.5" y="1811.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="985.5" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.08%)</title><rect x="982.5" y="1795.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.5" y="1806.0"></text>
</g>
<g>
<title>andL_rReg_mem_0Node::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.08%)</title><rect x="982.5" y="1779.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.5" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.25%)</title><rect x="983.5" y="1891.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.08%)</title><rect x="983.5" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.08%)</title><rect x="983.5" y="1859.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="986.5" y="1870.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.08%)</title><rect x="983.5" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.5" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.17%)</title><rect x="984.5" y="1875.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.5" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.17%)</title><rect x="984.5" y="1859.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="987.5" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.08%)</title><rect x="985.5" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="988.5" y="1854.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="985.5" y="1827.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.5" y="1838.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 3.92%)</title><rect x="986.5" y="1891.0" width="46.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.5" y="1902.0">Phas..</text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.08%)</title><rect x="986.5" y="1875.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.5" y="1886.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="987.4" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.4" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.17%)</title><rect x="988.4" y="1875.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.25%)</title><rect x="990.4" y="1875.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.4" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="991.4" y="1859.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="994.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.08%)</title><rect x="992.4" y="1859.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="992.4" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.33%)</title><rect x="993.3" y="1875.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="996.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="993.3" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.25%)</title><rect x="994.3" y="1859.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="997.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="995.3" y="1843.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="998.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.83%)</title><rect x="997.3" y="1875.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.3" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.83%)</title><rect x="1007.1" y="1875.0" width="9.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1010.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1008.1" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.1" y="1870.0"></text>
</g>
<g>
<title>MachIdealNode::rule() const (1 samples, 0.08%)</title><rect x="1009.1" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.50%)</title><rect x="1010.1" y="1859.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1013.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1015.0" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1018.0" y="1854.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1016.0" y="1859.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1019.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1016.9" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.9" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1016.9" y="1859.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1019.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1017.9" y="1875.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1020.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.08%)</title><rect x="1017.9" y="1859.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.25%)</title><rect x="1018.9" y="1875.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.9" y="1886.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1019.9" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1022.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1020.9" y="1859.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.17%)</title><rect x="1021.9" y="1875.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.9" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.17%)</title><rect x="1021.9" y="1859.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1024.9" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.17%)</title><rect x="1021.9" y="1843.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.9" y="1854.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.08%)</title><rect x="1022.8" y="1827.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1023.8" y="1875.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1023.8" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="1024.8" y="1875.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1027.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1025.8" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.8" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.42%)</title><rect x="1026.8" y="1875.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1029.8" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1030.7" y="1859.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1033.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1030.7" y="1843.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1033.7" y="1854.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.08%)</title><rect x="1031.7" y="1875.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1034.7" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (145 samples, 12.08%)</title><rect x="1032.7" y="1907.0" width="142.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1035.7" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.17%)</title><rect x="1032.7" y="1891.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.7" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.17%)</title><rect x="1032.7" y="1875.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.7" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1032.7" y="1859.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1035.7" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1032.7" y="1843.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1035.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1032.7" y="1827.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1035.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1032.7" y="1811.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1035.7" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1032.7" y="1795.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1035.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1811.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.6" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1795.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.6" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1779.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.6" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1747.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.6" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1731.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.6" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1715.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.6" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1699.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1683.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1667.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.6" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1651.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1635.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1603.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.6" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1587.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1571.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1555.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1539.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.6" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1523.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.6" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1507.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.6" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1475.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.6" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1459.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.6" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1443.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.6" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1427.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1411.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.6" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1395.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1379.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1363.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.6" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1347.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1331.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1299.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1283.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1267.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1036.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1251.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.6" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1235.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1219.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.6" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.6" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1187.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.6" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1107.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1036.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1043.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1027.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="1011.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="995.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="963.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="947.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="931.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="915.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="899.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1036.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="819.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="771.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="755.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1036.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="675.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1036.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1036.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="627.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1033.6" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.6" y="622.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1034.6" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1037.6" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1034.6" y="1875.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1037.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (122 samples, 10.17%)</title><rect x="1035.6" y="1891.0" width="120.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.6" y="1902.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.6" y="1875.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1038.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.6" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.6" y="1843.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.6" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.6" y="1827.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.6" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.6" y="1811.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1038.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1035.6" y="1795.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.6" y="1806.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1035.6" y="1779.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.6" y="1790.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1035.6" y="1763.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1038.6" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1036.6" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.6" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1036.6" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1039.6" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1036.6" y="1843.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1039.6" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1036.6" y="1827.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.6" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1036.6" y="1811.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.6" y="1822.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.08%)</title><rect x="1036.6" y="1795.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.6" y="1806.0"></text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.17%)</title><rect x="1037.6" y="1875.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.25%)</title><rect x="1039.5" y="1875.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.5" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.08%)</title><rect x="1041.5" y="1859.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.50%)</title><rect x="1042.5" y="1875.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1046.4" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1046.4" y="1843.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.4" y="1854.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.08%)</title><rect x="1047.4" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (100 samples, 8.33%)</title><rect x="1048.4" y="1875.0" width="98.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1051.4" y="1886.0">PhaseIdealLo..</text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.08%)</title><rect x="1053.3" y="1859.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (94 samples, 7.83%)</title><rect x="1054.3" y="1859.0" width="92.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.3" y="1870.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.25%)</title><rect x="1056.3" y="1843.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (89 samples, 7.42%)</title><rect x="1059.2" y="1843.0" width="87.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.2" y="1854.0">PhaseIdeal..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (2 samples, 0.17%)</title><rect x="1125.1" y="1827.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.1" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.17%)</title><rect x="1125.1" y="1811.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1128.1" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (19 samples, 1.58%)</title><rect x="1127.1" y="1827.0" width="18.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1145.8" y="1827.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1146.7" y="1875.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1146.7" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.08%)</title><rect x="1147.7" y="1875.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1147.7" y="1859.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.08%)</title><rect x="1147.7" y="1843.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1854.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.08%)</title><rect x="1147.7" y="1827.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="1838.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.08%)</title><rect x="1147.7" y="1811.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.25%)</title><rect x="1148.7" y="1875.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.33%)</title><rect x="1151.7" y="1875.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.33%)</title><rect x="1151.7" y="1859.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.7" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1151.7" y="1843.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.7" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1151.7" y="1827.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.7" y="1838.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.08%)</title><rect x="1152.6" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.6" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1153.6" y="1843.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="1854.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1153.6" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="1838.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.08%)</title><rect x="1154.6" y="1843.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (16 samples, 1.33%)</title><rect x="1155.6" y="1891.0" width="15.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1155.6" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.6" y="1886.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.08%)</title><rect x="1155.6" y="1859.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (15 samples, 1.25%)</title><rect x="1156.6" y="1875.0" width="14.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.6" y="1886.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.5" y="1859.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1157.5" y="1843.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.5" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1158.5" y="1859.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (2 samples, 0.17%)</title><rect x="1158.5" y="1843.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.5" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1158.5" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.5" y="1838.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1159.5" y="1827.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.5" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1159.5" y="1811.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.5" y="1822.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1160.5" y="1859.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.5" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1160.5" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.5" y="1854.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.08%)</title><rect x="1160.5" y="1827.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.5" y="1838.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1161.5" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="1870.0"></text>
</g>
<g>
<title>MemBarCPUOrderNode::Opcode() const (1 samples, 0.08%)</title><rect x="1161.5" y="1843.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.5" y="1854.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1162.5" y="1859.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.17%)</title><rect x="1163.5" y="1859.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.17%)</title><rect x="1163.5" y="1843.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.5" y="1854.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.08%)</title><rect x="1163.5" y="1827.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.5" y="1838.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.08%)</title><rect x="1164.4" y="1827.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1165.4" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.4" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1166.4" y="1859.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.4" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1168.4" y="1859.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.4" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.17%)</title><rect x="1168.4" y="1843.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.4" y="1854.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1170.3" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.3" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.08%)</title><rect x="1170.3" y="1843.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.3" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.3" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1811.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1795.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.3" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1779.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1763.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.3" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1747.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.3" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1731.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="1742.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1170.3" y="1715.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="1726.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1170.3" y="1699.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1171.3" y="1891.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1171.3" y="1875.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1171.3" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.08%)</title><rect x="1171.3" y="1843.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.08%)</title><rect x="1171.3" y="1827.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.3" y="1838.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.08%)</title><rect x="1171.3" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="1822.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.08%)</title><rect x="1171.3" y="1795.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1172.3" y="1891.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1172.3" y="1875.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1172.3" y="1859.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1172.3" y="1843.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.3" y="1843.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.3" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1173.3" y="1827.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.3" y="1838.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1174.3" y="1891.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1177.3" y="1902.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.75%)</title><rect x="1175.2" y="1907.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.75%)</title><rect x="1175.2" y="1891.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.2" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.67%)</title><rect x="1175.2" y="1875.0" width="7.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.67%)</title><rect x="1175.2" y="1859.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.2" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.67%)</title><rect x="1175.2" y="1843.0" width="7.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.2" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.67%)</title><rect x="1175.2" y="1827.0" width="7.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.2" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.2" y="1811.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.2" y="1822.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1175.2" y="1795.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1806.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1175.2" y="1779.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1790.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1175.2" y="1763.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.2" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1175.2" y="1747.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1175.2" y="1731.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.2" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.2" y="1715.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1175.2" y="1699.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1175.2" y="1683.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.2" y="1694.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1175.2" y="1667.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.2" y="1678.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1175.2" y="1651.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.2" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.2" y="1635.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="1646.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.2" y="1619.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.2" y="1630.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1175.2" y="1603.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.2" y="1614.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.08%)</title><rect x="1175.2" y="1587.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="1598.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="1811.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="1822.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="1795.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="1806.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="1779.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.2" y="1790.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1176.2" y="1763.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.2" y="1774.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call(CallInfo&amp;, Handle, KlassHandle, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1176.2" y="1747.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="1758.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle, KlassHandle, Handle, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1176.2" y="1731.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.2" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.50%)</title><rect x="1177.2" y="1811.0" width="5.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.50%)</title><rect x="1177.2" y="1795.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.50%)</title><rect x="1177.2" y="1779.0" width="5.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.50%)</title><rect x="1177.2" y="1763.0" width="5.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.50%)</title><rect x="1177.2" y="1747.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.42%)</title><rect x="1177.2" y="1731.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.2" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.42%)</title><rect x="1177.2" y="1715.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.2" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.42%)</title><rect x="1177.2" y="1699.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.42%)</title><rect x="1177.2" y="1683.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.42%)</title><rect x="1177.2" y="1667.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.42%)</title><rect x="1177.2" y="1651.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.42%)</title><rect x="1177.2" y="1635.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.2" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1177.2" y="1619.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1177.2" y="1603.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.2" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1177.2" y="1587.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.2" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1177.2" y="1571.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1177.2" y="1555.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1177.2" y="1539.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.33%)</title><rect x="1177.2" y="1523.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.2" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.33%)</title><rect x="1177.2" y="1507.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.2" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.33%)</title><rect x="1177.2" y="1491.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.33%)</title><rect x="1177.2" y="1475.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.33%)</title><rect x="1177.2" y="1459.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.33%)</title><rect x="1177.2" y="1443.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.2" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.25%)</title><rect x="1177.2" y="1427.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.25%)</title><rect x="1177.2" y="1411.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.25%)</title><rect x="1177.2" y="1395.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.25%)</title><rect x="1177.2" y="1379.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.25%)</title><rect x="1177.2" y="1363.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.2" y="1347.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.2" y="1358.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="1331.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.2" y="1342.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1177.2" y="1315.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.2" y="1326.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1177.2" y="1299.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.2" y="1310.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1177.2" y="1283.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.2" y="1294.0"></text>
</g>
<g>
<title>TemplateInterpreter::bytecode_should_reexecute(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1177.2" y="1267.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.2" y="1278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.08%)</title><rect x="1178.2" y="1331.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="1342.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.2" y="1315.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="1326.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1178.2" y="1299.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="1310.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.08%)</title><rect x="1178.2" y="1283.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1179.2" y="1347.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1179.2" y="1331.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.2" y="1342.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1179.2" y="1315.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="1326.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.08%)</title><rect x="1179.2" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="1310.0"></text>
</g>
<g>
<title>IdealKit::make_leaf_call(TypeFunc const*, unsigned char*, char const*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.2" y="1283.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="1294.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1179.2" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="1278.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1179.2" y="1251.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.2" y="1262.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="1427.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="1411.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="1395.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="1379.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="1363.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="1347.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.2" y="1331.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="1315.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="1299.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="1283.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="1267.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="1251.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.2" y="1235.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.2" y="1219.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.2" y="1203.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.2" y="1187.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.2" y="1171.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.2" y="1155.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1139.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1123.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1180.2" y="1107.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1091.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.2" y="1102.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.08%)</title><rect x="1180.2" y="1075.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.2" y="1086.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1180.2" y="1059.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1180.2" y="1043.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="1054.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="1619.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="1603.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="1587.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="1571.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="1555.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="1539.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="1523.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="1507.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="1491.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="1475.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="1459.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="1443.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.1" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="1427.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="1395.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.1" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="1379.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="1363.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="1347.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="1331.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="1315.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="1299.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="1283.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="1267.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="1251.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.1" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.1" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.1" y="1219.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.1" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.1" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.1" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.1" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.1" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1181.1" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1181.1" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.1" y="1134.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1181.1" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1181.1" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="1102.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.08%)</title><rect x="1181.1" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.1" y="1086.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.08%)</title><rect x="1181.1" y="1059.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1182.1" y="1731.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="1742.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1182.1" y="1715.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="1726.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.08%)</title><rect x="1182.1" y="1699.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.1" y="1710.0"></text>
</g>
<g>
<title>IdealKit::transform(Node*) (1 samples, 0.08%)</title><rect x="1182.1" y="1683.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.1" y="1694.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1183.1" y="1875.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="1886.0"></text>
</g>
<g>
<title>TypeNode::cmp(Node const&amp;) const (1 samples, 0.08%)</title><rect x="1183.1" y="1859.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="1870.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.17%)</title><rect x="1184.1" y="1907.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="1918.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1184.1" y="1891.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="1902.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.08%)</title><rect x="1185.1" y="1891.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1902.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1939.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="1950.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.08%)</title><rect x="1186.1" y="1923.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.1" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1907.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.1" y="1918.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.08%)</title><rect x="1186.1" y="1891.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.1" y="1902.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1186.1" y="1875.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.1" y="1886.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1186.1" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1870.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1186.1" y="1843.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.1" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1186.1" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.1" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.1" y="1811.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.1" y="1822.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.1" y="1795.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1806.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.1" y="1779.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.1" y="1790.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1186.1" y="1763.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1774.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.08%)</title><rect x="1186.1" y="1747.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="1758.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.08%)</title><rect x="1186.1" y="1731.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.1" y="1742.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.08%)</title><rect x="1186.1" y="1715.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.1" y="1726.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1186.1" y="1699.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.1" y="1710.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1186.1" y="1683.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.1" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1186.1" y="1667.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.1" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1186.1" y="1651.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.1" y="1662.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1186.1" y="1635.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.1" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1186.1" y="1619.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.1" y="1630.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1186.1" y="1603.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.1" y="1614.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1186.1" y="1587.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.1" y="1598.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.25%)</title><rect x="1187.0" y="2003.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.25%)</title><rect x="1187.0" y="1987.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.0" y="1998.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.17%)</title><rect x="1187.0" y="1971.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="1982.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1955.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1939.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1923.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.0" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1907.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1918.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.08%)</title><rect x="1189.0" y="1891.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="1902.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.08%)</title><rect x="1189.0" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1886.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.08%)</title><rect x="1189.0" y="1859.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.0" y="1870.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1125"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1125"> </text>
<g id="frames">
<g>
<title>all (1,096 samples, 100.00%)</title><rect x="10.0" y="1091.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1102.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (202 samples, 18.43%)</title><rect x="10.0" y="1075.0" width="217.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1086.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (202 samples, 18.43%)</title><rect x="10.0" y="1059.0" width="217.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1070.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (202 samples, 18.43%)</title><rect x="10.0" y="1043.0" width="217.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1054.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.18%)</title><rect x="10.0" y="1027.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.18%)</title><rect x="10.0" y="1011.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="10.0" y="995.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="10.0" y="979.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="10.0" y="963.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="10.0" y="947.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="10.0" y="931.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="10.0" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="10.0" y="883.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="10.0" y="867.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="11.1" y="915.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.09%)</title><rect x="11.1" y="899.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.55%)</title><rect x="12.2" y="1027.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.55%)</title><rect x="12.2" y="1011.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.55%)</title><rect x="12.2" y="995.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.09%)</title><rect x="12.2" y="979.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/733267210.accept (5 samples, 0.46%)</title><rect x="13.2" y="979.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.46%)</title><rect x="13.2" y="963.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.46%)</title><rect x="13.2" y="947.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.2" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.36%)</title><rect x="14.3" y="931.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="942.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.09%)</title><rect x="17.5" y="915.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.5" y="926.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="17.5" y="899.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="17.5" y="883.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="17.5" y="867.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.5" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (156 samples, 14.23%)</title><rect x="18.6" y="1027.0" width="168.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="1038.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1912587102.accept (149 samples, 13.59%)</title><rect x="18.6" y="1011.0" width="160.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="1022.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (149 samples, 13.59%)</title><rect x="18.6" y="995.0" width="160.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.6" y="1006.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (137 samples, 12.50%)</title><rect x="18.6" y="979.0" width="147.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="990.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (137 samples, 12.50%)</title><rect x="18.6" y="963.0" width="147.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="974.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (137 samples, 12.50%)</title><rect x="18.6" y="947.0" width="147.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="958.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (137 samples, 12.50%)</title><rect x="18.6" y="931.0" width="147.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="942.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (137 samples, 12.50%)</title><rect x="18.6" y="915.0" width="147.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="926.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (137 samples, 12.50%)</title><rect x="18.6" y="899.0" width="147.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="910.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (99 samples, 9.03%)</title><rect x="55.2" y="883.0" width="106.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.2" y="894.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (21 samples, 1.92%)</title><rect x="55.2" y="867.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.2" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (21 samples, 1.92%)</title><rect x="55.2" y="851.0" width="22.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (21 samples, 1.92%)</title><rect x="55.2" y="835.0" width="22.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.2" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.55%)</title><rect x="77.8" y="867.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.55%)</title><rect x="77.8" y="851.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.18%)</title><rect x="77.8" y="835.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.8" y="846.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.18%)</title><rect x="77.8" y="819.0" width="2.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="80.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.36%)</title><rect x="80.0" y="835.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (72 samples, 6.57%)</title><rect x="84.3" y="867.0" width="77.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.3" y="878.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (72 samples, 6.57%)</title><rect x="84.3" y="851.0" width="77.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="87.3" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="84.3" y="835.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="87.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (69 samples, 6.30%)</title><rect x="85.4" y="835.0" width="74.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.4" y="846.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (69 samples, 6.30%)</title><rect x="85.4" y="819.0" width="74.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="88.4" y="830.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 6.20%)</title><rect x="86.4" y="803.0" width="73.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.4" y="814.0">sun/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 5.29%)</title><rect x="86.4" y="787.0" width="62.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="89.4" y="798.0">Unsafe..</text>
</g>
<g>
<title>__pthread_cond_signal (47 samples, 4.29%)</title><rect x="86.4" y="771.0" width="50.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="89.4" y="782.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.00%)</title><rect x="137.0" y="771.0" width="11.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="140.0" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.73%)</title><rect x="148.9" y="787.0" width="8.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="151.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.18%)</title><rect x="157.5" y="787.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="160.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.18%)</title><rect x="159.7" y="835.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="162.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.36%)</title><rect x="161.8" y="883.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.36%)</title><rect x="161.8" y="867.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.27%)</title><rect x="161.8" y="851.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="165.0" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="168.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="165.0" y="835.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="168.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 0.91%)</title><rect x="166.1" y="979.0" width="10.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 0.91%)</title><rect x="166.1" y="963.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="176.9" y="979.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="176.9" y="963.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="176.9" y="947.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="176.9" y="931.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="176.9" y="915.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.64%)</title><rect x="179.0" y="1011.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="182.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.64%)</title><rect x="179.0" y="995.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.64%)</title><rect x="179.0" y="979.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.64%)</title><rect x="179.0" y="963.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 3.47%)</title><rect x="186.6" y="1027.0" width="40.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.6" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 3.47%)</title><rect x="186.6" y="1011.0" width="40.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.6" y="1022.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 1.92%)</title><rect x="187.6" y="995.0" width="22.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.6" y="1006.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (21 samples, 1.92%)</title><rect x="187.6" y="979.0" width="22.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.6" y="990.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 1.92%)</title><rect x="187.6" y="963.0" width="22.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.6" y="974.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (14 samples, 1.28%)</title><rect x="187.6" y="947.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="190.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (14 samples, 1.28%)</title><rect x="187.6" y="931.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (7 samples, 0.64%)</title><rect x="187.6" y="915.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.36%)</title><rect x="188.7" y="899.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.36%)</title><rect x="188.7" y="883.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="191.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.36%)</title><rect x="188.7" y="867.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.36%)</title><rect x="188.7" y="851.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.36%)</title><rect x="188.7" y="835.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.36%)</title><rect x="188.7" y="819.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (3 samples, 0.27%)</title><rect x="189.8" y="803.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="193.0" y="899.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="196.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="193.0" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="193.0" y="867.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.09%)</title><rect x="193.0" y="851.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="196.0" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="193.0" y="835.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="194.1" y="899.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (7 samples, 0.64%)</title><rect x="195.2" y="915.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.55%)</title><rect x="196.3" y="899.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="199.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (6 samples, 0.55%)</title><rect x="196.3" y="883.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.3" y="894.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (6 samples, 0.55%)</title><rect x="196.3" y="867.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.3" y="878.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (2 samples, 0.18%)</title><rect x="199.5" y="851.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (2 samples, 0.18%)</title><rect x="199.5" y="835.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (2 samples, 0.18%)</title><rect x="199.5" y="819.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (2 samples, 0.18%)</title><rect x="199.5" y="803.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.5" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="200.6" y="787.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="203.6" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="201.6" y="851.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="204.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (5 samples, 0.46%)</title><rect x="202.7" y="947.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (5 samples, 0.46%)</title><rect x="202.7" y="931.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="205.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (3 samples, 0.27%)</title><rect x="202.7" y="915.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="205.7" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.27%)</title><rect x="202.7" y="899.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="205.7" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (3 samples, 0.27%)</title><rect x="202.7" y="883.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.7" y="894.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="204.9" y="867.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="207.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="205.9" y="915.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="205.9" y="899.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="207.0" y="915.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="210.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="207.0" y="899.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.0" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="207.0" y="883.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="210.0" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="207.0" y="867.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="210.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.09%)</title><rect x="208.1" y="947.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="211.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="208.1" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="208.1" y="915.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.1" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="208.1" y="899.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="211.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="208.1" y="883.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="211.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="209.2" y="947.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.09%)</title><rect x="209.2" y="931.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.09%)</title><rect x="209.2" y="915.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="212.2" y="926.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="209.2" y="899.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="209.2" y="883.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="212.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (7 samples, 0.64%)</title><rect x="210.3" y="995.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.64%)</title><rect x="210.3" y="979.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.27%)</title><rect x="210.3" y="963.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="213.3" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.09%)</title><rect x="210.3" y="947.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/967878750.accept (1 samples, 0.09%)</title><rect x="210.3" y="931.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="210.3" y="915.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="213.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.09%)</title><rect x="210.3" y="899.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.09%)</title><rect x="210.3" y="883.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.09%)</title><rect x="210.3" y="867.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.3" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="210.3" y="851.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="210.3" y="835.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.09%)</title><rect x="211.3" y="947.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.09%)</title><rect x="211.3" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.3" y="942.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.09%)</title><rect x="211.3" y="915.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.3" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="211.3" y="899.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="211.3" y="883.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.09%)</title><rect x="212.4" y="947.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.09%)</title><rect x="212.4" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="215.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (4 samples, 0.36%)</title><rect x="213.5" y="963.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.5" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (4 samples, 0.36%)</title><rect x="213.5" y="947.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="216.5" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.36%)</title><rect x="213.5" y="931.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.5" y="942.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.36%)</title><rect x="213.5" y="915.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.5" y="926.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (4 samples, 0.36%)</title><rect x="213.5" y="899.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.5" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="214.6" y="883.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="214.6" y="867.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.6" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.18%)</title><rect x="214.6" y="851.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.6" y="862.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="214.6" y="835.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.6" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="215.6" y="835.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.6" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="215.6" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.6" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="215.6" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$242/1249261884.apply (1 samples, 0.09%)</title><rect x="215.6" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$$Lambda$52/1541857308.get (1 samples, 0.09%)</title><rect x="216.7" y="883.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.7" y="894.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps.lambda$makeRef$237 (1 samples, 0.09%)</title><rect x="216.7" y="867.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.18%)</title><rect x="217.8" y="995.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.09%)</title><rect x="217.8" y="979.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="217.8" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="217.8" y="947.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="217.8" y="931.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.09%)</title><rect x="218.9" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.09%)</title><rect x="218.9" y="963.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="218.9" y="947.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.46%)</title><rect x="219.9" y="995.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.18%)</title><rect x="221.0" y="979.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.18%)</title><rect x="221.0" y="963.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="221.0" y="947.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="224.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.18%)</title><rect x="221.0" y="931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.18%)</title><rect x="221.0" y="915.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="221.0" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="224.0" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="221.0" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="224.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.09%)</title><rect x="222.1" y="899.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="225.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.09%)</title><rect x="222.1" y="883.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="225.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.09%)</title><rect x="222.1" y="867.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.1" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.09%)</title><rect x="222.1" y="851.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.1" y="862.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="222.1" y="835.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="225.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.18%)</title><rect x="223.2" y="979.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.09%)</title><rect x="223.2" y="963.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.09%)</title><rect x="223.2" y="947.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.09%)</title><rect x="223.2" y="931.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="224.3" y="963.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="224.3" y="947.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="224.3" y="931.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="224.3" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="224.3" y="899.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="224.3" y="883.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="227.3" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (1 samples, 0.09%)</title><rect x="224.3" y="867.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="224.3" y="851.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.18%)</title><rect x="225.3" y="995.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.18%)</title><rect x="225.3" y="979.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="226.4" y="963.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="226.4" y="947.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="226.4" y="931.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="226.4" y="915.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="226.4" y="899.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.4" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="226.4" y="883.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.4" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="226.4" y="867.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.4" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="226.4" y="851.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="229.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (617 samples, 56.30%)</title><rect x="227.5" y="1075.0" width="664.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="230.5" y="1086.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (617 samples, 56.30%)</title><rect x="227.5" y="1059.0" width="664.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.5" y="1070.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (617 samples, 56.30%)</title><rect x="227.5" y="1043.0" width="664.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.5" y="1054.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1040493675.run (416 samples, 37.96%)</title><rect x="247.9" y="1027.0" width="447.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.9" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (414 samples, 37.77%)</title><rect x="250.1" y="1011.0" width="445.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.1" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (414 samples, 37.77%)</title><rect x="250.1" y="995.0" width="445.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.1" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (414 samples, 37.77%)</title><rect x="250.1" y="979.0" width="445.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.1" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.64%)</title><rect x="257.6" y="963.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.6" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.64%)</title><rect x="257.6" y="947.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.64%)</title><rect x="257.6" y="931.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.64%)</title><rect x="257.6" y="915.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.6" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="261.9" y="899.0" width="3.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="264.9" y="910.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="261.9" y="883.0" width="3.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="264.9" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (45 samples, 4.11%)</title><rect x="265.2" y="963.0" width="48.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.2" y="974.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.09%)</title><rect x="277.0" y="947.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 3.01%)</title><rect x="278.1" y="947.0" width="35.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.1" y="958.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 3.01%)</title><rect x="278.1" y="931.0" width="35.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.1" y="942.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (33 samples, 3.01%)</title><rect x="278.1" y="915.0" width="35.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.1" y="926.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.36%)</title><rect x="278.1" y="899.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.36%)</title><rect x="278.1" y="883.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.36%)</title><rect x="278.1" y="867.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1911990383.accept (1 samples, 0.09%)</title><rect x="279.2" y="851.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.2" y="862.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="280.2" y="851.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="283.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (29 samples, 2.65%)</title><rect x="282.4" y="899.0" width="31.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.4" y="910.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1911990383.accept (29 samples, 2.65%)</title><rect x="282.4" y="883.0" width="31.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.4" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (29 samples, 2.65%)</title><rect x="282.4" y="867.0" width="31.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="285.4" y="878.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (29 samples, 2.65%)</title><rect x="282.4" y="851.0" width="31.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.4" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (29 samples, 2.65%)</title><rect x="282.4" y="835.0" width="31.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.4" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (28 samples, 2.55%)</title><rect x="283.5" y="819.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="286.5" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.73%)</title><rect x="283.5" y="803.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (8 samples, 0.73%)</title><rect x="283.5" y="787.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="286.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/321862833.accept (2 samples, 0.18%)</title><rect x="286.7" y="771.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1849276356.accept (1 samples, 0.09%)</title><rect x="288.9" y="771.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="291.9" y="782.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.18%)</title><rect x="289.9" y="771.0" width="2.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="292.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 1.82%)</title><rect x="292.1" y="803.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="814.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1849276356.accept (3 samples, 0.27%)</title><rect x="310.4" y="787.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="313.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (107 samples, 9.76%)</title><rect x="313.6" y="963.0" width="115.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="316.6" y="974.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (107 samples, 9.76%)</title><rect x="313.6" y="947.0" width="115.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.6" y="958.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (107 samples, 9.76%)</title><rect x="313.6" y="931.0" width="115.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.6" y="942.0">com/linecorp/d..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="313.6" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="316.6" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="313.6" y="899.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.6" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="313.6" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="316.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="313.6" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="316.6" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="313.6" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="316.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="313.6" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="316.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (106 samples, 9.67%)</title><rect x="314.7" y="915.0" width="114.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.7" y="926.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (106 samples, 9.67%)</title><rect x="314.7" y="899.0" width="114.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.7" y="910.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (106 samples, 9.67%)</title><rect x="314.7" y="883.0" width="114.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.7" y="894.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (28 samples, 2.55%)</title><rect x="314.7" y="867.0" width="30.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.7" y="878.0">co..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="327.6" y="851.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="330.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="327.6" y="835.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="330.6" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="328.7" y="851.0" width="1.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="331.7" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="329.8" y="851.0" width="4.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="332.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="330.8" y="835.0" width="3.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="333.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.09%)</title><rect x="334.1" y="851.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.09%)</title><rect x="334.1" y="835.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="337.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="334.1" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="334.1" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="334.1" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="334.1" y="771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="334.1" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 0.82%)</title><rect x="335.1" y="851.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.73%)</title><rect x="335.1" y="835.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.27%)</title><rect x="336.2" y="819.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="339.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="336.2" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="339.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="336.2" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="339.2" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="336.2" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="339.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="336.2" y="755.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="339.2" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="336.2" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="339.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.18%)</title><rect x="337.3" y="803.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 0.36%)</title><rect x="339.5" y="819.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.36%)</title><rect x="339.5" y="803.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="342.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.09%)</title><rect x="339.5" y="787.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="339.5" y="771.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="342.5" y="782.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.09%)</title><rect x="339.5" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="342.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.18%)</title><rect x="340.5" y="787.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="342.7" y="787.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="345.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="342.7" y="771.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="345.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="342.7" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="345.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="342.7" y="739.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="345.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="342.7" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="345.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.09%)</title><rect x="343.8" y="835.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (75 samples, 6.84%)</title><rect x="344.8" y="867.0" width="80.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.8" y="878.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.46%)</title><rect x="345.9" y="851.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="351.3" y="851.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.3" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.18%)</title><rect x="352.4" y="851.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="355.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="352.4" y="835.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="355.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.64%)</title><rect x="354.5" y="851.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.46%)</title><rect x="356.7" y="835.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="359.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.18%)</title><rect x="359.9" y="819.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="362.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.18%)</title><rect x="359.9" y="803.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="362.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.18%)</title><rect x="362.1" y="851.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.18%)</title><rect x="362.1" y="835.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="365.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.18%)</title><rect x="362.1" y="819.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.1" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="362.1" y="803.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="365.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="362.1" y="787.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="365.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.checkUnresolvedObjectId (1 samples, 0.09%)</title><rect x="364.2" y="851.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="367.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (56 samples, 5.11%)</title><rect x="365.3" y="851.0" width="60.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="368.3" y="862.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="367.4" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (53 samples, 4.84%)</title><rect x="368.5" y="835.0" width="57.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="371.5" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.55%)</title><rect x="369.6" y="819.0" width="18.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.36%)</title><rect x="372.8" y="803.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="375.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.36%)</title><rect x="372.8" y="787.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="375.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.36%)</title><rect x="372.8" y="771.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="375.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.36%)</title><rect x="372.8" y="755.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="375.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.09%)</title><rect x="376.1" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.46%)</title><rect x="377.1" y="803.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="380.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (5 samples, 0.46%)</title><rect x="377.1" y="787.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (5 samples, 0.46%)</title><rect x="377.1" y="771.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (4 samples, 0.36%)</title><rect x="378.2" y="755.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="381.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (4 samples, 0.36%)</title><rect x="378.2" y="739.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="381.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.36%)</title><rect x="382.5" y="803.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.09%)</title><rect x="386.8" y="803.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="389.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 3.19%)</title><rect x="387.9" y="819.0" width="37.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.9" y="830.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 3.19%)</title><rect x="387.9" y="803.0" width="37.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.9" y="814.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="387.9" y="787.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="390.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 3.10%)</title><rect x="389.0" y="787.0" width="36.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="392.0" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.46%)</title><rect x="393.3" y="771.0" width="17.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="395.4" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="398.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.73%)</title><rect x="396.5" y="755.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.73%)</title><rect x="396.5" y="739.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.73%)</title><rect x="396.5" y="723.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="399.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.27%)</title><rect x="396.5" y="707.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.46%)</title><rect x="399.7" y="707.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="402.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="405.1" y="755.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="405.1" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.36%)</title><rect x="406.2" y="755.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.27%)</title><rect x="410.5" y="771.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="413.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.18%)</title><rect x="411.6" y="755.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.18%)</title><rect x="411.6" y="739.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.18%)</title><rect x="411.6" y="723.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="414.6" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.18%)</title><rect x="411.6" y="707.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="413.7" y="771.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.27%)</title><rect x="414.8" y="771.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.27%)</title><rect x="414.8" y="755.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.27%)</title><rect x="414.8" y="739.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="417.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.27%)</title><rect x="414.8" y="723.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.8" y="734.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.27%)</title><rect x="414.8" y="707.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.8" y="718.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.09%)</title><rect x="417.0" y="691.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="420.0" y="702.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.09%)</title><rect x="417.0" y="675.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.64%)</title><rect x="418.0" y="771.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="421.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.64%)</title><rect x="418.0" y="755.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.64%)</title><rect x="418.0" y="739.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="424.5" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.27%)</title><rect x="425.6" y="867.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="428.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 0.27%)</title><rect x="425.6" y="851.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="428.6" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 0.27%)</title><rect x="425.6" y="835.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.6" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 0.27%)</title><rect x="425.6" y="819.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.27%)</title><rect x="425.6" y="803.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (242 samples, 22.08%)</title><rect x="428.8" y="963.0" width="260.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="431.8" y="974.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="436.4" y="947.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="439.4" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="437.4" y="947.0" width="2.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="440.4" y="958.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="437.4" y="931.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="440.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (43 samples, 3.92%)</title><rect x="439.6" y="947.0" width="46.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="442.6" y="958.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (43 samples, 3.92%)</title><rect x="439.6" y="931.0" width="46.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="442.6" y="942.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 3.65%)</title><rect x="442.8" y="915.0" width="43.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.8" y="926.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.36%)</title><rect x="445.0" y="899.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.0" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.36%)</title><rect x="445.0" y="883.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.0" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.36%)</title><rect x="445.0" y="867.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.0" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.36%)</title><rect x="445.0" y="851.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.0" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="449.3" y="899.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.3" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="449.3" y="883.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.3" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="449.3" y="867.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="452.3" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="449.3" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="449.3" y="835.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="452.3" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (33 samples, 3.01%)</title><rect x="450.3" y="899.0" width="35.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.3" y="910.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="478.3" y="883.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="481.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.55%)</title><rect x="479.4" y="883.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.4" y="894.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="479.4" y="867.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="482.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="480.5" y="867.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="483.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.36%)</title><rect x="481.6" y="867.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="484.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.73%)</title><rect x="485.9" y="947.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="488.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.73%)</title><rect x="485.9" y="931.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (117 samples, 10.68%)</title><rect x="494.5" y="947.0" width="126.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.5" y="958.0">com/linecorp/de..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.09%)</title><rect x="499.9" y="931.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.9" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="499.9" y="915.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.9" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="499.9" y="899.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="502.9" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="499.9" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="502.9" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="499.9" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="502.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (103 samples, 9.40%)</title><rect x="500.9" y="931.0" width="110.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="503.9" y="942.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (31 samples, 2.83%)</title><rect x="500.9" y="915.0" width="33.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.9" y="926.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (18 samples, 1.64%)</title><rect x="507.4" y="899.0" width="19.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.4" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 0.82%)</title><rect x="513.9" y="883.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="516.9" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.64%)</title><rect x="513.9" y="867.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.9" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.64%)</title><rect x="513.9" y="851.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="516.9" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.64%)</title><rect x="513.9" y="835.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="516.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.64%)</title><rect x="513.9" y="819.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="516.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.27%)</title><rect x="513.9" y="803.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="516.9" y="814.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="513.9" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="516.9" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.18%)</title><rect x="514.9" y="787.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="517.9" y="798.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.18%)</title><rect x="514.9" y="771.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="517.9" y="782.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="514.9" y="755.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="517.9" y="766.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="514.9" y="739.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="517.9" y="750.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="516.0" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="519.0" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.36%)</title><rect x="517.1" y="803.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="520.1" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.27%)</title><rect x="517.1" y="787.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="520.1" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="517.1" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="520.1" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="517.1" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="520.1" y="766.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="517.1" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="520.1" y="750.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="517.1" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.1" y="734.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.09%)</title><rect x="518.2" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="521.2" y="782.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="519.3" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="522.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.09%)</title><rect x="520.3" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="523.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="521.4" y="867.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.4" y="878.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="523.6" y="883.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="526.6" y="894.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="526.8" y="899.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="526.8" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="529.8" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="526.8" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="529.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="526.8" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="529.8" y="862.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="526.8" y="835.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="529.8" y="846.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.55%)</title><rect x="527.9" y="899.0" width="6.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="530.9" y="910.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.82%)</title><rect x="534.3" y="915.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (5 samples, 0.46%)</title><rect x="534.3" y="899.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.3" y="910.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.46%)</title><rect x="534.3" y="883.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.36%)</title><rect x="539.7" y="899.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="542.7" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.36%)</title><rect x="539.7" y="883.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.7" y="894.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (63 samples, 5.75%)</title><rect x="544.0" y="915.0" width="67.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.0" y="926.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (52 samples, 4.74%)</title><rect x="554.8" y="899.0" width="56.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.8" y="910.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.46%)</title><rect x="554.8" y="883.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="557.8" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.46%)</title><rect x="554.8" y="867.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.8" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.46%)</title><rect x="554.8" y="851.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.8" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.46%)</title><rect x="554.8" y="835.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="557.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="560.2" y="883.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="563.2" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="560.2" y="867.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="563.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="560.2" y="851.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="560.2" y="835.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="563.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (46 samples, 4.20%)</title><rect x="561.2" y="883.0" width="49.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="564.2" y="894.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (43 samples, 3.92%)</title><rect x="564.5" y="867.0" width="46.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.5" y="878.0">java..</text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 1.55%)</title><rect x="592.5" y="851.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="595.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.64%)</title><rect x="601.1" y="835.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="604.1" y="846.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.18%)</title><rect x="608.6" y="835.0" width="2.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="611.6" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="610.8" y="899.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="613.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.73%)</title><rect x="611.8" y="931.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.8" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.73%)</title><rect x="611.8" y="915.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.73%)</title><rect x="611.8" y="899.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="614.8" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.64%)</title><rect x="611.8" y="883.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="614.8" y="894.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="615.1" y="867.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="618.1" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="615.1" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="618.1" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="616.1" y="867.0" width="3.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="619.1" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="617.2" y="851.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="620.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="619.4" y="883.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="622.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (54 samples, 4.93%)</title><rect x="620.5" y="947.0" width="58.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="623.5" y="958.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (53 samples, 4.84%)</title><rect x="621.5" y="931.0" width="57.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="624.5" y="942.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1060426559.process (29 samples, 2.65%)</title><rect x="622.6" y="915.0" width="31.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="625.6" y="926.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (29 samples, 2.65%)</title><rect x="622.6" y="899.0" width="31.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.6" y="910.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 2.28%)</title><rect x="623.7" y="883.0" width="26.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.7" y="894.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="633.4" y="867.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="636.4" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="633.4" y="851.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="636.4" y="862.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="633.4" y="835.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.4" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="633.4" y="819.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (10 samples, 0.91%)</title><rect x="634.5" y="867.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.5" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.82%)</title><rect x="635.5" y="851.0" width="9.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="638.5" y="862.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.82%)</title><rect x="635.5" y="835.0" width="9.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="638.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="645.2" y="867.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="647.4" y="867.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.4" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="648.4" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.4" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="648.4" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.09%)</title><rect x="649.5" y="867.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="652.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.09%)</title><rect x="649.5" y="851.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.09%)</title><rect x="649.5" y="835.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="652.5" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="649.5" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="652.5" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="649.5" y="803.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="652.5" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="649.5" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="652.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="649.5" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="652.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="649.5" y="755.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.5" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.27%)</title><rect x="650.6" y="883.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="653.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.27%)</title><rect x="650.6" y="867.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.6" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.27%)</title><rect x="650.6" y="851.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="653.6" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.27%)</title><rect x="650.6" y="835.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="653.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.27%)</title><rect x="650.6" y="819.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="653.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.46%)</title><rect x="653.8" y="915.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="654.9" y="899.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="657.9" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.09%)</title><rect x="658.1" y="899.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.09%)</title><rect x="658.1" y="883.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="661.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.09%)</title><rect x="658.1" y="867.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="661.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="659.2" y="915.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.2" y="926.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="659.2" y="899.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="662.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.09%)</title><rect x="662.4" y="915.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/900138544.get (1 samples, 0.09%)</title><rect x="662.4" y="899.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$76 (1 samples, 0.09%)</title><rect x="662.4" y="883.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.18%)</title><rect x="663.5" y="915.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.5" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.18%)</title><rect x="663.5" y="899.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.5" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.46%)</title><rect x="665.7" y="915.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="668.7" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.27%)</title><rect x="667.8" y="899.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="670.8" y="910.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.27%)</title><rect x="667.8" y="883.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.8" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="671.1" y="915.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="671.1" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.27%)</title><rect x="672.1" y="915.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.1" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.27%)</title><rect x="672.1" y="899.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.27%)</title><rect x="675.4" y="915.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.27%)</title><rect x="675.4" y="899.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.27%)</title><rect x="675.4" y="883.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="675.4" y="867.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.27%)</title><rect x="675.4" y="851.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.27%)</title><rect x="675.4" y="835.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/982690904.accept (3 samples, 0.27%)</title><rect x="675.4" y="819.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.91%)</title><rect x="678.6" y="947.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="681.6" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.91%)</title><rect x="678.6" y="931.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.6" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.91%)</title><rect x="678.6" y="915.0" width="10.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="678.6" y="899.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="681.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.27%)</title><rect x="678.6" y="883.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.27%)</title><rect x="678.6" y="867.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="681.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1015280974.accept (1 samples, 0.09%)</title><rect x="679.7" y="851.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.7" y="862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="680.7" y="851.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="683.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.64%)</title><rect x="681.8" y="899.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="684.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1015280974.accept (7 samples, 0.64%)</title><rect x="681.8" y="883.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (7 samples, 0.64%)</title><rect x="681.8" y="867.0" width="7.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="684.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (7 samples, 0.64%)</title><rect x="681.8" y="851.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.8" y="862.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.64%)</title><rect x="681.8" y="835.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="684.8" y="846.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.64%)</title><rect x="681.8" y="819.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.8" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.55%)</title><rect x="682.9" y="803.0" width="6.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="685.9" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="682.9" y="787.0" width="6.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="685.9" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.55%)</title><rect x="689.4" y="963.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.4" y="974.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.55%)</title><rect x="689.4" y="947.0" width="6.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="692.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (182 samples, 16.61%)</title><rect x="695.8" y="1027.0" width="196.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="698.8" y="1038.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (182 samples, 16.61%)</title><rect x="695.8" y="1011.0" width="196.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="698.8" y="1022.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (173 samples, 15.78%)</title><rect x="705.5" y="995.0" width="186.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="708.5" y="1006.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.37%)</title><rect x="714.1" y="979.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="717.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.09%)</title><rect x="730.3" y="979.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="733.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.09%)</title><rect x="730.3" y="963.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="733.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="730.3" y="947.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="733.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.09%)</title><rect x="730.3" y="931.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="733.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="730.3" y="915.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="733.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (148 samples, 13.50%)</title><rect x="731.4" y="979.0" width="159.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="734.4" y="990.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (142 samples, 12.96%)</title><rect x="737.8" y="963.0" width="152.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="740.8" y="974.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="738.9" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="741.9" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="740.0" y="947.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.0" y="958.0"></text>
</g>
<g>
<title>Unsafe_Park (136 samples, 12.41%)</title><rect x="742.1" y="947.0" width="146.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="745.1" y="958.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="746.4" y="931.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="749.4" y="942.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (18 samples, 1.64%)</title><rect x="747.5" y="931.0" width="19.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.5" y="942.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.46%)</title><rect x="751.8" y="915.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="754.8" y="926.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.18%)</title><rect x="754.0" y="899.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="757.0" y="910.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="755.0" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="758.0" y="894.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="756.1" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="759.1" y="910.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="757.2" y="915.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="760.2" y="926.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.73%)</title><rect x="758.3" y="915.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="761.3" y="926.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="766.9" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.9" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="768.0" y="931.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="771.0" y="942.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.18%)</title><rect x="770.1" y="931.0" width="2.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="773.1" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 3.28%)</title><rect x="772.3" y="931.0" width="38.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="775.3" y="942.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.74%)</title><rect x="811.0" y="931.0" width="56.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="814.0" y="942.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.18%)</title><rect x="867.0" y="931.0" width="2.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="870.0" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.27%)</title><rect x="869.2" y="931.0" width="3.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="872.2" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="872.4" y="931.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="875.4" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.46%)</title><rect x="873.5" y="931.0" width="5.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="876.5" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.18%)</title><rect x="878.9" y="931.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="881.9" y="942.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="881.0" y="931.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="884.0" y="942.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.46%)</title><rect x="882.1" y="931.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.1" y="942.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="887.5" y="931.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="890.5" y="942.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.18%)</title><rect x="888.5" y="947.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="891.5" y="958.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="890.7" y="979.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="893.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="891.8" y="1075.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="894.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="891.8" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="894.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="891.8" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="894.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.09%)</title><rect x="891.8" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="894.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.09%)</title><rect x="891.8" y="1011.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="894.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.09%)</title><rect x="891.8" y="995.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="894.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$90/1344280349.get (1 samples, 0.09%)</title><rect x="891.8" y="979.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="894.8" y="990.0"></text>
</g>
<g>
<title>start_thread (276 samples, 25.18%)</title><rect x="892.8" y="1075.0" width="297.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="895.8" y="1086.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (276 samples, 25.18%)</title><rect x="892.8" y="1059.0" width="297.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="895.8" y="1070.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 2.19%)</title><rect x="892.8" y="1043.0" width="25.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.8" y="1054.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (6 samples, 0.55%)</title><rect x="892.8" y="1027.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.8" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.55%)</title><rect x="892.8" y="1011.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="895.8" y="1022.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="892.8" y="995.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.8" y="1006.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.36%)</title><rect x="895.0" y="995.0" width="4.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="898.0" y="1006.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.64%)</title><rect x="899.3" y="1027.0" width="19.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="902.3" y="1038.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.46%)</title><rect x="899.3" y="1011.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.3" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.18%)</title><rect x="900.4" y="995.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="903.4" y="1006.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.09%)</title><rect x="901.5" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="904.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.09%)</title><rect x="901.5" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.5" y="974.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="902.5" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.5" y="1006.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="903.6" y="995.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="906.6" y="1006.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (10 samples, 0.91%)</title><rect x="904.7" y="1011.0" width="10.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="907.7" y="1022.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.46%)</title><rect x="905.8" y="995.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="908.8" y="1006.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.27%)</title><rect x="905.8" y="979.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="908.8" y="990.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.27%)</title><rect x="905.8" y="963.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.8" y="974.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.27%)</title><rect x="905.8" y="947.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="908.8" y="958.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="909.0" y="979.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="912.0" y="990.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.18%)</title><rect x="909.0" y="963.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.0" y="974.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.09%)</title><rect x="909.0" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.0" y="958.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.09%)</title><rect x="909.0" y="931.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="912.0" y="942.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="909.0" y="915.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.0" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="910.1" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.1" y="958.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="910.1" y="931.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="913.1" y="942.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="910.1" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.1" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.36%)</title><rect x="911.1" y="995.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.1" y="1006.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.09%)</title><rect x="911.1" y="979.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="914.1" y="990.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.27%)</title><rect x="912.2" y="979.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.2" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (3 samples, 0.27%)</title><rect x="915.5" y="1011.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="918.5" y="1022.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (3 samples, 0.27%)</title><rect x="915.5" y="995.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="918.5" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (3 samples, 0.27%)</title><rect x="915.5" y="979.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.5" y="990.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (3 samples, 0.27%)</title><rect x="915.5" y="963.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.5" y="974.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.09%)</title><rect x="915.5" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="918.5" y="958.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.18%)</title><rect x="916.5" y="947.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="919.5" y="958.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (2 samples, 0.18%)</title><rect x="916.5" y="931.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="919.5" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (250 samples, 22.81%)</title><rect x="918.7" y="1043.0" width="269.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="921.7" y="1054.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (250 samples, 22.81%)</title><rect x="918.7" y="1027.0" width="269.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.7" y="1038.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (250 samples, 22.81%)</title><rect x="918.7" y="1011.0" width="269.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="921.7" y="1022.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (250 samples, 22.81%)</title><rect x="918.7" y="995.0" width="269.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="921.7" y="1006.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (250 samples, 22.81%)</title><rect x="918.7" y="979.0" width="269.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="921.7" y="990.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (250 samples, 22.81%)</title><rect x="918.7" y="963.0" width="269.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="921.7" y="974.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.09%)</title><rect x="918.7" y="947.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="921.7" y="958.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.09%)</title><rect x="918.7" y="931.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.7" y="942.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="918.7" y="915.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.7" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="918.7" y="899.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.7" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="918.7" y="883.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.7" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="918.7" y="867.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.7" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="918.7" y="851.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.7" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="918.7" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.7" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="918.7" y="819.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="921.7" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="918.7" y="803.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.7" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="918.7" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="918.7" y="771.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="921.7" y="782.0"></text>
</g>
<g>
<title>ConstantPool::signature_ref_index_at(int) (1 samples, 0.09%)</title><rect x="918.7" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="921.7" y="766.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 5.47%)</title><rect x="919.8" y="947.0" width="64.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.8" y="958.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.18%)</title><rect x="919.8" y="931.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.8" y="942.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.18%)</title><rect x="919.8" y="915.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="922.8" y="926.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.18%)</title><rect x="919.8" y="899.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="922.8" y="910.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.18%)</title><rect x="919.8" y="883.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.8" y="894.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="919.8" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.8" y="878.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.09%)</title><rect x="919.8" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.8" y="862.0"></text>
</g>
<g>
<title>loadLNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="920.8" y="867.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.8" y="878.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*) const (1 samples, 0.09%)</title><rect x="920.8" y="851.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="923.8" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.36%)</title><rect x="921.9" y="931.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.9" y="942.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.09%)</title><rect x="921.9" y="915.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.9" y="926.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="921.9" y="899.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="924.9" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.18%)</title><rect x="923.0" y="915.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.0" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="924.1" y="899.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="927.1" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::end_scopes(int, bool) (1 samples, 0.09%)</title><rect x="925.1" y="915.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.1" y="926.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.64%)</title><rect x="926.2" y="931.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="929.2" y="942.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 0.55%)</title><rect x="926.2" y="915.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="929.2" y="926.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.18%)</title><rect x="927.3" y="899.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="930.3" y="910.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="929.5" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.5" y="910.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="929.5" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="932.5" y="894.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="929.5" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.5" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.18%)</title><rect x="930.5" y="899.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="933.5" y="910.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.18%)</title><rect x="930.5" y="883.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.5" y="894.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="930.5" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.5" y="878.0"></text>
</g>
<g>
<title>ThreadLocalNode::bottom_type() const (1 samples, 0.09%)</title><rect x="931.6" y="867.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="934.6" y="878.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="932.7" y="915.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="935.7" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.36%)</title><rect x="933.8" y="931.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.8" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.36%)</title><rect x="933.8" y="915.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="936.8" y="926.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="933.8" y="899.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.8" y="910.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.18%)</title><rect x="933.8" y="883.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="936.8" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="935.9" y="899.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="938.9" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="937.0" y="899.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="940.0" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (42 samples, 3.83%)</title><rect x="938.1" y="931.0" width="45.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="941.1" y="942.0">Phas..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="938.1" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="941.1" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.27%)</title><rect x="939.1" y="915.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.1" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="941.3" y="899.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="944.3" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="941.3" y="883.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="944.3" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.36%)</title><rect x="942.4" y="915.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.4" y="926.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="943.4" y="899.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.4" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.09%)</title><rect x="945.6" y="899.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.6" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="945.6" y="883.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.6" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (9 samples, 0.82%)</title><rect x="946.7" y="915.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.7" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.73%)</title><rect x="956.4" y="915.0" width="8.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.4" y="926.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="959.6" y="899.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="962.6" y="910.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.09%)</title><rect x="960.7" y="899.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.7" y="910.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="960.7" y="883.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="963.7" y="894.0"></text>
</g>
<g>
<title>r15_RegPOper::type() const (1 samples, 0.09%)</title><rect x="960.7" y="867.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="963.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="961.8" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="964.8" y="910.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="962.8" y="899.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.8" y="910.0"></text>
</g>
<g>
<title>compN_rReg_imm_klassNode::rule() const (1 samples, 0.09%)</title><rect x="963.9" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.9" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.36%)</title><rect x="965.0" y="915.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="968.0" y="926.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="966.1" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="969.1" y="910.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.18%)</title><rect x="967.1" y="899.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.1" y="910.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.36%)</title><rect x="969.3" y="915.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.3" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="973.6" y="915.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="976.6" y="926.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="974.7" y="915.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="977.7" y="926.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.55%)</title><rect x="975.7" y="915.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="978.7" y="926.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.18%)</title><rect x="980.1" y="899.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="983.1" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="981.1" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="984.1" y="894.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="982.2" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.2" y="926.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.09%)</title><rect x="983.3" y="931.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="986.3" y="942.0"></text>
</g>
<g>
<title>Compile::Optimize() (181 samples, 16.51%)</title><rect x="984.4" y="947.0" width="194.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.4" y="958.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.46%)</title><rect x="984.4" y="931.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="987.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.46%)</title><rect x="984.4" y="915.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="987.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.09%)</title><rect x="985.4" y="899.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.09%)</title><rect x="985.4" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="988.4" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.09%)</title><rect x="985.4" y="867.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="988.4" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="985.4" y="851.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="988.4" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.09%)</title><rect x="985.4" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="988.4" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.09%)</title><rect x="985.4" y="819.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.09%)</title><rect x="985.4" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.4" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="985.4" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.4" y="798.0"></text>
</g>
<g>
<title>java_lang_invoke_MethodType::ptype_slot_count(oopDesc*) (1 samples, 0.09%)</title><rect x="985.4" y="771.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.27%)</title><rect x="986.5" y="899.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="883.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="867.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="851.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="835.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="819.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="803.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="787.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="771.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="755.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="739.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="723.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="707.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="691.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="675.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="986.5" y="659.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="579.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="563.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="989.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="499.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="989.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="467.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="387.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="355.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="989.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="323.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="307.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="989.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="291.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="275.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="989.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="243.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="227.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.5" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="211.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.5" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="195.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="989.5" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="179.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.5" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="163.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="989.5" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="147.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="989.5" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="131.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.5" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="986.5" y="115.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="989.5" y="126.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="986.5" y="99.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.5" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="643.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="990.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="595.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="579.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="563.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="499.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="483.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="435.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="403.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="387.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="307.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="990.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="259.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="227.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="211.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="195.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="179.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="163.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.6" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="147.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="131.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.6" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="987.6" y="115.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="990.6" y="126.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="988.7" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.7" y="894.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.27%)</title><rect x="989.7" y="931.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="992.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (160 samples, 14.60%)</title><rect x="993.0" y="931.0" width="172.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.0" y="942.0">PhaseIdealLoop::build_..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="993.0" y="915.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.0" y="926.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="993.0" y="899.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.0" y="910.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="993.0" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.0" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="993.0" y="867.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.09%)</title><rect x="993.0" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.0" y="862.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="993.0" y="835.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.0" y="846.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="993.0" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="996.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="994.1" y="915.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="997.1" y="926.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.18%)</title><rect x="994.1" y="899.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.1" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.46%)</title><rect x="996.2" y="915.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.2" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="999.4" y="899.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1002.4" y="910.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1000.5" y="899.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (141 samples, 12.86%)</title><rect x="1001.6" y="915.0" width="151.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.6" y="926.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.09%)</title><rect x="1002.7" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.7" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (139 samples, 12.68%)</title><rect x="1003.7" y="899.0" width="149.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.7" y="910.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (9 samples, 0.82%)</title><rect x="1004.8" y="883.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (129 samples, 11.77%)</title><rect x="1014.5" y="883.0" width="138.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1017.5" y="894.0">PhaseIdealLoop::g..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (27 samples, 2.46%)</title><rect x="1122.2" y="867.0" width="29.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.18%)</title><rect x="1151.2" y="867.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.2" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1152.3" y="851.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.27%)</title><rect x="1153.4" y="915.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.4" y="926.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.09%)</title><rect x="1154.5" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1155.5" y="899.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.5" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.46%)</title><rect x="1156.6" y="915.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.6" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1157.7" y="899.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.7" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="1157.7" y="883.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.7" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1158.8" y="899.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.8" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.18%)</title><rect x="1159.9" y="899.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1160.9" y="883.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.9" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1160.9" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.9" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1162.0" y="915.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.0" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1162.0" y="899.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="910.0"></text>
</g>
<g>
<title>SubINode::sub(Type const*, Type const*) const (1 samples, 0.09%)</title><rect x="1163.1" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.1" y="894.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1163.1" y="867.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.1" y="878.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.09%)</title><rect x="1164.2" y="915.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.2" y="926.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 1.09%)</title><rect x="1165.2" y="931.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.2" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 1.09%)</title><rect x="1165.2" y="915.0" width="13.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.2" y="926.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1165.2" y="899.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.2" y="910.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1165.2" y="883.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.2" y="894.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1165.2" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.2" y="878.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="1165.2" y="851.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1168.2" y="862.0"></text>
</g>
<g>
<title>BoolNode::Opcode() const (1 samples, 0.09%)</title><rect x="1166.3" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="910.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1167.4" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.4" y="910.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.18%)</title><rect x="1168.5" y="899.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="910.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1169.5" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="894.0"></text>
</g>
<g>
<title>CmpPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1169.5" y="867.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.5" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.27%)</title><rect x="1170.6" y="899.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.6" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1172.8" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="894.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.8" y="867.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="878.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.9" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="910.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1173.9" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="894.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1174.9" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="910.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1176.0" y="899.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="910.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.18%)</title><rect x="1176.0" y="883.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1176.0" y="867.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.18%)</title><rect x="1176.0" y="851.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="835.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="803.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="787.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.0" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.0" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.0" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.0" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="579.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="547.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.0" y="558.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1176.0" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="542.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1176.0" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.0" y="526.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1177.1" y="835.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="846.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1177.1" y="819.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1178.2" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="942.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1178.2" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="926.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.09%)</title><rect x="1178.2" y="899.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1178.2" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.64%)</title><rect x="1179.2" y="947.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.64%)</title><rect x="1179.2" y="931.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.64%)</title><rect x="1179.2" y="915.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.64%)</title><rect x="1179.2" y="899.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.64%)</title><rect x="1179.2" y="883.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.64%)</title><rect x="1179.2" y="867.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.64%)</title><rect x="1179.2" y="851.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.64%)</title><rect x="1179.2" y="835.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.64%)</title><rect x="1179.2" y="819.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.64%)</title><rect x="1179.2" y="803.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.64%)</title><rect x="1179.2" y="787.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.64%)</title><rect x="1179.2" y="771.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="782.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.2" y="755.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="766.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.2" y="739.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.2" y="750.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1179.2" y="723.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1179.2" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1179.2" y="691.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.2" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1179.2" y="659.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.2" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.2" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1179.2" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.2" y="638.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1179.2" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1179.2" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1179.2" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.2" y="590.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1179.2" y="563.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.2" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1179.2" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.2" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1179.2" y="515.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.2" y="526.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.09%)</title><rect x="1179.2" y="499.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.55%)</title><rect x="1180.3" y="755.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.55%)</title><rect x="1180.3" y="739.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1180.3" y="723.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1180.3" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.09%)</title><rect x="1180.3" y="691.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.09%)</title><rect x="1180.3" y="675.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.46%)</title><rect x="1181.4" y="723.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.46%)</title><rect x="1181.4" y="707.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.46%)</title><rect x="1181.4" y="691.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.46%)</title><rect x="1181.4" y="675.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1181.4" y="643.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1181.4" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1181.4" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1181.4" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.4" y="579.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1181.4" y="563.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1181.4" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="531.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1181.4" y="515.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.4" y="499.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.4" y="483.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="494.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1181.4" y="467.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.4" y="435.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.4" y="419.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.09%)</title><rect x="1181.4" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.09%)</title><rect x="1181.4" y="387.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.4" y="371.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1182.5" y="659.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1182.5" y="643.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1182.5" y="627.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1182.5" y="611.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1182.5" y="595.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1182.5" y="579.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.5" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.18%)</title><rect x="1182.5" y="563.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.5" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1182.5" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1182.5" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::ciTypeFlow(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1182.5" y="499.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_method_blocks() (1 samples, 0.09%)</title><rect x="1182.5" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>ciMethodBlocks::ciMethodBlocks(Arena*, ciMethod*) (1 samples, 0.09%)</title><rect x="1182.5" y="467.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>ciMethodBlocks::do_analysis() (1 samples, 0.09%)</title><rect x="1182.5" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1183.5" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.5" y="558.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1183.5" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.5" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1183.5" y="515.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.5" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1183.5" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.5" y="483.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.5" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1183.5" y="467.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1183.5" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.5" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1183.5" y="435.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.5" y="446.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1183.5" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.5" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="403.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.5" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.5" y="398.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1183.5" y="371.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.5" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1183.5" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="366.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.5" y="339.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1184.6" y="563.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1184.6" y="547.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1184.6" y="531.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1184.6" y="515.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1184.6" y="499.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1184.6" y="483.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="467.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.6" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.6" y="435.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.6" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.6" y="403.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.6" y="387.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="371.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="339.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.6" y="323.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.6" y="307.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.6" y="291.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.6" y="275.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.6" y="259.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="243.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.6" y="227.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.6" y="211.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.6" y="195.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.6" y="179.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.6" y="163.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1184.6" y="147.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1184.6" y="131.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1184.6" y="115.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1184.6" y="99.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1184.6" y="83.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.6" y="94.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1184.6" y="67.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="78.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_receiver_for_speculation(Node*) (1 samples, 0.09%)</title><rect x="1184.6" y="51.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.6" y="62.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.09%)</title><rect x="1184.6" y="35.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.7" y="467.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.7" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.7" y="435.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.7" y="419.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.7" y="403.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.7" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.7" y="371.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1185.7" y="355.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1185.7" y="339.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1185.7" y="323.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1185.7" y="307.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.7" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1185.7" y="291.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1185.7" y="275.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="286.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="1186.8" y="947.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.8" y="958.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1186.8" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.8" y="942.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.8" y="1043.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.8" y="1054.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.8" y="1027.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.8" y="1038.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.18%)</title><rect x="1187.8" y="1011.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.8" y="1022.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.18%)</title><rect x="1187.8" y="995.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="1006.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.18%)</title><rect x="1187.8" y="979.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.8" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.18%)</title><rect x="1187.8" y="963.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1187.8" y="947.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.8" y="958.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.09%)</title><rect x="1187.8" y="931.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.8" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="947.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="958.0"></text>
</g>
</g>
</svg>

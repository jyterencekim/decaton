<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (226 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 7.96%)</title><rect x="10.0" y="1251.0" width="94.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (18 samples, 7.96%)</title><rect x="10.0" y="1235.0" width="94.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.44%)</title><rect x="10.0" y="1219.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.44%)</title><rect x="10.0" y="1203.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.44%)</title><rect x="10.0" y="1187.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.44%)</title><rect x="10.0" y="1171.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$299/1369844392.accept (1 samples, 0.44%)</title><rect x="10.0" y="1155.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateLastSeenEpochIfNewer (1 samples, 0.44%)</title><rect x="10.0" y="1139.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.ifPresent (1 samples, 0.44%)</title><rect x="10.0" y="1123.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.44%)</title><rect x="10.0" y="1107.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.44%)</title><rect x="10.0" y="1091.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.44%)</title><rect x="10.0" y="1075.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.44%)</title><rect x="10.0" y="1059.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.44%)</title><rect x="10.0" y="1043.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.44%)</title><rect x="10.0" y="1027.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.44%)</title><rect x="10.0" y="1011.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.44%)</title><rect x="10.0" y="995.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::pending_list_lock() (1 samples, 0.44%)</title><rect x="10.0" y="979.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 7.52%)</title><rect x="15.2" y="1219.0" width="88.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="1230.0">com/lineco..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.21%)</title><rect x="15.2" y="1203.0" width="26.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.2" y="1214.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/2078194333.accept (4 samples, 1.77%)</title><rect x="15.2" y="1187.0" width="20.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.77%)</title><rect x="15.2" y="1171.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 1.33%)</title><rect x="15.2" y="1155.0" width="15.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 1.33%)</title><rect x="15.2" y="1139.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 1.33%)</title><rect x="15.2" y="1123.0" width="15.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.33%)</title><rect x="15.2" y="1107.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.33%)</title><rect x="15.2" y="1091.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.88%)</title><rect x="20.4" y="1075.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.44%)</title><rect x="20.4" y="1059.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.44%)</title><rect x="20.4" y="1043.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.44%)</title><rect x="20.4" y="1027.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.44%)</title><rect x="25.7" y="1059.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.44%)</title><rect x="25.7" y="1043.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.44%)</title><rect x="25.7" y="1027.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.44%)</title><rect x="25.7" y="1011.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.44%)</title><rect x="30.9" y="1155.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.44%)</title><rect x="30.9" y="1139.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.44%)</title><rect x="36.1" y="1187.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.44%)</title><rect x="36.1" y="1171.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.44%)</title><rect x="36.1" y="1155.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.44%)</title><rect x="36.1" y="1139.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 5.31%)</title><rect x="41.3" y="1203.0" width="62.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.3" y="1214.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 5.31%)</title><rect x="41.3" y="1187.0" width="62.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.3" y="1198.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.54%)</title><rect x="41.3" y="1171.0" width="41.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.3" y="1182.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 3.10%)</title><rect x="41.3" y="1155.0" width="36.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.3" y="1166.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 3.10%)</title><rect x="41.3" y="1139.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.3" y="1150.0">org..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.44%)</title><rect x="41.3" y="1123.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.44%)</title><rect x="41.3" y="1107.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.44%)</title><rect x="41.3" y="1091.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.44%)</title><rect x="41.3" y="1075.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.3" y="1086.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.44%)</title><rect x="41.3" y="1059.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="44.3" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.44%)</title><rect x="41.3" y="1043.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="44.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 2.21%)</title><rect x="46.5" y="1123.0" width="26.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.5" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.88%)</title><rect x="46.5" y="1107.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.88%)</title><rect x="46.5" y="1091.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.88%)</title><rect x="46.5" y="1075.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.schemaFor (1 samples, 0.44%)</title><rect x="46.5" y="1059.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="49.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.44%)</title><rect x="51.8" y="1059.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$4.read (1 samples, 0.44%)</title><rect x="51.8" y="1043.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.33%)</title><rect x="57.0" y="1107.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 1.33%)</title><rect x="57.0" y="1091.0" width="15.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 1.33%)</title><rect x="57.0" y="1075.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.44%)</title><rect x="57.0" y="1059.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.44%)</title><rect x="57.0" y="1043.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.44%)</title><rect x="57.0" y="1027.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="60.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.44%)</title><rect x="57.0" y="1011.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.44%)</title><rect x="57.0" y="995.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.0" y="1006.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.44%)</title><rect x="57.0" y="979.0" width="5.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="60.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToStagedReceives (2 samples, 0.88%)</title><rect x="62.2" y="1059.0" width="10.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$267/1399211424.shouldBlock (1 samples, 0.44%)</title><rect x="72.7" y="1123.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.44%)</title><rect x="72.7" y="1107.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.44%)</title><rect x="72.7" y="1091.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.44%)</title><rect x="72.7" y="1075.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.44%)</title><rect x="72.7" y="1059.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.44%)</title><rect x="72.7" y="1043.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="75.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.44%)</title><rect x="72.7" y="1027.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="75.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.44%)</title><rect x="72.7" y="1011.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.44%)</title><rect x="72.7" y="995.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.44%)</title><rect x="72.7" y="979.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.44%)</title><rect x="72.7" y="963.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.44%)</title><rect x="72.7" y="947.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.44%)</title><rect x="72.7" y="931.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$268/1361647513.test (1 samples, 0.44%)</title><rect x="72.7" y="915.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.7" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$hasAvailableFetches$0 (1 samples, 0.44%)</title><rect x="72.7" y="899.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.7" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.44%)</title><rect x="72.7" y="883.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="75.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2300 (1 samples, 0.44%)</title><rect x="72.7" y="867.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="75.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.44%)</title><rect x="72.7" y="851.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.7" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.44%)</title><rect x="72.7" y="835.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="75.7" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.44%)</title><rect x="72.7" y="819.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="75.7" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.44%)</title><rect x="72.7" y="803.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="75.7" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.44%)</title><rect x="72.7" y="787.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="75.7" y="798.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.44%)</title><rect x="72.7" y="771.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="75.7" y="782.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.44%)</title><rect x="72.7" y="755.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="75.7" y="766.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.44%)</title><rect x="72.7" y="739.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="75.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1 samples, 0.44%)</title><rect x="77.9" y="1155.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.44%)</title><rect x="77.9" y="1139.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.44%)</title><rect x="77.9" y="1123.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.44%)</title><rect x="77.9" y="1107.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.44%)</title><rect x="77.9" y="1091.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.44%)</title><rect x="77.9" y="1075.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="80.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.44%)</title><rect x="83.1" y="1171.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="86.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.44%)</title><rect x="83.1" y="1155.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.44%)</title><rect x="83.1" y="1139.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.1" y="1150.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.44%)</title><rect x="83.1" y="1123.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="86.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1882916640.accept (1 samples, 0.44%)</title><rect x="83.1" y="1107.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.44%)</title><rect x="83.1" y="1091.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.44%)</title><rect x="83.1" y="1075.0" width="5.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="86.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.44%)</title><rect x="83.1" y="1059.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="86.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.33%)</title><rect x="88.3" y="1171.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 1.33%)</title><rect x="88.3" y="1155.0" width="15.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (3 samples, 1.33%)</title><rect x="88.3" y="1139.0" width="15.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 1.33%)</title><rect x="88.3" y="1123.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 1.33%)</title><rect x="88.3" y="1107.0" width="15.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (3 samples, 1.33%)</title><rect x="88.3" y="1091.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (3 samples, 1.33%)</title><rect x="88.3" y="1075.0" width="15.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.44%)</title><rect x="88.3" y="1059.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (2 samples, 0.88%)</title><rect x="93.5" y="1059.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.sizeOf (2 samples, 0.88%)</title><rect x="93.5" y="1043.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="96.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.sizeOf (2 samples, 0.88%)</title><rect x="93.5" y="1027.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.44%)</title><rect x="93.5" y="1011.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.44%)</title><rect x="93.5" y="995.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="96.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.44%)</title><rect x="93.5" y="979.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.sizeOf (1 samples, 0.44%)</title><rect x="98.8" y="1011.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8Length (1 samples, 0.44%)</title><rect x="98.8" y="995.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="101.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/Thread.run (119 samples, 52.65%)</title><rect x="104.0" y="1251.0" width="621.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.0" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (119 samples, 52.65%)</title><rect x="104.0" y="1235.0" width="621.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.0" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (119 samples, 52.65%)</title><rect x="104.0" y="1219.0" width="621.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.0" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1847818293.run (115 samples, 50.88%)</title><rect x="104.0" y="1203.0" width="600.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.0" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/184781829..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (115 samples, 50.88%)</title><rect x="104.0" y="1187.0" width="600.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="107.0" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (115 samples, 50.88%)</title><rect x="104.0" y="1171.0" width="600.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.0" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (115 samples, 50.88%)</title><rect x="104.0" y="1155.0" width="600.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.0" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 1.33%)</title><rect x="114.4" y="1139.0" width="15.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.33%)</title><rect x="114.4" y="1123.0" width="15.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.33%)</title><rect x="114.4" y="1107.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="117.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.44%)</title><rect x="114.4" y="1091.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.88%)</title><rect x="119.6" y="1091.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="122.6" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.44%)</title><rect x="124.9" y="1075.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="127.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.44%)</title><rect x="124.9" y="1059.0" width="5.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="127.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (7 samples, 3.10%)</title><rect x="130.1" y="1139.0" width="36.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.1" y="1150.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.33%)</title><rect x="151.0" y="1123.0" width="15.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="154.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.33%)</title><rect x="151.0" y="1107.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="154.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.33%)</title><rect x="151.0" y="1091.0" width="15.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="154.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.33%)</title><rect x="151.0" y="1075.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1304157311.accept (3 samples, 1.33%)</title><rect x="151.0" y="1059.0" width="15.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="154.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (3 samples, 1.33%)</title><rect x="151.0" y="1043.0" width="15.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="154.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.33%)</title><rect x="151.0" y="1027.0" width="15.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.33%)</title><rect x="151.0" y="1011.0" width="15.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="154.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.33%)</title><rect x="151.0" y="995.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.88%)</title><rect x="151.0" y="979.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="154.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.88%)</title><rect x="151.0" y="963.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="154.0" y="974.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.88%)</title><rect x="151.0" y="947.0" width="10.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="154.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.44%)</title><rect x="161.4" y="979.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.4" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1017521923.accept (1 samples, 0.44%)</title><rect x="161.4" y="963.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (16 samples, 7.08%)</title><rect x="166.6" y="1139.0" width="83.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.6" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (16 samples, 7.08%)</title><rect x="166.6" y="1123.0" width="83.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.6" y="1134.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (16 samples, 7.08%)</title><rect x="166.6" y="1107.0" width="83.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.6" y="1118.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 7.08%)</title><rect x="166.6" y="1091.0" width="83.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.6" y="1102.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 7.08%)</title><rect x="166.6" y="1075.0" width="83.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="169.6" y="1086.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 7.08%)</title><rect x="166.6" y="1059.0" width="83.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.6" y="1070.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 1.77%)</title><rect x="166.6" y="1043.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.88%)</title><rect x="166.6" y="1027.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.88%)</title><rect x="166.6" y="1011.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.88%)</title><rect x="166.6" y="995.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.88%)</title><rect x="166.6" y="979.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.6" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.44%)</title><rect x="171.9" y="963.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.88%)</title><rect x="177.1" y="1027.0" width="10.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="180.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.88%)</title><rect x="177.1" y="1011.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="180.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.88%)</title><rect x="177.1" y="995.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="180.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.88%)</title><rect x="177.1" y="979.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (12 samples, 5.31%)</title><rect x="187.5" y="1043.0" width="62.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="190.5" y="1054.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.44%)</title><rect x="187.5" y="1027.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.44%)</title><rect x="187.5" y="1011.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="190.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.44%)</title><rect x="192.7" y="1027.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.44%)</title><rect x="192.7" y="1011.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.44%)</title><rect x="192.7" y="995.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.44%)</title><rect x="192.7" y="979.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.44%)</title><rect x="198.0" y="1027.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.44%)</title><rect x="198.0" y="1011.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.0" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.44%)</title><rect x="198.0" y="995.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="201.0" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.44%)</title><rect x="198.0" y="979.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="201.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (9 samples, 3.98%)</title><rect x="203.2" y="1027.0" width="47.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="206.2" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 3.98%)</title><rect x="203.2" y="1011.0" width="47.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.2" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.77%)</title><rect x="203.2" y="995.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.77%)</title><rect x="203.2" y="979.0" width="20.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.21%)</title><rect x="224.1" y="995.0" width="26.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="227.1" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.21%)</title><rect x="224.1" y="979.0" width="26.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.1" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.21%)</title><rect x="224.1" y="963.0" width="26.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.1" y="974.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.88%)</title><rect x="224.1" y="947.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.88%)</title><rect x="234.5" y="947.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.88%)</title><rect x="234.5" y="931.0" width="10.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.88%)</title><rect x="234.5" y="915.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.88%)</title><rect x="234.5" y="899.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.5" y="910.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.88%)</title><rect x="234.5" y="883.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.44%)</title><rect x="245.0" y="947.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.44%)</title><rect x="245.0" y="931.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.44%)</title><rect x="245.0" y="915.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.44%)</title><rect x="245.0" y="899.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.0" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.44%)</title><rect x="245.0" y="883.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="245.0" y="867.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="248.0" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="245.0" y="851.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="248.0" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="245.0" y="835.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="248.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (87 samples, 38.50%)</title><rect x="250.2" y="1139.0" width="454.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.2" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipelin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (13 samples, 5.75%)</title><rect x="260.6" y="1123.0" width="67.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.6" y="1134.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 5.31%)</title><rect x="265.8" y="1107.0" width="62.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.8" y="1118.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 5.31%)</title><rect x="265.8" y="1091.0" width="62.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.8" y="1102.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.88%)</title><rect x="265.8" y="1075.0" width="10.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.88%)</title><rect x="265.8" y="1059.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.88%)</title><rect x="265.8" y="1043.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.88%)</title><rect x="265.8" y="1027.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.88%)</title><rect x="265.8" y="1011.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.44%)</title><rect x="276.3" y="1075.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 3.98%)</title><rect x="281.5" y="1075.0" width="47.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.5" y="1086.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.44%)</title><rect x="286.7" y="1059.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.44%)</title><rect x="286.7" y="1043.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="289.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 3.10%)</title><rect x="291.9" y="1059.0" width="36.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.9" y="1070.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (15 samples, 6.64%)</title><rect x="328.5" y="1123.0" width="78.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.5" y="1134.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (15 samples, 6.64%)</title><rect x="328.5" y="1107.0" width="78.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.5" y="1118.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 2.65%)</title><rect x="338.9" y="1091.0" width="31.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.9" y="1102.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.33%)</title><rect x="344.2" y="1075.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="347.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.33%)</title><rect x="344.2" y="1059.0" width="15.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.33%)</title><rect x="344.2" y="1043.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.33%)</title><rect x="344.2" y="1027.0" width="15.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="347.2" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.33%)</title><rect x="344.2" y="1011.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="347.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.33%)</title><rect x="344.2" y="995.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="347.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.88%)</title><rect x="344.2" y="979.0" width="10.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="347.2" y="990.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.88%)</title><rect x="344.2" y="963.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="347.2" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.88%)</title><rect x="344.2" y="947.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="347.2" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.44%)</title><rect x="344.2" y="931.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="347.2" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.44%)</title><rect x="344.2" y="915.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="347.2" y="926.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.44%)</title><rect x="349.4" y="931.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="352.4" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.44%)</title><rect x="354.6" y="979.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="357.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.44%)</title><rect x="354.6" y="963.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="357.6" y="974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.88%)</title><rect x="359.8" y="1075.0" width="10.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="362.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.44%)</title><rect x="370.3" y="1091.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="373.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.44%)</title><rect x="370.3" y="1075.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.3" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.44%)</title><rect x="370.3" y="1059.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.3" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.65%)</title><rect x="375.5" y="1091.0" width="31.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.5" y="1102.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.65%)</title><rect x="375.5" y="1075.0" width="31.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.5" y="1086.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.44%)</title><rect x="380.7" y="1059.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="383.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.44%)</title><rect x="380.7" y="1043.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="383.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.44%)</title><rect x="380.7" y="1027.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.44%)</title><rect x="380.7" y="1011.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.44%)</title><rect x="380.7" y="995.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="383.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.77%)</title><rect x="385.9" y="1059.0" width="20.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.77%)</title><rect x="385.9" y="1043.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.77%)</title><rect x="385.9" y="1027.0" width="20.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="388.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.44%)</title><rect x="401.6" y="1011.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="404.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (55 samples, 24.34%)</title><rect x="406.8" y="1123.0" width="287.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.8" y="1134.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (54 samples, 23.89%)</title><rect x="412.0" y="1107.0" width="282.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.0" y="1118.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/2082248242.process (43 samples, 19.03%)</title><rect x="427.7" y="1091.0" width="224.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.7" y="1102.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (43 samples, 19.03%)</title><rect x="427.7" y="1075.0" width="224.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="430.7" y="1086.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (43 samples, 19.03%)</title><rect x="427.7" y="1059.0" width="224.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="430.7" y="1070.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.44%)</title><rect x="432.9" y="1043.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="435.9" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.44%)</title><rect x="432.9" y="1027.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.9" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.44%)</title><rect x="432.9" y="1011.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="435.9" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.44%)</title><rect x="432.9" y="995.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="435.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.44%)</title><rect x="432.9" y="979.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.44%)</title><rect x="432.9" y="963.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (41 samples, 18.14%)</title><rect x="438.1" y="1043.0" width="214.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="441.1" y="1054.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>java/lang/Thread.sleep (41 samples, 18.14%)</title><rect x="438.1" y="1027.0" width="214.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.1" y="1038.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 15.49%)</title><rect x="464.2" y="1011.0" width="182.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="467.2" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.44%)</title><rect x="479.9" y="995.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="482.9" y="1006.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.44%)</title><rect x="485.1" y="995.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="488.1" y="1006.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (30 samples, 13.27%)</title><rect x="490.4" y="995.0" width="156.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="493.4" y="1006.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.88%)</title><rect x="526.9" y="979.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="529.9" y="990.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.44%)</title><rect x="537.3" y="979.0" width="5.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="540.3" y="990.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.44%)</title><rect x="537.3" y="963.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="540.3" y="974.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.21%)</title><rect x="542.6" y="979.0" width="26.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="545.6" y="990.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 4.42%)</title><rect x="568.7" y="979.0" width="52.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="571.7" y="990.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.44%)</title><rect x="620.9" y="979.0" width="5.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="623.9" y="990.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.44%)</title><rect x="626.1" y="979.0" width="5.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="629.1" y="990.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.44%)</title><rect x="631.3" y="979.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="634.3" y="990.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.44%)</title><rect x="636.5" y="979.0" width="5.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="639.5" y="990.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.44%)</title><rect x="641.8" y="979.0" width="5.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="644.8" y="990.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.44%)</title><rect x="647.0" y="1011.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="650.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.44%)</title><rect x="652.2" y="1091.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.44%)</title><rect x="652.2" y="1075.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="655.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.44%)</title><rect x="652.2" y="1059.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="655.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.44%)</title><rect x="652.2" y="1043.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="655.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.44%)</title><rect x="652.2" y="1027.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.44%)</title><rect x="652.2" y="1011.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.44%)</title><rect x="657.4" y="1091.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="660.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.44%)</title><rect x="657.4" y="1075.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.88%)</title><rect x="662.7" y="1091.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="665.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.88%)</title><rect x="662.7" y="1075.0" width="10.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="665.7" y="1086.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.88%)</title><rect x="662.7" y="1059.0" width="10.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="665.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.33%)</title><rect x="673.1" y="1091.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.44%)</title><rect x="688.8" y="1091.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="691.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.44%)</title><rect x="688.8" y="1075.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.44%)</title><rect x="688.8" y="1059.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="691.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.44%)</title><rect x="688.8" y="1043.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.44%)</title><rect x="688.8" y="1027.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.44%)</title><rect x="688.8" y="1011.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="691.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.44%)</title><rect x="694.0" y="1123.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="697.0" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.44%)</title><rect x="694.0" y="1107.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="697.0" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.44%)</title><rect x="694.0" y="1091.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="697.0" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.44%)</title><rect x="694.0" y="1075.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="697.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.44%)</title><rect x="694.0" y="1059.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.0" y="1070.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.44%)</title><rect x="694.0" y="1043.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="697.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.44%)</title><rect x="699.2" y="1123.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.44%)</title><rect x="699.2" y="1107.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.44%)</title><rect x="699.2" y="1091.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="702.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.44%)</title><rect x="699.2" y="1075.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="702.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1195620111.accept (1 samples, 0.44%)</title><rect x="699.2" y="1059.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="702.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (1 samples, 0.44%)</title><rect x="699.2" y="1043.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.2" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.44%)</title><rect x="699.2" y="1027.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="702.2" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.44%)</title><rect x="699.2" y="1011.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="702.2" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.44%)</title><rect x="699.2" y="995.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 1.77%)</title><rect x="704.4" y="1203.0" width="20.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="707.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.77%)</title><rect x="704.4" y="1187.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="707.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.88%)</title><rect x="714.9" y="1171.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="717.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.88%)</title><rect x="714.9" y="1155.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.88%)</title><rect x="714.9" y="1139.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="717.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.88%)</title><rect x="714.9" y="1123.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="717.9" y="1134.0"></text>
</g>
<g>
<title>start_thread (89 samples, 39.38%)</title><rect x="725.3" y="1251.0" width="464.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="728.3" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (89 samples, 39.38%)</title><rect x="725.3" y="1235.0" width="464.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="728.3" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.87%)</title><rect x="725.3" y="1219.0" width="57.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.3" y="1230.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.44%)</title><rect x="725.3" y="1203.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="728.3" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.44%)</title><rect x="725.3" y="1187.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.3" y="1198.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.44%)</title><rect x="725.3" y="1171.0" width="5.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="728.3" y="1182.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.42%)</title><rect x="730.5" y="1203.0" width="52.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="733.5" y="1214.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 4.42%)</title><rect x="730.5" y="1187.0" width="52.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="733.5" y="1198.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 3.98%)</title><rect x="730.5" y="1171.0" width="47.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="733.5" y="1182.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.77%)</title><rect x="751.4" y="1155.0" width="20.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="754.4" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.88%)</title><rect x="761.9" y="1139.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="764.9" y="1150.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.44%)</title><rect x="767.1" y="1123.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.1" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.44%)</title><rect x="772.3" y="1155.0" width="5.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="775.3" y="1166.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.44%)</title><rect x="777.5" y="1171.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="780.5" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (78 samples, 34.51%)</title><rect x="782.7" y="1219.0" width="407.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.7" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (78 samples, 34.51%)</title><rect x="782.7" y="1203.0" width="407.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="785.7" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (78 samples, 34.51%)</title><rect x="782.7" y="1187.0" width="407.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="785.7" y="1198.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (78 samples, 34.51%)</title><rect x="782.7" y="1171.0" width="407.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="785.7" y="1182.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (75 samples, 33.19%)</title><rect x="782.7" y="1155.0" width="391.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.7" y="1166.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (75 samples, 33.19%)</title><rect x="782.7" y="1139.0" width="391.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.7" y="1150.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 17.26%)</title><rect x="782.7" y="1123.0" width="203.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="785.7" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.44%)</title><rect x="782.7" y="1107.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="785.7" y="1118.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.44%)</title><rect x="788.0" y="1107.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.0" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.44%)</title><rect x="788.0" y="1091.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.0" y="1102.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.88%)</title><rect x="793.2" y="1107.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="796.2" y="1118.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.44%)</title><rect x="798.4" y="1091.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="801.4" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.44%)</title><rect x="798.4" y="1075.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="801.4" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.77%)</title><rect x="803.6" y="1107.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="806.6" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.44%)</title><rect x="803.6" y="1091.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="806.6" y="1102.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.44%)</title><rect x="803.6" y="1075.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="806.6" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.33%)</title><rect x="808.8" y="1091.0" width="15.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="811.8" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.33%)</title><rect x="808.8" y="1075.0" width="15.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.8" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.88%)</title><rect x="824.5" y="1107.0" width="10.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="827.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.88%)</title><rect x="824.5" y="1091.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="827.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.44%)</title><rect x="824.5" y="1075.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="827.5" y="1086.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.44%)</title><rect x="824.5" y="1059.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="827.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.44%)</title><rect x="829.7" y="1075.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="832.7" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (2 samples, 0.88%)</title><rect x="835.0" y="1107.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="838.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 11.95%)</title><rect x="845.4" y="1107.0" width="141.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.4" y="1118.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.44%)</title><rect x="845.4" y="1091.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.4" y="1102.0"></text>
</g>
<g>
<title>immP0Oper::clone(Compile*) const (1 samples, 0.44%)</title><rect x="845.4" y="1075.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="848.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.44%)</title><rect x="850.6" y="1091.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.44%)</title><rect x="850.6" y="1075.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.6" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.44%)</title><rect x="850.6" y="1059.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="853.6" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.88%)</title><rect x="855.8" y="1091.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="858.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.88%)</title><rect x="855.8" y="1075.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="858.8" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.88%)</title><rect x="855.8" y="1059.0" width="10.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="858.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.77%)</title><rect x="866.3" y="1091.0" width="20.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="869.3" y="1102.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.44%)</title><rect x="871.5" y="1075.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="874.5" y="1086.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.44%)</title><rect x="871.5" y="1059.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="874.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.44%)</title><rect x="876.7" y="1075.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="879.7" y="1086.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.44%)</title><rect x="876.7" y="1059.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="879.7" y="1070.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.44%)</title><rect x="876.7" y="1043.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="879.7" y="1054.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.44%)</title><rect x="881.9" y="1075.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="884.9" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 2.65%)</title><rect x="887.2" y="1091.0" width="31.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="890.2" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.88%)</title><rect x="897.6" y="1075.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="900.6" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.44%)</title><rect x="902.8" y="1059.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.8" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.88%)</title><rect x="908.1" y="1075.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="911.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.44%)</title><rect x="918.5" y="1091.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.88%)</title><rect x="923.7" y="1091.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="926.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.44%)</title><rect x="934.2" y="1091.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.2" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.77%)</title><rect x="939.4" y="1091.0" width="20.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.4" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.77%)</title><rect x="939.4" y="1075.0" width="20.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.4" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.77%)</title><rect x="939.4" y="1059.0" width="20.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.4" y="1070.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.44%)</title><rect x="939.4" y="1043.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="942.4" y="1054.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.44%)</title><rect x="944.6" y="1043.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.6" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.44%)</title><rect x="949.8" y="1043.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.44%)</title><rect x="955.0" y="1043.0" width="5.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="958.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.88%)</title><rect x="960.3" y="1091.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="963.3" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.44%)</title><rect x="965.5" y="1075.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="968.5" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.33%)</title><rect x="970.7" y="1091.0" width="15.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="973.7" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.44%)</title><rect x="981.2" y="1075.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="984.2" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 14.60%)</title><rect x="986.4" y="1123.0" width="172.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.4" y="1134.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.44%)</title><rect x="986.4" y="1107.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="989.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.44%)</title><rect x="986.4" y="1091.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.44%)</title><rect x="986.4" y="1075.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="989.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.44%)</title><rect x="986.4" y="1059.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="989.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.44%)</title><rect x="986.4" y="1043.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="989.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.44%)</title><rect x="986.4" y="1027.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="989.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (26 samples, 11.50%)</title><rect x="991.6" y="1107.0" width="135.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.6" y="1118.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.44%)</title><rect x="991.6" y="1091.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="994.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.44%)</title><rect x="991.6" y="1075.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="994.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.44%)</title><rect x="991.6" y="1059.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.44%)</title><rect x="996.8" y="1091.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="999.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.77%)</title><rect x="1002.0" y="1091.0" width="20.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 7.52%)</title><rect x="1022.9" y="1091.0" width="88.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.9" y="1102.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 7.52%)</title><rect x="1022.9" y="1075.0" width="88.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1025.9" y="1086.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (16 samples, 7.08%)</title><rect x="1028.1" y="1059.0" width="83.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.1" y="1070.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.44%)</title><rect x="1106.5" y="1043.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.44%)</title><rect x="1111.7" y="1091.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.88%)</title><rect x="1116.9" y="1091.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (2 samples, 0.88%)</title><rect x="1116.9" y="1075.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1119.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.44%)</title><rect x="1122.1" y="1059.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.21%)</title><rect x="1127.3" y="1107.0" width="26.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.3" y="1118.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.21%)</title><rect x="1127.3" y="1091.0" width="26.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.3" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.88%)</title><rect x="1127.3" y="1075.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.44%)</title><rect x="1132.6" y="1059.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.6" y="1070.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.44%)</title><rect x="1132.6" y="1043.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.6" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1137.8" y="1075.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.8" y="1086.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.44%)</title><rect x="1137.8" y="1059.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.8" y="1070.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1143.0" y="1075.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.44%)</title><rect x="1143.0" y="1059.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.0" y="1070.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.44%)</title><rect x="1143.0" y="1043.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.0" y="1054.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.44%)</title><rect x="1148.2" y="1075.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.2" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.44%)</title><rect x="1153.5" y="1107.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.5" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.44%)</title><rect x="1153.5" y="1091.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.44%)</title><rect x="1153.5" y="1075.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.5" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.44%)</title><rect x="1153.5" y="1059.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="1070.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.44%)</title><rect x="1153.5" y="1043.0" width="5.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1156.5" y="1054.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.44%)</title><rect x="1153.5" y="1027.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1158.7" y="1123.0" width="10.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.7" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1158.7" y="1107.0" width="10.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1158.7" y="1091.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1158.7" y="1075.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1158.7" y="1059.0" width="10.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1158.7" y="1043.0" width="10.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.7" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1158.7" y="1027.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.7" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1158.7" y="1011.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1158.7" y="995.0" width="10.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1158.7" y="979.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1158.7" y="963.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1158.7" y="947.0" width="10.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1158.7" y="931.0" width="10.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1158.7" y="915.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1158.7" y="899.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1158.7" y="883.0" width="10.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1158.7" y="867.0" width="10.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1158.7" y="851.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1158.7" y="835.0" width="10.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.88%)</title><rect x="1158.7" y="819.0" width="10.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.88%)</title><rect x="1158.7" y="803.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.88%)</title><rect x="1158.7" y="787.0" width="10.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.88%)</title><rect x="1158.7" y="771.0" width="10.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.88%)</title><rect x="1158.7" y="755.0" width="10.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.88%)</title><rect x="1158.7" y="739.0" width="10.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="723.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="707.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="691.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="675.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1158.7" y="659.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1158.7" y="643.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="627.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="611.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="595.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="579.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1158.7" y="563.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1158.7" y="547.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="531.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="515.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="499.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="483.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1158.7" y="467.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1158.7" y="451.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="435.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="419.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="403.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="387.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1158.7" y="371.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1158.7" y="355.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="339.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="323.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="307.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="291.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1158.7" y="275.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1158.7" y="259.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="243.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="227.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="211.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="195.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.44%)</title><rect x="1158.7" y="179.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.44%)</title><rect x="1158.7" y="163.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.7" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1158.7" y="147.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.7" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1158.7" y="131.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1158.7" y="115.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.44%)</title><rect x="1158.7" y="99.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.7" y="110.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.44%)</title><rect x="1158.7" y="83.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.7" y="94.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.44%)</title><rect x="1158.7" y="67.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.7" y="78.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.44%)</title><rect x="1158.7" y="51.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1161.7" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.44%)</title><rect x="1158.7" y="35.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1163.9" y="723.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.44%)</title><rect x="1163.9" y="707.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.44%)</title><rect x="1163.9" y="691.0" width="5.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.44%)</title><rect x="1163.9" y="675.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.9" y="686.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.44%)</title><rect x="1163.9" y="659.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.9" y="670.0"></text>
</g>
<g>
<title>RegionNode::Value(PhaseTransform*) const (1 samples, 0.44%)</title><rect x="1163.9" y="643.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.9" y="654.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.44%)</title><rect x="1169.1" y="1123.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.1" y="1134.0"></text>
</g>
<g>
<title>Compile::update_dead_node_list(Unique_Node_List&amp;) (1 samples, 0.44%)</title><rect x="1169.1" y="1107.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.1" y="1118.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.33%)</title><rect x="1174.3" y="1155.0" width="15.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.33%)</title><rect x="1174.3" y="1139.0" width="15.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.3" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.33%)</title><rect x="1174.3" y="1123.0" width="15.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.88%)</title><rect x="1174.3" y="1107.0" width="10.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.88%)</title><rect x="1174.3" y="1091.0" width="10.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.3" y="1102.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.88%)</title><rect x="1174.3" y="1075.0" width="10.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.3" y="1086.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (2 samples, 0.88%)</title><rect x="1174.3" y="1059.0" width="10.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.3" y="1070.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (2 samples, 0.88%)</title><rect x="1174.3" y="1043.0" width="10.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.3" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::combine_spilled_intervals(Interval*) (1 samples, 0.44%)</title><rect x="1179.6" y="1027.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="1038.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.44%)</title><rect x="1184.8" y="1107.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.8" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.44%)</title><rect x="1184.8" y="1091.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.8" y="1102.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.44%)</title><rect x="1184.8" y="1075.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.8" y="1086.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.44%)</title><rect x="1184.8" y="1059.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.8" y="1070.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.44%)</title><rect x="1184.8" y="1043.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.8" y="1054.0"></text>
</g>
</g>
</svg>

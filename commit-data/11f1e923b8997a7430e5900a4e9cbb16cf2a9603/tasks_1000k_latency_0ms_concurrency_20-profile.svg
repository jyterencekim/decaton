<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="645"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="645"> </text>
<g id="frames">
<g>
<title>all (871 samples, 100.00%)</title><rect x="10.0" y="611.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="622.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (185 samples, 21.24%)</title><rect x="10.0" y="595.0" width="250.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="606.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (185 samples, 21.24%)</title><rect x="10.0" y="579.0" width="250.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="590.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (184 samples, 21.13%)</title><rect x="10.0" y="563.0" width="249.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="574.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.23%)</title><rect x="10.0" y="547.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.23%)</title><rect x="10.0" y="531.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.23%)</title><rect x="10.0" y="515.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.23%)</title><rect x="10.0" y="499.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.23%)</title><rect x="10.0" y="483.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.23%)</title><rect x="10.0" y="467.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.23%)</title><rect x="10.0" y="451.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="10.0" y="435.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="11.4" y="435.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="11.4" y="419.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.4" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="11.4" y="403.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.4" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$273/1150945486.test (1 samples, 0.11%)</title><rect x="11.4" y="387.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.4" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$72 (1 samples, 0.11%)</title><rect x="11.4" y="371.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.4" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.11%)</title><rect x="12.7" y="547.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.11%)</title><rect x="12.7" y="531.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="12.7" y="515.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="12.7" y="499.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="12.7" y="483.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.7" y="494.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="12.7" y="467.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="12.7" y="451.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.34%)</title><rect x="14.1" y="547.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.34%)</title><rect x="14.1" y="531.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.34%)</title><rect x="14.1" y="515.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/997657186.accept (3 samples, 0.34%)</title><rect x="14.1" y="499.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.34%)</title><rect x="14.1" y="483.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.34%)</title><rect x="14.1" y="467.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.1" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.34%)</title><rect x="14.1" y="451.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (141 samples, 16.19%)</title><rect x="18.1" y="547.0" width="191.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.1" y="558.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1841381632.accept (137 samples, 15.73%)</title><rect x="18.1" y="531.0" width="185.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.1" y="542.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (136 samples, 15.61%)</title><rect x="19.5" y="515.0" width="184.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="526.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.11%)</title><rect x="19.5" y="499.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (122 samples, 14.01%)</title><rect x="20.8" y="499.0" width="165.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="510.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (122 samples, 14.01%)</title><rect x="20.8" y="483.0" width="165.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.8" y="494.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (122 samples, 14.01%)</title><rect x="20.8" y="467.0" width="165.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.8" y="478.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (122 samples, 14.01%)</title><rect x="20.8" y="451.0" width="165.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.8" y="462.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (122 samples, 14.01%)</title><rect x="20.8" y="435.0" width="165.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="446.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (122 samples, 14.01%)</title><rect x="20.8" y="419.0" width="165.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.8" y="430.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (83 samples, 9.53%)</title><rect x="20.8" y="403.0" width="112.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.8" y="414.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (12 samples, 1.38%)</title><rect x="20.8" y="387.0" width="16.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.8" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (12 samples, 1.38%)</title><rect x="20.8" y="371.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.8" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (8 samples, 0.92%)</title><rect x="26.3" y="355.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (8 samples, 0.92%)</title><rect x="26.3" y="339.0" width="10.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.11%)</title><rect x="37.1" y="387.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.1" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.11%)</title><rect x="37.1" y="371.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (70 samples, 8.04%)</title><rect x="38.5" y="387.0" width="94.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.5" y="398.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (70 samples, 8.04%)</title><rect x="38.5" y="371.0" width="94.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.5" y="382.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (68 samples, 7.81%)</title><rect x="38.5" y="355.0" width="92.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.5" y="366.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (68 samples, 7.81%)</title><rect x="38.5" y="339.0" width="92.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.5" y="350.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (66 samples, 7.58%)</title><rect x="41.2" y="323.0" width="89.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="44.2" y="334.0">sun/misc/U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="42.5" y="307.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="45.5" y="318.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="43.9" y="307.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="46.9" y="318.0"></text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 6.66%)</title><rect x="45.2" y="307.0" width="78.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="48.2" y="318.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.23%)</title><rect x="45.2" y="291.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="48.2" y="302.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="47.9" y="291.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="50.9" y="302.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 5.28%)</title><rect x="49.3" y="291.0" width="62.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="52.3" y="302.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.11%)</title><rect x="111.6" y="291.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="114.6" y="302.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.92%)</title><rect x="113.0" y="291.0" width="10.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="116.0" y="302.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.57%)</title><rect x="123.8" y="307.0" width="6.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="126.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.23%)</title><rect x="130.6" y="355.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="133.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (34 samples, 3.90%)</title><rect x="133.3" y="403.0" width="46.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="136.3" y="414.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (34 samples, 3.90%)</title><rect x="133.3" y="387.0" width="46.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="136.3" y="398.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (34 samples, 3.90%)</title><rect x="133.3" y="371.0" width="46.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="136.3" y="382.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.11%)</title><rect x="179.3" y="403.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.11%)</title><rect x="179.3" y="387.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.3" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.11%)</title><rect x="179.3" y="371.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.46%)</title><rect x="180.7" y="403.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.46%)</title><rect x="180.7" y="387.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="180.7" y="371.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.11%)</title><rect x="180.7" y="355.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.34%)</title><rect x="182.1" y="371.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (2 samples, 0.23%)</title><rect x="183.4" y="355.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 1.15%)</title><rect x="186.1" y="499.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 1.15%)</title><rect x="186.1" y="483.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="198.3" y="467.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="198.3" y="451.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="198.3" y="435.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="201.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.11%)</title><rect x="198.3" y="419.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="198.3" y="403.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="201.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.34%)</title><rect x="199.7" y="499.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.7" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.34%)</title><rect x="199.7" y="483.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="202.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.34%)</title><rect x="199.7" y="467.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.23%)</title><rect x="203.7" y="531.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="206.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.23%)</title><rect x="203.7" y="515.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.23%)</title><rect x="203.7" y="499.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.23%)</title><rect x="203.7" y="483.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.7" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.11%)</title><rect x="205.1" y="467.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.23%)</title><rect x="206.4" y="531.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.23%)</title><rect x="206.4" y="515.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (37 samples, 4.25%)</title><rect x="209.2" y="547.0" width="50.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.2" y="558.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (37 samples, 4.25%)</title><rect x="209.2" y="531.0" width="50.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.2" y="542.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 2.76%)</title><rect x="210.5" y="515.0" width="32.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.5" y="526.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.11%)</title><rect x="210.5" y="499.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.5" y="510.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.11%)</title><rect x="210.5" y="483.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="213.5" y="494.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.11%)</title><rect x="210.5" y="467.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="213.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (23 samples, 2.64%)</title><rect x="211.9" y="499.0" width="31.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.9" y="510.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.64%)</title><rect x="211.9" y="483.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.9" y="494.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (21 samples, 2.41%)</title><rect x="213.2" y="467.0" width="28.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.2" y="478.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 2.41%)</title><rect x="213.2" y="451.0" width="28.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.2" y="462.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="215.9" y="435.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="218.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.38%)</title><rect x="217.3" y="435.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (8 samples, 0.92%)</title><rect x="220.0" y="419.0" width="10.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (8 samples, 0.92%)</title><rect x="220.0" y="403.0" width="10.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (8 samples, 0.92%)</title><rect x="220.0" y="387.0" width="10.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (8 samples, 0.92%)</title><rect x="220.0" y="371.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (8 samples, 0.92%)</title><rect x="220.0" y="355.0" width="10.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (8 samples, 0.92%)</title><rect x="220.0" y="339.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.0" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (8 samples, 0.92%)</title><rect x="220.0" y="323.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.11%)</title><rect x="230.8" y="419.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="230.8" y="403.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.8" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="230.8" y="387.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="233.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="230.8" y="371.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="233.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.11%)</title><rect x="232.2" y="419.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.2" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.11%)</title><rect x="232.2" y="403.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="235.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.11%)</title><rect x="232.2" y="387.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.2" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.11%)</title><rect x="232.2" y="371.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.2" y="382.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.11%)</title><rect x="232.2" y="355.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.2" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (6 samples, 0.69%)</title><rect x="233.5" y="435.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.69%)</title><rect x="233.5" y="419.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.69%)</title><rect x="233.5" y="403.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.5" y="414.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.69%)</title><rect x="233.5" y="387.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.11%)</title><rect x="241.7" y="467.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.11%)</title><rect x="241.7" y="451.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.11%)</title><rect x="241.7" y="435.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.7" y="446.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.11%)</title><rect x="241.7" y="419.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="241.7" y="403.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="244.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.69%)</title><rect x="243.0" y="515.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.69%)</title><rect x="243.0" y="499.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.69%)</title><rect x="243.0" y="483.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.0" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="243.0" y="467.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="243.0" y="451.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="243.0" y="435.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="243.0" y="419.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="243.0" y="403.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.0" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="243.0" y="387.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="246.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.23%)</title><rect x="244.4" y="467.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.23%)</title><rect x="244.4" y="451.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.4" y="462.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="245.7" y="435.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.7" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="245.7" y="419.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.7" y="430.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="245.7" y="403.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="248.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (2 samples, 0.23%)</title><rect x="247.1" y="467.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.23%)</title><rect x="247.1" y="451.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.1" y="462.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.23%)</title><rect x="247.1" y="435.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.11%)</title><rect x="247.1" y="419.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.1" y="430.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.hasNext (1 samples, 0.11%)</title><rect x="247.1" y="403.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.1" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.11%)</title><rect x="248.4" y="419.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="248.4" y="403.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.4" y="414.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.11%)</title><rect x="248.4" y="387.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.11%)</title><rect x="249.8" y="467.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.11%)</title><rect x="249.8" y="451.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.8" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="249.8" y="435.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="252.8" y="446.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="249.8" y="419.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="252.8" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="249.8" y="403.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.8" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="249.8" y="387.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.8" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="249.8" y="371.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.8" y="382.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="249.8" y="355.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.34%)</title><rect x="251.1" y="515.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.34%)</title><rect x="251.1" y="499.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.34%)</title><rect x="251.1" y="483.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.23%)</title><rect x="251.1" y="467.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.11%)</title><rect x="251.1" y="451.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="254.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.11%)</title><rect x="251.1" y="435.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="251.1" y="419.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="254.1" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="251.1" y="403.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="254.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.11%)</title><rect x="252.5" y="451.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.11%)</title><rect x="252.5" y="435.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.11%)</title><rect x="252.5" y="419.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.11%)</title><rect x="252.5" y="403.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.11%)</title><rect x="252.5" y="387.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.11%)</title><rect x="252.5" y="371.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.5" y="382.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="252.5" y="355.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="255.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.11%)</title><rect x="253.9" y="467.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.9" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.11%)</title><rect x="253.9" y="451.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.9" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.11%)</title><rect x="253.9" y="435.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.11%)</title><rect x="253.9" y="419.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.11%)</title><rect x="253.9" y="403.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.9" y="414.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.11%)</title><rect x="253.9" y="387.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.9" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="253.9" y="371.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.23%)</title><rect x="255.2" y="515.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.23%)</title><rect x="255.2" y="499.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.11%)</title><rect x="255.2" y="483.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$262/2043019173.accept (1 samples, 0.11%)</title><rect x="255.2" y="467.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.11%)</title><rect x="255.2" y="451.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.11%)</title><rect x="255.2" y="435.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.11%)</title><rect x="255.2" y="419.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.2" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="255.2" y="403.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.2" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="255.2" y="387.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.2" y="398.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.11%)</title><rect x="256.6" y="483.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.11%)</title><rect x="256.6" y="467.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.6" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="256.6" y="451.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.11%)</title><rect x="256.6" y="435.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="259.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.11%)</title><rect x="257.9" y="515.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="257.9" y="499.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="257.9" y="483.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="257.9" y="467.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.9" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="257.9" y="451.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="257.9" y="435.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.11%)</title><rect x="259.3" y="563.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (629 samples, 72.22%)</title><rect x="260.6" y="595.0" width="852.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.6" y="606.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (629 samples, 72.22%)</title><rect x="260.6" y="579.0" width="852.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.6" y="590.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (629 samples, 72.22%)</title><rect x="260.6" y="563.0" width="852.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.6" y="574.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/686324900.run (442 samples, 50.75%)</title><rect x="260.6" y="547.0" width="598.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.6" y="558.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/686324900..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (442 samples, 50.75%)</title><rect x="260.6" y="531.0" width="598.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.6" y="542.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (442 samples, 50.75%)</title><rect x="260.6" y="515.0" width="598.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.6" y="526.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="260.6" y="499.0" width="1.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="263.6" y="510.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="260.6" y="483.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="263.6" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.46%)</title><rect x="262.0" y="499.0" width="5.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="265.0" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.34%)</title><rect x="263.3" y="483.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="266.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (434 samples, 49.83%)</title><rect x="267.4" y="499.0" width="588.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.4" y="510.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.34%)</title><rect x="276.9" y="483.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.9" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.34%)</title><rect x="276.9" y="467.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.34%)</title><rect x="276.9" y="451.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.9" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.34%)</title><rect x="276.9" y="435.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.9" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (39 samples, 4.48%)</title><rect x="281.0" y="483.0" width="52.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.0" y="494.0">com/l..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.11%)</title><rect x="295.9" y="467.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.9" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.11%)</title><rect x="295.9" y="451.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.9" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$309/73153745.get$Lambda (1 samples, 0.11%)</title><rect x="295.9" y="435.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="298.9" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="295.9" y="419.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="298.9" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="295.9" y="403.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="298.9" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="295.9" y="387.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="298.9" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="295.9" y="371.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="298.9" y="382.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="295.9" y="355.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="298.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (27 samples, 3.10%)</title><rect x="297.2" y="467.0" width="36.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.2" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (27 samples, 3.10%)</title><rect x="297.2" y="451.0" width="36.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.2" y="462.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (27 samples, 3.10%)</title><rect x="297.2" y="435.0" width="36.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.2" y="446.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="297.2" y="419.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="300.2" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="297.2" y="403.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="300.2" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="297.2" y="387.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="300.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.11%)</title><rect x="298.6" y="419.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.11%)</title><rect x="298.6" y="403.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.11%)</title><rect x="298.6" y="387.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (25 samples, 2.87%)</title><rect x="299.9" y="419.0" width="33.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.9" y="430.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$309/73153745.accept (25 samples, 2.87%)</title><rect x="299.9" y="403.0" width="33.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="302.9" y="414.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (25 samples, 2.87%)</title><rect x="299.9" y="387.0" width="33.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="302.9" y="398.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (25 samples, 2.87%)</title><rect x="299.9" y="371.0" width="33.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.9" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (23 samples, 2.64%)</title><rect x="302.6" y="355.0" width="31.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.6" y="366.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (21 samples, 2.41%)</title><rect x="305.3" y="339.0" width="28.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="308.3" y="350.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 1.03%)</title><rect x="305.3" y="323.0" width="12.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 1.03%)</title><rect x="305.3" y="307.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.3" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/1099056977.accept (3 samples, 0.34%)</title><rect x="309.4" y="291.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.4" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1304833056.accept (3 samples, 0.34%)</title><rect x="313.5" y="291.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.38%)</title><rect x="317.5" y="323.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="320.5" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/1099056977.accept (1 samples, 0.11%)</title><rect x="331.1" y="307.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.1" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$85 (1 samples, 0.11%)</title><rect x="331.1" y="291.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.1" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1304833056.accept (1 samples, 0.11%)</title><rect x="332.4" y="307.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.4" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.11%)</title><rect x="333.8" y="483.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="336.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.11%)</title><rect x="333.8" y="467.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$205/1597540622.get (1 samples, 0.11%)</title><rect x="333.8" y="451.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.8" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.11%)</title><rect x="333.8" y="435.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.8" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="333.8" y="419.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="336.8" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="333.8" y="403.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="336.8" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="333.8" y="387.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.8" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="333.8" y="371.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.8" y="382.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="333.8" y="355.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="336.8" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="333.8" y="339.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="336.8" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (102 samples, 11.71%)</title><rect x="335.1" y="483.0" width="138.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.1" y="494.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (102 samples, 11.71%)</title><rect x="335.1" y="467.0" width="138.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.1" y="478.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (102 samples, 11.71%)</title><rect x="335.1" y="451.0" width="138.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.1" y="462.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (102 samples, 11.71%)</title><rect x="335.1" y="435.0" width="138.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.1" y="446.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (102 samples, 11.71%)</title><rect x="335.1" y="419.0" width="138.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="338.1" y="430.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (102 samples, 11.71%)</title><rect x="335.1" y="403.0" width="138.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.1" y="414.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (27 samples, 3.10%)</title><rect x="348.7" y="387.0" width="36.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.7" y="398.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.11%)</title><rect x="348.7" y="371.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.7" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.11%)</title><rect x="348.7" y="355.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.11%)</title><rect x="348.7" y="339.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.7" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="348.7" y="323.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.7" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.11%)</title><rect x="348.7" y="307.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.7" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="348.7" y="291.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.7" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.11%)</title><rect x="348.7" y="275.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.7" y="286.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.11%)</title><rect x="348.7" y="259.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.7" y="270.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.11%)</title><rect x="348.7" y="243.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.7" y="254.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.11%)</title><rect x="348.7" y="227.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.7" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="348.7" y="211.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="351.7" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="348.7" y="195.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="351.7" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="348.7" y="179.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="351.7" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 2.99%)</title><rect x="350.0" y="371.0" width="35.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.0" y="382.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.99%)</title><rect x="350.0" y="355.0" width="35.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.0" y="366.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="350.0" y="339.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="353.0" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="350.0" y="323.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="353.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="350.0" y="307.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="353.0" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="350.0" y="291.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="353.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (24 samples, 2.76%)</title><rect x="351.4" y="339.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.4" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (24 samples, 2.76%)</title><rect x="351.4" y="323.0" width="32.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.4" y="334.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="383.9" y="339.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="386.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.11%)</title><rect x="383.9" y="323.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="386.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.11%)</title><rect x="383.9" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="386.9" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="383.9" y="291.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="386.9" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="383.9" y="275.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="386.9" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="383.9" y="259.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="386.9" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="383.9" y="243.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="386.9" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="383.9" y="227.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="386.9" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="383.9" y="211.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="386.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (59 samples, 6.77%)</title><rect x="385.3" y="387.0" width="79.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="388.3" y="398.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.23%)</title><rect x="385.3" y="371.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="388.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.23%)</title><rect x="385.3" y="355.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.69%)</title><rect x="388.0" y="371.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="391.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.57%)</title><rect x="389.3" y="355.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="392.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.23%)</title><rect x="389.3" y="339.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.23%)</title><rect x="389.3" y="323.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="392.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.11%)</title><rect x="392.0" y="339.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.0" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.11%)</title><rect x="392.0" y="323.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="395.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.11%)</title><rect x="392.0" y="307.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="395.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.11%)</title><rect x="392.0" y="291.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.0" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.23%)</title><rect x="393.4" y="339.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.23%)</title><rect x="393.4" y="323.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.11%)</title><rect x="394.8" y="307.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.46%)</title><rect x="396.1" y="371.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.1" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.46%)</title><rect x="396.1" y="355.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="399.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.46%)</title><rect x="396.1" y="339.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.46%)</title><rect x="396.1" y="323.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="399.1" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.23%)</title><rect x="398.8" y="307.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.8" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (47 samples, 5.40%)</title><rect x="401.5" y="371.0" width="63.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.5" y="382.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (47 samples, 5.40%)</title><rect x="401.5" y="355.0" width="63.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.5" y="366.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.15%)</title><rect x="404.2" y="339.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="407.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.57%)</title><rect x="406.9" y="323.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="409.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.57%)</title><rect x="406.9" y="307.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.57%)</title><rect x="406.9" y="291.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.34%)</title><rect x="409.7" y="275.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.34%)</title><rect x="409.7" y="259.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.7" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.23%)</title><rect x="413.7" y="323.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.11%)</title><rect x="413.7" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.11%)</title><rect x="413.7" y="291.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.11%)</title><rect x="415.1" y="307.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.11%)</title><rect x="415.1" y="291.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="418.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.11%)</title><rect x="415.1" y="275.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.11%)</title><rect x="415.1" y="259.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="418.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="416.4" y="323.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="416.4" y="307.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 4.02%)</title><rect x="417.8" y="339.0" width="47.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.8" y="350.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 4.02%)</title><rect x="417.8" y="323.0" width="47.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.8" y="334.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (35 samples, 4.02%)</title><rect x="417.8" y="307.0" width="47.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.8" y="318.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.26%)</title><rect x="420.5" y="291.0" width="14.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.69%)</title><rect x="423.2" y="275.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.69%)</title><rect x="423.2" y="259.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="426.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.69%)</title><rect x="423.2" y="243.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.2" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.11%)</title><rect x="425.9" y="227.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="428.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.34%)</title><rect x="427.3" y="227.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="430.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.11%)</title><rect x="427.3" y="211.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="430.3" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.11%)</title><rect x="427.3" y="195.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="430.3" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (1 samples, 0.11%)</title><rect x="427.3" y="179.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.23%)</title><rect x="428.6" y="211.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.6" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.34%)</title><rect x="431.3" y="275.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="434.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.34%)</title><rect x="431.3" y="259.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="434.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.57%)</title><rect x="435.4" y="291.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.34%)</title><rect x="438.1" y="275.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.34%)</title><rect x="438.1" y="259.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.34%)</title><rect x="438.1" y="243.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.1" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.34%)</title><rect x="438.1" y="227.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.1" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 1.03%)</title><rect x="442.2" y="291.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="445.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 1.03%)</title><rect x="442.2" y="275.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.2" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 1.03%)</title><rect x="442.2" y="259.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.2" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 1.03%)</title><rect x="442.2" y="243.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.2" y="254.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 1.03%)</title><rect x="442.2" y="227.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.34%)</title><rect x="454.4" y="291.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.34%)</title><rect x="454.4" y="275.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="457.4" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.34%)</title><rect x="454.4" y="259.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (5 samples, 0.57%)</title><rect x="458.4" y="291.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="461.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="463.8" y="275.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.8" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="463.8" y="259.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="466.8" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="463.8" y="243.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="466.8" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="463.8" y="227.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="466.8" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="463.8" y="211.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="466.8" y="222.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="463.8" y="195.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="466.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.69%)</title><rect x="465.2" y="387.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.69%)</title><rect x="465.2" y="371.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="468.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.69%)</title><rect x="465.2" y="355.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.69%)</title><rect x="465.2" y="339.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.46%)</title><rect x="467.9" y="323.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="470.9" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (274 samples, 31.46%)</title><rect x="473.3" y="483.0" width="371.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.3" y="494.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.34%)</title><rect x="480.1" y="467.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="483.1" y="478.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.34%)</title><rect x="480.1" y="451.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="483.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (54 samples, 6.20%)</title><rect x="484.2" y="467.0" width="73.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.2" y="478.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (53 samples, 6.08%)</title><rect x="485.5" y="451.0" width="71.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="488.5" y="462.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (51 samples, 5.86%)</title><rect x="488.2" y="435.0" width="69.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="491.2" y="446.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.46%)</title><rect x="488.2" y="419.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.46%)</title><rect x="488.2" y="403.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.46%)</title><rect x="488.2" y="387.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="491.2" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.46%)</title><rect x="488.2" y="371.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="491.2" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (47 samples, 5.40%)</title><rect x="493.7" y="419.0" width="63.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.7" y="430.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (18 samples, 2.07%)</title><rect x="532.9" y="403.0" width="24.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="535.9" y="414.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.46%)</title><rect x="538.4" y="387.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="541.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.57%)</title><rect x="543.8" y="387.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="545.1" y="371.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="548.1" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.34%)</title><rect x="546.5" y="371.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="549.5" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.57%)</title><rect x="550.6" y="387.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.46%)</title><rect x="557.3" y="467.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="560.3" y="478.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.46%)</title><rect x="557.3" y="451.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="560.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (131 samples, 15.04%)</title><rect x="562.7" y="467.0" width="177.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="565.7" y="478.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (124 samples, 14.24%)</title><rect x="562.7" y="451.0" width="168.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.7" y="462.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (40 samples, 4.59%)</title><rect x="577.6" y="435.0" width="54.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="580.6" y="446.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.11%)</title><rect x="581.7" y="419.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="584.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.11%)</title><rect x="581.7" y="403.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="584.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.11%)</title><rect x="581.7" y="387.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="584.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 4.02%)</title><rect x="583.1" y="419.0" width="47.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="586.1" y="430.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (23 samples, 2.64%)</title><rect x="592.5" y="403.0" width="31.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="595.5" y="414.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.92%)</title><rect x="602.0" y="387.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.0" y="398.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 0.92%)</title><rect x="602.0" y="371.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="605.0" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.92%)</title><rect x="602.0" y="355.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="605.0" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.92%)</title><rect x="602.0" y="339.0" width="10.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.0" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.11%)</title><rect x="602.0" y="323.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.0" y="334.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="602.0" y="307.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="605.0" y="318.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.11%)</title><rect x="602.0" y="291.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="605.0" y="302.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.11%)</title><rect x="602.0" y="275.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="605.0" y="286.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.11%)</title><rect x="603.4" y="323.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.4" y="334.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.69%)</title><rect x="604.7" y="323.0" width="8.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="607.7" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.34%)</title><rect x="608.8" y="307.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="611.8" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.23%)</title><rect x="608.8" y="291.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.8" y="302.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="611.5" y="291.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="614.5" y="302.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.69%)</title><rect x="612.9" y="387.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.9" y="398.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="621.0" y="387.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="624.0" y="398.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.11%)</title><rect x="623.7" y="403.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="626.7" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.46%)</title><rect x="625.1" y="403.0" width="5.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="628.1" y="414.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="630.5" y="419.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="633.5" y="430.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.92%)</title><rect x="631.8" y="435.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.8" y="446.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.23%)</title><rect x="631.8" y="419.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="634.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="631.8" y="403.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="634.8" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="631.8" y="387.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="634.8" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="633.2" y="403.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="636.2" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="633.2" y="387.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.2" y="398.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.69%)</title><rect x="634.5" y="419.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.5" y="430.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.69%)</title><rect x="634.5" y="403.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.5" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="641.3" y="387.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.3" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="641.3" y="371.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="644.3" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="641.3" y="355.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.3" y="366.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (65 samples, 7.46%)</title><rect x="642.7" y="435.0" width="88.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="645.7" y="446.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (64 samples, 7.35%)</title><rect x="644.0" y="419.0" width="86.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.0" y="430.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 1.03%)</title><rect x="644.0" y="403.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 1.03%)</title><rect x="644.0" y="387.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 1.03%)</title><rect x="644.0" y="371.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 1.03%)</title><rect x="644.0" y="355.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.0" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (55 samples, 6.31%)</title><rect x="656.2" y="403.0" width="74.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="659.2" y="414.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (52 samples, 5.97%)</title><rect x="660.3" y="387.0" width="70.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.3" y="398.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 3.10%)</title><rect x="694.2" y="371.0" width="36.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="697.2" y="382.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.11%)</title><rect x="717.2" y="355.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="720.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.80%)</title><rect x="718.5" y="355.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.5" y="366.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.23%)</title><rect x="728.0" y="355.0" width="2.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="731.0" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.80%)</title><rect x="730.7" y="451.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="733.7" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.80%)</title><rect x="730.7" y="435.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.80%)</title><rect x="730.7" y="419.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="733.7" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.80%)</title><rect x="730.7" y="403.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.7" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.46%)</title><rect x="734.8" y="387.0" width="5.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="737.8" y="398.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.46%)</title><rect x="734.8" y="371.0" width="5.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="737.8" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 7.69%)</title><rect x="740.2" y="467.0" width="90.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.2" y="478.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (67 samples, 7.69%)</title><rect x="740.2" y="451.0" width="90.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="743.2" y="462.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/2009657287.process (26 samples, 2.99%)</title><rect x="741.6" y="435.0" width="35.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="744.6" y="446.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.87%)</title><rect x="742.9" y="419.0" width="33.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.9" y="430.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 2.41%)</title><rect x="742.9" y="403.0" width="28.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.9" y="414.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="760.5" y="387.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="763.5" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="760.5" y="371.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="763.5" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.11%)</title><rect x="760.5" y="355.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.5" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.11%)</title><rect x="760.5" y="339.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.11%)</title><rect x="760.5" y="323.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.11%)</title><rect x="760.5" y="307.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="763.5" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.46%)</title><rect x="761.9" y="387.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="764.9" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.34%)</title><rect x="763.2" y="371.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="766.2" y="382.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.34%)</title><rect x="763.2" y="355.0" width="4.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="766.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.23%)</title><rect x="767.3" y="387.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="770.3" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="770.0" y="387.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.0" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="770.0" y="371.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.0" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="770.0" y="355.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.0" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.34%)</title><rect x="771.4" y="403.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.4" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.34%)</title><rect x="771.4" y="387.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="774.4" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.34%)</title><rect x="771.4" y="371.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.4" y="382.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.34%)</title><rect x="771.4" y="355.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.4" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.34%)</title><rect x="771.4" y="339.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="774.4" y="350.0"></text>
</g>
<g>
<title>java/lang/Thread.getId (1 samples, 0.11%)</title><rect x="775.4" y="403.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.4" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (15 samples, 1.72%)</title><rect x="776.8" y="435.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="779.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.11%)</title><rect x="795.8" y="419.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="798.8" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.11%)</title><rect x="797.1" y="435.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="800.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.11%)</title><rect x="797.1" y="419.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="800.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.11%)</title><rect x="797.1" y="403.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.11%)</title><rect x="797.1" y="387.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.1" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.69%)</title><rect x="798.5" y="435.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="801.5" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="798.5" y="419.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="801.5" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="798.5" y="403.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="801.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="798.5" y="387.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="801.5" y="398.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="798.5" y="371.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="801.5" y="382.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="798.5" y="355.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="801.5" y="366.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.57%)</title><rect x="799.8" y="419.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.8" y="430.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="805.2" y="403.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="808.2" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.11%)</title><rect x="806.6" y="435.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/722723135.get (1 samples, 0.11%)</title><rect x="806.6" y="419.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.6" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (1 samples, 0.11%)</title><rect x="806.6" y="403.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="809.6" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (3 samples, 0.34%)</title><rect x="808.0" y="435.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.0" y="446.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (3 samples, 0.34%)</title><rect x="808.0" y="419.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/202016947.get$Lambda (3 samples, 0.34%)</title><rect x="808.0" y="403.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.0" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.34%)</title><rect x="812.0" y="435.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.0" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.23%)</title><rect x="813.4" y="419.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="816.4" y="430.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.23%)</title><rect x="813.4" y="403.0" width="2.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="816.4" y="414.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.34%)</title><rect x="816.1" y="435.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="819.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.23%)</title><rect x="817.4" y="419.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="820.4" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="820.1" y="435.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="823.1" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="820.1" y="419.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.80%)</title><rect x="821.5" y="435.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="824.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.80%)</title><rect x="821.5" y="419.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.80%)</title><rect x="821.5" y="403.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="824.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.69%)</title><rect x="821.5" y="387.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.69%)</title><rect x="821.5" y="371.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.69%)</title><rect x="821.5" y="355.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.5" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/202016947.accept (3 samples, 0.34%)</title><rect x="824.2" y="339.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="827.2" y="350.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="828.3" y="339.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="831.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="829.6" y="387.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="832.6" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/202016947.accept (1 samples, 0.11%)</title><rect x="829.6" y="371.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.6" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$78 (1 samples, 0.11%)</title><rect x="829.6" y="355.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="832.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.15%)</title><rect x="831.0" y="467.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.15%)</title><rect x="831.0" y="451.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="834.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 1.15%)</title><rect x="831.0" y="435.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.34%)</title><rect x="831.0" y="419.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.23%)</title><rect x="831.0" y="403.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.23%)</title><rect x="831.0" y="387.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$303/1163998954.accept (1 samples, 0.11%)</title><rect x="832.3" y="371.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="833.7" y="403.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.80%)</title><rect x="835.1" y="419.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.1" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$303/1163998954.accept (6 samples, 0.69%)</title><rect x="836.4" y="403.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.4" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (6 samples, 0.69%)</title><rect x="836.4" y="387.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="839.4" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.69%)</title><rect x="836.4" y="371.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="839.4" y="382.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.69%)</title><rect x="836.4" y="355.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="839.4" y="366.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.69%)</title><rect x="836.4" y="339.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.4" y="350.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.57%)</title><rect x="837.8" y="323.0" width="6.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="840.8" y="334.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.57%)</title><rect x="837.8" y="307.0" width="6.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="840.8" y="318.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.92%)</title><rect x="844.5" y="483.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="847.5" y="494.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.92%)</title><rect x="844.5" y="467.0" width="10.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="847.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (2 samples, 0.23%)</title><rect x="855.4" y="499.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="858.4" y="510.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="858.1" y="499.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="861.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 1.03%)</title><rect x="859.4" y="547.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="862.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 1.03%)</title><rect x="859.4" y="531.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 1.03%)</title><rect x="859.4" y="515.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 1.03%)</title><rect x="859.4" y="499.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="862.4" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.46%)</title><rect x="866.2" y="483.0" width="5.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="869.2" y="494.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.46%)</title><rect x="866.2" y="467.0" width="5.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="869.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (178 samples, 20.44%)</title><rect x="871.6" y="547.0" width="241.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="874.6" y="558.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (178 samples, 20.44%)</title><rect x="871.6" y="531.0" width="241.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.6" y="542.0">java/util/concurrent/LinkedBlock..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (164 samples, 18.83%)</title><rect x="871.6" y="515.0" width="222.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="874.6" y="526.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.11%)</title><rect x="883.8" y="499.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="886.8" y="510.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.11%)</title><rect x="883.8" y="483.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="886.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.11%)</title><rect x="883.8" y="467.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="886.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 2.41%)</title><rect x="885.2" y="499.0" width="28.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="888.2" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.34%)</title><rect x="913.6" y="499.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.34%)</title><rect x="913.6" y="483.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="916.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.34%)</title><rect x="913.6" y="467.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="916.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.34%)</title><rect x="913.6" y="451.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (130 samples, 14.93%)</title><rect x="917.7" y="499.0" width="176.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.7" y="510.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (129 samples, 14.81%)</title><rect x="919.0" y="483.0" width="174.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.0" y="494.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.23%)</title><rect x="929.9" y="467.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="932.9" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="932.6" y="467.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="935.6" y="478.0"></text>
</g>
<g>
<title>Unsafe_Park (118 samples, 13.55%)</title><rect x="933.9" y="467.0" width="159.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="936.9" y="478.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.23%)</title><rect x="938.0" y="451.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="941.0" y="462.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 1.38%)</title><rect x="940.7" y="451.0" width="16.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="943.7" y="462.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.92%)</title><rect x="942.1" y="435.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.1" y="446.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.57%)</title><rect x="943.4" y="419.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="946.4" y="430.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.46%)</title><rect x="944.8" y="403.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="947.8" y="414.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="950.2" y="419.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.2" y="430.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="951.6" y="419.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="954.6" y="430.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.23%)</title><rect x="952.9" y="435.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.9" y="446.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="955.6" y="435.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="958.6" y="446.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="957.0" y="451.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="960.0" y="462.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.69%)</title><rect x="958.3" y="451.0" width="8.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="961.3" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 3.10%)</title><rect x="966.5" y="451.0" width="36.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="969.5" y="462.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 5.97%)</title><rect x="1003.0" y="451.0" width="70.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1006.0" y="462.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.57%)</title><rect x="1073.5" y="451.0" width="6.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1076.5" y="462.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="1080.3" y="451.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1083.3" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="1081.6" y="451.0" width="1.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1084.6" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.34%)</title><rect x="1083.0" y="451.0" width="4.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1086.0" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="1087.0" y="451.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1090.0" y="462.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.34%)</title><rect x="1088.4" y="451.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.4" y="462.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="1092.5" y="451.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.61%)</title><rect x="1093.8" y="515.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1096.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.61%)</title><rect x="1093.8" y="499.0" width="19.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1096.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.61%)</title><rect x="1093.8" y="483.0" width="19.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1096.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.61%)</title><rect x="1093.8" y="467.0" width="19.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1096.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1112.8" y="595.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1115.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1112.8" y="579.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1115.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1112.8" y="563.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1115.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.11%)</title><rect x="1112.8" y="547.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1115.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.11%)</title><rect x="1112.8" y="531.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1115.8" y="542.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.11%)</title><rect x="1112.8" y="515.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1115.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$90/382525491.get (1 samples, 0.11%)</title><rect x="1112.8" y="499.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.8" y="510.0"></text>
</g>
<g>
<title>start_thread (56 samples, 6.43%)</title><rect x="1114.1" y="595.0" width="75.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1117.1" y="606.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (56 samples, 6.43%)</title><rect x="1114.1" y="579.0" width="75.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1117.1" y="590.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.41%)</title><rect x="1114.1" y="563.0" width="28.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.1" y="574.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.23%)</title><rect x="1114.1" y="547.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.1" y="558.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.23%)</title><rect x="1114.1" y="531.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.1" y="542.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.23%)</title><rect x="1114.1" y="515.0" width="2.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1117.1" y="526.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 2.18%)</title><rect x="1116.8" y="547.0" width="25.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.8" y="558.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.34%)</title><rect x="1116.8" y="531.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.8" y="542.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.11%)</title><rect x="1116.8" y="515.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.8" y="526.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.23%)</title><rect x="1118.2" y="515.0" width="2.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1121.2" y="526.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (9 samples, 1.03%)</title><rect x="1120.9" y="531.0" width="12.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.9" y="542.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.57%)</title><rect x="1120.9" y="515.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.9" y="526.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.23%)</title><rect x="1120.9" y="499.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.9" y="510.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.11%)</title><rect x="1122.3" y="483.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.3" y="494.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.11%)</title><rect x="1122.3" y="467.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.3" y="478.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.34%)</title><rect x="1123.6" y="499.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.6" y="510.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.34%)</title><rect x="1123.6" y="483.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.6" y="494.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.11%)</title><rect x="1123.6" y="467.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.6" y="478.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.11%)</title><rect x="1123.6" y="451.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.6" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.11%)</title><rect x="1123.6" y="435.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.6" y="446.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.11%)</title><rect x="1123.6" y="419.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.6" y="430.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="1123.6" y="403.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.6" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.23%)</title><rect x="1125.0" y="467.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.0" y="478.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.23%)</title><rect x="1125.0" y="451.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.0" y="462.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.23%)</title><rect x="1125.0" y="435.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.0" y="446.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.11%)</title><rect x="1126.3" y="419.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.3" y="430.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.46%)</title><rect x="1127.7" y="515.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.7" y="526.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (3 samples, 0.34%)</title><rect x="1127.7" y="499.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.11%)</title><rect x="1131.7" y="499.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.7" y="510.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.11%)</title><rect x="1131.7" y="483.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.7" y="494.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.80%)</title><rect x="1133.1" y="531.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="542.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.80%)</title><rect x="1133.1" y="515.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.80%)</title><rect x="1133.1" y="499.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.1" y="510.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.80%)</title><rect x="1133.1" y="483.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.1" y="494.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.80%)</title><rect x="1133.1" y="467.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="478.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.69%)</title><rect x="1134.5" y="451.0" width="8.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.5" y="462.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.46%)</title><rect x="1137.2" y="435.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.2" y="446.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1141.2" y="419.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.2" y="430.0"></text>
</g>
<g>
<title>JavaThread::run() (34 samples, 3.90%)</title><rect x="1142.6" y="563.0" width="46.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="574.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (34 samples, 3.90%)</title><rect x="1142.6" y="547.0" width="46.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="558.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (34 samples, 3.90%)</title><rect x="1142.6" y="531.0" width="46.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.6" y="542.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (33 samples, 3.79%)</title><rect x="1142.6" y="515.0" width="44.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="526.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (32 samples, 3.67%)</title><rect x="1142.6" y="499.0" width="43.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="510.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (32 samples, 3.67%)</title><rect x="1142.6" y="483.0" width="43.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="494.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 1.95%)</title><rect x="1142.6" y="467.0" width="23.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.6" y="478.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="1142.6" y="451.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="462.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.11%)</title><rect x="1142.6" y="435.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.6" y="446.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.11%)</title><rect x="1142.6" y="419.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="430.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.11%)</title><rect x="1142.6" y="403.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.6" y="414.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.23%)</title><rect x="1143.9" y="451.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.9" y="462.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.23%)</title><rect x="1143.9" y="435.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.9" y="446.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.23%)</title><rect x="1143.9" y="419.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.9" y="430.0"></text>
</g>
<g>
<title>PhaseCFG::set_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1145.3" y="403.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.3" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 1.61%)</title><rect x="1146.6" y="451.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.6" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.11%)</title><rect x="1146.6" y="435.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="446.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1146.6" y="419.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.11%)</title><rect x="1148.0" y="435.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.0" y="446.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.11%)</title><rect x="1148.0" y="419.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.57%)</title><rect x="1149.4" y="435.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.4" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.11%)</title><rect x="1154.8" y="419.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.8" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::set_was_spilled(Node*) (1 samples, 0.11%)</title><rect x="1154.8" y="403.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.8" y="414.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.23%)</title><rect x="1156.1" y="435.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.1" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1157.5" y="419.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.5" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.11%)</title><rect x="1158.8" y="435.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.8" y="446.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.11%)</title><rect x="1158.8" y="419.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.8" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.23%)</title><rect x="1160.2" y="435.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.11%)</title><rect x="1161.5" y="419.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.5" y="430.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.11%)</title><rect x="1161.5" y="403.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.5" y="414.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.11%)</title><rect x="1161.5" y="387.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.5" y="398.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.11%)</title><rect x="1162.9" y="435.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.9" y="446.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.11%)</title><rect x="1164.3" y="435.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.3" y="446.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 1.26%)</title><rect x="1165.6" y="467.0" width="14.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="1165.6" y="451.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="1165.6" y="435.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1165.6" y="419.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1165.6" y="403.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1165.6" y="387.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1165.6" y="371.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1165.6" y="355.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="366.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.11%)</title><rect x="1165.6" y="339.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.6" y="350.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.11%)</title><rect x="1167.0" y="451.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.0" y="462.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1167.0" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (8 samples, 0.92%)</title><rect x="1168.3" y="451.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.3" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1168.3" y="435.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.3" y="446.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1168.3" y="419.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.3" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1169.7" y="435.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.11%)</title><rect x="1169.7" y="419.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1171.0" y="435.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.11%)</title><rect x="1171.0" y="419.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.0" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.23%)</title><rect x="1172.4" y="435.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.4" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.11%)</title><rect x="1173.7" y="419.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.23%)</title><rect x="1175.1" y="435.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.1" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.11%)</title><rect x="1176.5" y="419.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.5" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1177.8" y="435.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.11%)</title><rect x="1177.8" y="419.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.8" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.11%)</title><rect x="1177.8" y="403.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.8" y="414.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.11%)</title><rect x="1177.8" y="387.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.8" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1179.2" y="451.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="462.0"></text>
</g>
<g>
<title>RegionNode::hash() const (1 samples, 0.11%)</title><rect x="1179.2" y="435.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.46%)</title><rect x="1180.5" y="467.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.46%)</title><rect x="1180.5" y="451.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.46%)</title><rect x="1180.5" y="435.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.46%)</title><rect x="1180.5" y="419.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.46%)</title><rect x="1180.5" y="403.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.46%)</title><rect x="1180.5" y="387.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1180.5" y="371.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="382.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1180.5" y="355.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="366.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1180.5" y="339.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1180.5" y="323.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1180.5" y="307.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1180.5" y="291.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.5" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1180.5" y="275.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.5" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1180.5" y="259.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1180.5" y="243.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1180.5" y="227.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.5" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1180.5" y="211.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.5" y="222.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1180.5" y="195.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="206.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1180.5" y="179.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1183.5" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1181.9" y="371.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1181.9" y="355.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1181.9" y="339.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1181.9" y="323.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1181.9" y="307.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1181.9" y="291.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1181.9" y="275.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1181.9" y="259.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1181.9" y="243.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1181.9" y="227.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1181.9" y="211.0" width="2.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1181.9" y="195.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1181.9" y="179.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1181.9" y="163.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="174.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.11%)</title><rect x="1181.9" y="147.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.11%)</title><rect x="1181.9" y="131.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.11%)</title><rect x="1181.9" y="115.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="126.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.11%)</title><rect x="1181.9" y="99.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.9" y="110.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.11%)</title><rect x="1181.9" y="83.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.2" y="147.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.2" y="131.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.2" y="115.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.2" y="99.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.2" y="83.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.2" y="67.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.2" y="51.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.2" y="35.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1184.6" y="291.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1184.6" y="275.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.11%)</title><rect x="1184.6" y="259.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1184.6" y="243.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1184.6" y="227.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1184.6" y="211.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.6" y="222.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.11%)</title><rect x="1185.9" y="499.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="510.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.11%)</title><rect x="1185.9" y="483.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="494.0"></text>
</g>
<g>
<title>stringStream::write(char const*, unsigned long) (1 samples, 0.11%)</title><rect x="1185.9" y="467.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.11%)</title><rect x="1187.3" y="515.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="526.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.11%)</title><rect x="1187.3" y="499.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.3" y="510.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.11%)</title><rect x="1187.3" y="483.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.3" y="494.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.11%)</title><rect x="1187.3" y="467.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.3" y="478.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.6" y="563.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.6" y="574.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.6" y="547.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.6" y="558.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.11%)</title><rect x="1188.6" y="531.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="542.0"></text>
</g>
</g>
</svg>

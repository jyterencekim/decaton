<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (206 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.49%)</title><rect x="10.0" y="915.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 1.46%)</title><rect x="15.7" y="915.0" width="17.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.7" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.49%)</title><rect x="15.7" y="899.0" width="5.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.7" y="910.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.49%)</title><rect x="15.7" y="883.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.7" y="894.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.49%)</title><rect x="15.7" y="867.0" width="5.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="18.7" y="878.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.97%)</title><rect x="21.5" y="899.0" width="11.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="24.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 6.80%)</title><rect x="32.9" y="915.0" width="80.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="35.9" y="926.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 6.80%)</title><rect x="32.9" y="899.0" width="80.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.9" y="910.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (14 samples, 6.80%)</title><rect x="32.9" y="883.0" width="80.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="35.9" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.97%)</title><rect x="32.9" y="867.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="35.9" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.97%)</title><rect x="32.9" y="851.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.9" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.97%)</title><rect x="32.9" y="835.0" width="11.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.97%)</title><rect x="32.9" y="819.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.97%)</title><rect x="32.9" y="803.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.97%)</title><rect x="32.9" y="787.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.97%)</title><rect x="32.9" y="771.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.9" y="782.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.49%)</title><rect x="32.9" y="755.0" width="5.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="35.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.49%)</title><rect x="38.6" y="755.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="38.6" y="739.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.49%)</title><rect x="38.6" y="723.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.49%)</title><rect x="38.6" y="707.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$278/1818227576.apply (1 samples, 0.49%)</title><rect x="38.6" y="691.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.6" y="702.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.49%)</title><rect x="38.6" y="675.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="41.6" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.49%)</title><rect x="38.6" y="659.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="41.6" y="670.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.49%)</title><rect x="38.6" y="643.0" width="5.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="41.6" y="654.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.49%)</title><rect x="38.6" y="627.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.94%)</title><rect x="44.4" y="867.0" width="22.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.4" y="878.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/253976340.accept (4 samples, 1.94%)</title><rect x="44.4" y="851.0" width="22.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.4" y="862.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.94%)</title><rect x="44.4" y="835.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.4" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.97%)</title><rect x="44.4" y="819.0" width="11.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.4" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.97%)</title><rect x="44.4" y="803.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.97%)</title><rect x="44.4" y="787.0" width="11.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.49%)</title><rect x="55.8" y="819.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.49%)</title><rect x="55.8" y="803.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="61.6" y="819.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.49%)</title><rect x="61.6" y="803.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.49%)</title><rect x="61.6" y="787.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="64.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.49%)</title><rect x="61.6" y="771.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.49%)</title><rect x="61.6" y="755.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="64.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.49%)</title><rect x="61.6" y="739.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.88%)</title><rect x="67.3" y="867.0" width="45.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.3" y="878.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.88%)</title><rect x="67.3" y="851.0" width="45.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.3" y="862.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 3.40%)</title><rect x="67.3" y="835.0" width="40.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.3" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.46%)</title><rect x="67.3" y="819.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.46%)</title><rect x="67.3" y="803.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.49%)</title><rect x="67.3" y="787.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="67.3" y="771.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.49%)</title><rect x="67.3" y="755.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.49%)</title><rect x="67.3" y="739.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.3" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.49%)</title><rect x="67.3" y="723.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.3" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.49%)</title><rect x="67.3" y="707.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="70.3" y="718.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.49%)</title><rect x="67.3" y="691.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="70.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.49%)</title><rect x="73.0" y="787.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.49%)</title><rect x="73.0" y="771.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.0" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.49%)</title><rect x="73.0" y="755.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$90/532373120.get (1 samples, 0.49%)</title><rect x="73.0" y="739.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.49%)</title><rect x="73.0" y="723.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$EmptySet.isEmpty (1 samples, 0.49%)</title><rect x="73.0" y="707.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.49%)</title><rect x="78.7" y="787.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 1.94%)</title><rect x="84.5" y="819.0" width="22.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="87.5" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.49%)</title><rect x="90.2" y="803.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1 samples, 0.49%)</title><rect x="90.2" y="787.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.49%)</title><rect x="90.2" y="771.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.49%)</title><rect x="90.2" y="755.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.49%)</title><rect x="90.2" y="739.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.49%)</title><rect x="90.2" y="723.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (2 samples, 0.97%)</title><rect x="95.9" y="803.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (2 samples, 0.97%)</title><rect x="95.9" y="787.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (2 samples, 0.97%)</title><rect x="95.9" y="771.0" width="11.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.9" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.97%)</title><rect x="95.9" y="755.0" width="11.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.97%)</title><rect x="95.9" y="739.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.97%)</title><rect x="95.9" y="723.0" width="11.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.49%)</title><rect x="107.4" y="835.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.49%)</title><rect x="107.4" y="819.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.49%)</title><rect x="107.4" y="803.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.49%)</title><rect x="107.4" y="787.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.49%)</title><rect x="107.4" y="771.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.49%)</title><rect x="107.4" y="755.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="110.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.49%)</title><rect x="107.4" y="739.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="110.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.49%)</title><rect x="107.4" y="723.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.49%)</title><rect x="107.4" y="707.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.49%)</title><rect x="107.4" y="691.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="110.4" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.49%)</title><rect x="107.4" y="675.0" width="5.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="110.4" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (138 samples, 66.99%)</title><rect x="113.1" y="915.0" width="790.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.1" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (138 samples, 66.99%)</title><rect x="113.1" y="899.0" width="790.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="116.1" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (138 samples, 66.99%)</title><rect x="113.1" y="883.0" width="790.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.1" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1743993251.run (128 samples, 62.14%)</title><rect x="118.8" y="867.0" width="733.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.8" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1743993251.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (128 samples, 62.14%)</title><rect x="118.8" y="851.0" width="733.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="121.8" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (128 samples, 62.14%)</title><rect x="118.8" y="835.0" width="733.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.8" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (128 samples, 62.14%)</title><rect x="118.8" y="819.0" width="733.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="121.8" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 3.88%)</title><rect x="130.3" y="803.0" width="45.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.3" y="814.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.43%)</title><rect x="147.5" y="787.0" width="28.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="150.5" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.43%)</title><rect x="147.5" y="771.0" width="28.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="150.5" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.43%)</title><rect x="147.5" y="755.0" width="28.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.5" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.43%)</title><rect x="147.5" y="739.0" width="28.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.5" y="750.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$299/351108316.accept (5 samples, 2.43%)</title><rect x="147.5" y="723.0" width="28.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.5" y="734.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (5 samples, 2.43%)</title><rect x="147.5" y="707.0" width="28.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="150.5" y="718.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 2.43%)</title><rect x="147.5" y="691.0" width="28.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.5" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 2.43%)</title><rect x="147.5" y="675.0" width="28.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.5" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 2.43%)</title><rect x="147.5" y="659.0" width="28.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="150.5" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.94%)</title><rect x="147.5" y="643.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="150.5" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.94%)</title><rect x="147.5" y="627.0" width="22.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="150.5" y="638.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/120503506.accept (2 samples, 0.97%)</title><rect x="147.5" y="611.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="150.5" y="622.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.97%)</title><rect x="158.9" y="611.0" width="11.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="161.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.49%)</title><rect x="170.4" y="643.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (20 samples, 9.71%)</title><rect x="176.1" y="803.0" width="114.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.1" y="814.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (20 samples, 9.71%)</title><rect x="176.1" y="787.0" width="114.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.1" y="798.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (20 samples, 9.71%)</title><rect x="176.1" y="771.0" width="114.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.1" y="782.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.71%)</title><rect x="176.1" y="755.0" width="114.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.1" y="766.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.71%)</title><rect x="176.1" y="739.0" width="114.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.1" y="750.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 9.71%)</title><rect x="176.1" y="723.0" width="114.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.1" y="734.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 3.88%)</title><rect x="176.1" y="707.0" width="45.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.1" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.94%)</title><rect x="199.0" y="691.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.0" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.94%)</title><rect x="199.0" y="675.0" width="22.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.0" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.46%)</title><rect x="204.8" y="659.0" width="17.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.46%)</title><rect x="204.8" y="643.0" width="17.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.46%)</title><rect x="204.8" y="627.0" width="17.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.46%)</title><rect x="204.8" y="611.0" width="17.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 1.46%)</title><rect x="204.8" y="595.0" width="17.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 3.88%)</title><rect x="221.9" y="707.0" width="45.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.9" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.97%)</title><rect x="227.7" y="691.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.97%)</title><rect x="227.7" y="675.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.49%)</title><rect x="239.1" y="691.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 1.94%)</title><rect x="244.9" y="691.0" width="22.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.9" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.49%)</title><rect x="244.9" y="675.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="247.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.46%)</title><rect x="250.6" y="675.0" width="17.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.49%)</title><rect x="250.6" y="659.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.97%)</title><rect x="256.3" y="659.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.97%)</title><rect x="256.3" y="643.0" width="11.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.97%)</title><rect x="256.3" y="627.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.97%)</title><rect x="256.3" y="611.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.49%)</title><rect x="256.3" y="595.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.49%)</title><rect x="256.3" y="579.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="259.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.49%)</title><rect x="256.3" y="563.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.49%)</title><rect x="256.3" y="547.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="259.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.49%)</title><rect x="256.3" y="531.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.49%)</title><rect x="262.0" y="595.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 1.94%)</title><rect x="267.8" y="707.0" width="22.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="270.8" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.46%)</title><rect x="273.5" y="691.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.46%)</title><rect x="273.5" y="675.0" width="17.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.46%)</title><rect x="273.5" y="659.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.46%)</title><rect x="273.5" y="643.0" width="17.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (97 samples, 47.09%)</title><rect x="290.7" y="803.0" width="555.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.7" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.49%)</title><rect x="336.5" y="787.0" width="5.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="339.5" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="336.5" y="771.0" width="5.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="339.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (15 samples, 7.28%)</title><rect x="342.2" y="787.0" width="86.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.2" y="798.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (14 samples, 6.80%)</title><rect x="348.0" y="771.0" width="80.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="351.0" y="782.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 5.83%)</title><rect x="359.4" y="755.0" width="68.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.4" y="766.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (12 samples, 5.83%)</title><rect x="359.4" y="739.0" width="68.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.4" y="750.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.94%)</title><rect x="405.2" y="723.0" width="23.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="408.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.49%)</title><rect x="405.2" y="707.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="408.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.49%)</title><rect x="405.2" y="691.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="408.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.46%)</title><rect x="411.0" y="707.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="428.2" y="787.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.2" y="798.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.49%)</title><rect x="428.2" y="771.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (16 samples, 7.77%)</title><rect x="433.9" y="787.0" width="91.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.9" y="798.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (14 samples, 6.80%)</title><rect x="439.6" y="771.0" width="80.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.6" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.43%)</title><rect x="445.3" y="755.0" width="28.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.3" y="766.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.46%)</title><rect x="456.8" y="739.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.8" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.97%)</title><rect x="456.8" y="723.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.8" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.97%)</title><rect x="456.8" y="707.0" width="11.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="459.8" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.97%)</title><rect x="456.8" y="691.0" width="11.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="459.8" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.97%)</title><rect x="456.8" y="675.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.97%)</title><rect x="456.8" y="659.0" width="11.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.8" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.97%)</title><rect x="456.8" y="643.0" width="11.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="459.8" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.97%)</title><rect x="456.8" y="627.0" width="11.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="459.8" y="638.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.97%)</title><rect x="456.8" y="611.0" width="11.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="459.8" y="622.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.49%)</title><rect x="456.8" y="595.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.8" y="606.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.49%)</title><rect x="456.8" y="579.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="459.8" y="590.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.49%)</title><rect x="462.5" y="595.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="465.5" y="606.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.49%)</title><rect x="468.3" y="723.0" width="5.7" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="471.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.97%)</title><rect x="474.0" y="755.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="477.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.97%)</title><rect x="474.0" y="739.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.97%)</title><rect x="474.0" y="723.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.0" y="734.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.91%)</title><rect x="485.4" y="755.0" width="34.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.4" y="766.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.91%)</title><rect x="485.4" y="739.0" width="34.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.4" y="750.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.49%)</title><rect x="485.4" y="723.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.4" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.49%)</title><rect x="485.4" y="707.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="488.4" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.49%)</title><rect x="485.4" y="691.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="488.4" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.49%)</title><rect x="485.4" y="675.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.49%)</title><rect x="485.4" y="659.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="488.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.43%)</title><rect x="491.2" y="723.0" width="28.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="494.2" y="734.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.43%)</title><rect x="491.2" y="707.0" width="28.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="494.2" y="718.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.94%)</title><rect x="496.9" y="691.0" width="22.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="499.9" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.49%)</title><rect x="514.1" y="675.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="517.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.49%)</title><rect x="519.8" y="771.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="522.8" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.49%)</title><rect x="519.8" y="755.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="522.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.49%)</title><rect x="519.8" y="739.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.49%)</title><rect x="519.8" y="723.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="522.8" y="734.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.49%)</title><rect x="519.8" y="707.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="522.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="519.8" y="691.0" width="5.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="522.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (55 samples, 26.70%)</title><rect x="525.5" y="787.0" width="315.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.5" y="798.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (53 samples, 25.73%)</title><rect x="537.0" y="771.0" width="303.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="540.0" y="782.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1678716486.process (43 samples, 20.87%)</title><rect x="548.4" y="755.0" width="246.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="551.4" y="766.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (43 samples, 20.87%)</title><rect x="548.4" y="739.0" width="246.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.4" y="750.0">com/linecorp/decaton/benchmark/De..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (43 samples, 20.87%)</title><rect x="548.4" y="723.0" width="246.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="551.4" y="734.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.46%)</title><rect x="554.2" y="707.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.2" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.97%)</title><rect x="559.9" y="691.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="562.9" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.97%)</title><rect x="559.9" y="675.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.9" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.97%)</title><rect x="559.9" y="659.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="562.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.49%)</title><rect x="565.6" y="643.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="568.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.49%)</title><rect x="565.6" y="627.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="568.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (36 samples, 17.48%)</title><rect x="571.4" y="707.0" width="206.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="574.4" y="718.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (35 samples, 16.99%)</title><rect x="571.4" y="691.0" width="200.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="574.4" y="702.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (33 samples, 16.02%)</title><rect x="582.8" y="675.0" width="189.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="585.8" y="686.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.97%)</title><rect x="611.5" y="659.0" width="11.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="614.5" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="622.9" y="659.0" width="5.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="625.9" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.97%)</title><rect x="628.6" y="659.0" width="11.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="631.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.97%)</title><rect x="628.6" y="643.0" width="11.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="631.6" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.97%)</title><rect x="640.1" y="659.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="643.1" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (21 samples, 10.19%)</title><rect x="651.6" y="659.0" width="120.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="654.6" y="670.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.49%)</title><rect x="680.2" y="643.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.2" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.94%)</title><rect x="685.9" y="643.0" width="22.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="688.9" y="654.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 4.85%)</title><rect x="708.8" y="643.0" width="57.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="711.8" y="654.0">__pthr..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.49%)</title><rect x="766.1" y="643.0" width="5.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="769.1" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.49%)</title><rect x="771.8" y="691.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.8" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="771.8" y="675.0" width="5.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="774.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.49%)</title><rect x="777.6" y="707.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="780.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.97%)</title><rect x="783.3" y="707.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="786.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 1.94%)</title><rect x="794.8" y="755.0" width="22.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="797.8" y="766.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 1.94%)</title><rect x="794.8" y="739.0" width="22.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.8" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.49%)</title><rect x="817.7" y="755.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="820.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.49%)</title><rect x="817.7" y="739.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="820.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.97%)</title><rect x="823.4" y="755.0" width="11.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="826.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.97%)</title><rect x="823.4" y="739.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="826.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.97%)</title><rect x="823.4" y="723.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="826.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.97%)</title><rect x="823.4" y="707.0" width="11.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.49%)</title><rect x="823.4" y="691.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="826.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.49%)</title><rect x="823.4" y="675.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="826.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.49%)</title><rect x="829.1" y="691.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="832.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.49%)</title><rect x="834.9" y="755.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.49%)</title><rect x="840.6" y="787.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="843.6" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.49%)</title><rect x="846.3" y="803.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="849.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.49%)</title><rect x="846.3" y="787.0" width="5.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="849.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.49%)</title><rect x="852.0" y="867.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="855.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.49%)</title><rect x="852.0" y="851.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.49%)</title><rect x="852.0" y="835.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="855.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.49%)</title><rect x="852.0" y="819.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 3.88%)</title><rect x="857.8" y="867.0" width="45.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.8" y="878.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.91%)</title><rect x="857.8" y="851.0" width="34.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="860.8" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.46%)</title><rect x="875.0" y="835.0" width="17.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.46%)</title><rect x="875.0" y="819.0" width="17.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="878.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.46%)</title><rect x="875.0" y="803.0" width="17.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="878.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.46%)</title><rect x="875.0" y="787.0" width="17.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="878.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (2 samples, 0.97%)</title><rect x="892.1" y="851.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="895.1" y="862.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (2 samples, 0.97%)</title><rect x="903.6" y="915.0" width="11.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="906.6" y="926.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.49%)</title><rect x="909.3" y="899.0" width="5.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="912.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.49%)</title><rect x="915.0" y="915.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="918.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.49%)</title><rect x="915.0" y="899.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="918.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.49%)</title><rect x="915.0" y="883.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="918.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.49%)</title><rect x="915.0" y="867.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="918.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.49%)</title><rect x="915.0" y="851.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="918.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="915.0" y="835.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="918.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.49%)</title><rect x="915.0" y="819.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.49%)</title><rect x="915.0" y="803.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.49%)</title><rect x="920.8" y="915.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.49%)</title><rect x="920.8" y="899.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.49%)</title><rect x="920.8" y="883.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.8" y="894.0"></text>
</g>
<g>
<title>start_thread (46 samples, 22.33%)</title><rect x="926.5" y="915.0" width="263.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="929.5" y="926.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (46 samples, 22.33%)</title><rect x="926.5" y="899.0" width="263.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="929.5" y="910.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 7.28%)</title><rect x="926.5" y="883.0" width="85.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.5" y="894.0">GangWorker..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.49%)</title><rect x="926.5" y="867.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="929.5" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.49%)</title><rect x="926.5" y="851.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="929.5" y="862.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.49%)</title><rect x="926.5" y="835.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.5" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 6.80%)</title><rect x="932.2" y="867.0" width="80.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="935.2" y="878.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 6.80%)</title><rect x="932.2" y="851.0" width="80.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="935.2" y="862.0">G1ParEvac..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 4.37%)</title><rect x="938.0" y="835.0" width="51.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="941.0" y="846.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.43%)</title><rect x="960.9" y="819.0" width="28.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="963.9" y="830.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.49%)</title><rect x="983.8" y="803.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.8" y="814.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.49%)</title><rect x="983.8" y="787.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.8" y="798.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (3 samples, 1.46%)</title><rect x="989.5" y="835.0" width="17.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.5" y="846.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.49%)</title><rect x="1001.0" y="819.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.0" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.49%)</title><rect x="1006.7" y="835.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.7" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 15.05%)</title><rect x="1012.4" y="883.0" width="177.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1015.4" y="894.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 15.05%)</title><rect x="1012.4" y="867.0" width="177.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.4" y="878.0">JavaThread::thread_main..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 15.05%)</title><rect x="1012.4" y="851.0" width="177.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1015.4" y="862.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 15.05%)</title><rect x="1012.4" y="835.0" width="177.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.4" y="846.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (30 samples, 14.56%)</title><rect x="1012.4" y="819.0" width="171.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.4" y="830.0">C2Compiler::compile_me..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (30 samples, 14.56%)</title><rect x="1012.4" y="803.0" width="171.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.4" y="814.0">Compile::Compile(ciEnv..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 8.74%)</title><rect x="1012.4" y="787.0" width="103.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1015.4" y="798.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.49%)</title><rect x="1012.4" y="771.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1015.4" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.49%)</title><rect x="1012.4" y="755.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.4" y="766.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.49%)</title><rect x="1012.4" y="739.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.4" y="750.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.49%)</title><rect x="1012.4" y="723.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1015.4" y="734.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.49%)</title><rect x="1012.4" y="707.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1015.4" y="718.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.49%)</title><rect x="1012.4" y="691.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.4" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.49%)</title><rect x="1018.2" y="771.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.2" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.49%)</title><rect x="1018.2" y="755.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1021.2" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.49%)</title><rect x="1018.2" y="739.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.2" y="750.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.49%)</title><rect x="1018.2" y="723.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.2" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.49%)</title><rect x="1023.9" y="771.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1026.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.49%)</title><rect x="1023.9" y="755.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.9" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1023.9" y="739.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.9" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.49%)</title><rect x="1023.9" y="723.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1026.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 7.28%)</title><rect x="1029.6" y="771.0" width="85.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.6" y="782.0">PhaseChait..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.49%)</title><rect x="1029.6" y="755.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1032.6" y="766.0"></text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.49%)</title><rect x="1035.3" y="755.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.49%)</title><rect x="1041.1" y="755.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1044.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.97%)</title><rect x="1046.8" y="755.0" width="11.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.8" y="766.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.49%)</title><rect x="1052.5" y="739.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.5" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.46%)</title><rect x="1058.3" y="755.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.3" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.49%)</title><rect x="1069.7" y="739.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1072.7" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1069.7" y="723.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.49%)</title><rect x="1075.4" y="755.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.49%)</title><rect x="1075.4" y="739.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1078.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.97%)</title><rect x="1081.2" y="755.0" width="11.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.2" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.49%)</title><rect x="1081.2" y="739.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1084.2" y="750.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.49%)</title><rect x="1086.9" y="739.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.49%)</title><rect x="1092.6" y="755.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1095.6" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.49%)</title><rect x="1098.3" y="755.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1101.3" y="766.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.49%)</title><rect x="1098.3" y="739.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.3" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.49%)</title><rect x="1098.3" y="723.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.3" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.49%)</title><rect x="1098.3" y="707.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.3" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1098.3" y="691.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.3" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.49%)</title><rect x="1104.1" y="755.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.1" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.49%)</title><rect x="1104.1" y="739.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.1" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.49%)</title><rect x="1109.8" y="755.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.8" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 3.88%)</title><rect x="1115.5" y="787.0" width="45.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.5" y="798.0">Comp..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 2.43%)</title><rect x="1115.5" y="771.0" width="28.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.5" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.49%)</title><rect x="1115.5" y="755.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.46%)</title><rect x="1121.3" y="755.0" width="17.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.97%)</title><rect x="1127.0" y="739.0" width="11.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.49%)</title><rect x="1132.7" y="723.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.49%)</title><rect x="1138.4" y="755.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.4" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.46%)</title><rect x="1144.2" y="771.0" width="17.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.2" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.46%)</title><rect x="1144.2" y="755.0" width="17.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.2" y="766.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1144.2" y="739.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.2" y="750.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.49%)</title><rect x="1144.2" y="723.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.2" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1144.2" y="707.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.2" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1144.2" y="691.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.49%)</title><rect x="1149.9" y="739.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.9" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.49%)</title><rect x="1155.6" y="739.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.6" y="750.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.49%)</title><rect x="1155.6" y="723.0" width="5.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1155.6" y="707.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.49%)</title><rect x="1155.6" y="691.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="702.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.49%)</title><rect x="1155.6" y="675.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.6" y="686.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.49%)</title><rect x="1155.6" y="659.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.94%)</title><rect x="1161.4" y="787.0" width="22.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.4" y="798.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.94%)</title><rect x="1161.4" y="771.0" width="22.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.4" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.94%)</title><rect x="1161.4" y="755.0" width="22.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.94%)</title><rect x="1161.4" y="739.0" width="22.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.4" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.94%)</title><rect x="1161.4" y="723.0" width="22.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.4" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.94%)</title><rect x="1161.4" y="707.0" width="22.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.4" y="718.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.49%)</title><rect x="1161.4" y="691.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.4" y="702.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.49%)</title><rect x="1161.4" y="675.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="686.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.49%)</title><rect x="1161.4" y="659.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.46%)</title><rect x="1167.1" y="691.0" width="17.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.46%)</title><rect x="1167.1" y="675.0" width="17.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.97%)</title><rect x="1167.1" y="659.0" width="11.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.97%)</title><rect x="1167.1" y="643.0" width="11.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.97%)</title><rect x="1167.1" y="627.0" width="11.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.97%)</title><rect x="1167.1" y="611.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.97%)</title><rect x="1167.1" y="595.0" width="11.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.97%)</title><rect x="1167.1" y="579.0" width="11.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.97%)</title><rect x="1167.1" y="563.0" width="11.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.97%)</title><rect x="1167.1" y="547.0" width="11.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.97%)</title><rect x="1167.1" y="531.0" width="11.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.97%)</title><rect x="1167.1" y="515.0" width="11.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.97%)</title><rect x="1167.1" y="499.0" width="11.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.97%)</title><rect x="1167.1" y="483.0" width="11.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.97%)</title><rect x="1167.1" y="467.0" width="11.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.97%)</title><rect x="1167.1" y="451.0" width="11.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.97%)</title><rect x="1167.1" y="435.0" width="11.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.97%)</title><rect x="1167.1" y="419.0" width="11.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.97%)</title><rect x="1167.1" y="403.0" width="11.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.97%)</title><rect x="1167.1" y="387.0" width="11.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.97%)</title><rect x="1167.1" y="371.0" width="11.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.97%)</title><rect x="1167.1" y="355.0" width="11.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.97%)</title><rect x="1167.1" y="339.0" width="11.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1167.1" y="323.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1167.1" y="307.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1167.1" y="291.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1167.1" y="275.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1167.1" y="259.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1167.1" y="243.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1167.1" y="227.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1167.1" y="211.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.49%)</title><rect x="1167.1" y="195.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.49%)</title><rect x="1167.1" y="179.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.49%)</title><rect x="1167.1" y="163.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.49%)</title><rect x="1167.1" y="147.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.49%)</title><rect x="1167.1" y="131.0" width="5.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.1" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.49%)</title><rect x="1167.1" y="115.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.1" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.49%)</title><rect x="1167.1" y="99.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="110.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.49%)</title><rect x="1167.1" y="83.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.1" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.49%)</title><rect x="1167.1" y="67.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.1" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.49%)</title><rect x="1167.1" y="51.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="62.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.49%)</title><rect x="1167.1" y="35.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.49%)</title><rect x="1172.8" y="323.0" width="5.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.8" y="334.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.49%)</title><rect x="1172.8" y="307.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.8" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1172.8" y="291.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.8" y="302.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.49%)</title><rect x="1172.8" y="275.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.49%)</title><rect x="1178.5" y="659.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.49%)</title><rect x="1178.5" y="643.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.49%)</title><rect x="1184.3" y="819.0" width="5.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.49%)</title><rect x="1184.3" y="803.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.49%)</title><rect x="1184.3" y="787.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.49%)</title><rect x="1184.3" y="771.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="782.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.49%)</title><rect x="1184.3" y="755.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="766.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.49%)</title><rect x="1184.3" y="739.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>Instruction::as_LoadField() (1 samples, 0.49%)</title><rect x="1184.3" y="723.0" width="5.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
</g>
</svg>

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (941 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (211 samples, 22.42%)</title><rect x="11.3" y="755.0" width="264.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="766.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (211 samples, 22.42%)</title><rect x="11.3" y="739.0" width="264.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.3" y="750.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (211 samples, 22.42%)</title><rect x="11.3" y="723.0" width="264.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.3" y="734.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.11%)</title><rect x="11.3" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.11%)</title><rect x="11.3" y="691.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="11.3" y="675.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="11.3" y="659.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="11.3" y="643.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="11.3" y="627.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="11.3" y="611.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.3" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.11%)</title><rect x="11.3" y="595.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.53%)</title><rect x="12.5" y="707.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.53%)</title><rect x="12.5" y="691.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.43%)</title><rect x="13.8" y="675.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1293265772.accept (4 samples, 0.43%)</title><rect x="13.8" y="659.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.43%)</title><rect x="13.8" y="643.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.43%)</title><rect x="13.8" y="627.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.43%)</title><rect x="13.8" y="611.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (165 samples, 17.53%)</title><rect x="18.8" y="707.0" width="206.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.8" y="718.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1683654929.accept (161 samples, 17.11%)</title><rect x="18.8" y="691.0" width="201.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="702.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (161 samples, 17.11%)</title><rect x="18.8" y="675.0" width="201.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="686.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (145 samples, 15.41%)</title><rect x="18.8" y="659.0" width="181.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="670.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (145 samples, 15.41%)</title><rect x="18.8" y="643.0" width="181.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="654.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (145 samples, 15.41%)</title><rect x="18.8" y="627.0" width="181.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="638.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (145 samples, 15.41%)</title><rect x="18.8" y="611.0" width="181.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="622.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (145 samples, 15.41%)</title><rect x="18.8" y="595.0" width="181.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="606.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (145 samples, 15.41%)</title><rect x="18.8" y="579.0" width="181.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.8" y="590.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (96 samples, 10.20%)</title><rect x="68.9" y="563.0" width="120.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.9" y="574.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.70%)</title><rect x="68.9" y="547.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.70%)</title><rect x="68.9" y="531.0" width="20.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="71.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.70%)</title><rect x="68.9" y="515.0" width="20.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="71.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.53%)</title><rect x="89.0" y="547.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (5 samples, 0.53%)</title><rect x="89.0" y="531.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.21%)</title><rect x="89.0" y="515.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.0" y="526.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.11%)</title><rect x="90.3" y="499.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="93.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.32%)</title><rect x="91.5" y="515.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 7.97%)</title><rect x="95.3" y="547.0" width="94.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="98.3" y="558.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 7.97%)</title><rect x="95.3" y="531.0" width="94.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.3" y="542.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (73 samples, 7.76%)</title><rect x="96.5" y="515.0" width="91.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.5" y="526.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (71 samples, 7.55%)</title><rect x="96.5" y="499.0" width="89.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="99.5" y="510.0">java/util/..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (70 samples, 7.44%)</title><rect x="97.8" y="483.0" width="87.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="100.8" y="494.0">sun/misc/U..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.21%)</title><rect x="99.0" y="467.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="102.0" y="478.0"></text>
</g>
<g>
<title>Unsafe_Unpark (61 samples, 6.48%)</title><rect x="101.5" y="467.0" width="76.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="104.5" y="478.0">Unsafe_U..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="101.5" y="451.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="104.5" y="462.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="102.8" y="451.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="105.8" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 4.25%)</title><rect x="104.0" y="451.0" width="50.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="107.0" y="462.0">__pth..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.21%)</title><rect x="154.2" y="451.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="157.2" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.81%)</title><rect x="156.7" y="451.0" width="21.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="159.7" y="462.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 0.64%)</title><rect x="178.0" y="467.0" width="7.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="181.0" y="478.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (2 samples, 0.21%)</title><rect x="185.6" y="499.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="188.1" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.32%)</title><rect x="189.3" y="563.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (3 samples, 0.32%)</title><rect x="189.3" y="547.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.32%)</title><rect x="189.3" y="531.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.64%)</title><rect x="193.1" y="563.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="196.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.64%)</title><rect x="193.1" y="547.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (6 samples, 0.64%)</title><rect x="193.1" y="531.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="196.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.21%)</title><rect x="194.3" y="515.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.32%)</title><rect x="196.8" y="515.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (15 samples, 1.59%)</title><rect x="200.6" y="659.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (15 samples, 1.59%)</title><rect x="200.6" y="643.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="203.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.32%)</title><rect x="215.7" y="627.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.32%)</title><rect x="215.7" y="611.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="218.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.32%)</title><rect x="215.7" y="595.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.32%)</title><rect x="215.7" y="579.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.32%)</title><rect x="215.7" y="563.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="219.4" y="659.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="219.4" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="219.4" y="627.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.11%)</title><rect x="219.4" y="611.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="222.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="219.4" y="595.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.43%)</title><rect x="220.7" y="691.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.43%)</title><rect x="220.7" y="675.0" width="5.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.43%)</title><rect x="220.7" y="659.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.43%)</title><rect x="220.7" y="643.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (40 samples, 4.25%)</title><rect x="225.7" y="707.0" width="50.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.7" y="718.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (40 samples, 4.25%)</title><rect x="225.7" y="691.0" width="50.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.7" y="702.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.11%)</title><rect x="225.7" y="675.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 2.76%)</title><rect x="226.9" y="675.0" width="32.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.9" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (26 samples, 2.76%)</title><rect x="226.9" y="659.0" width="32.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.9" y="670.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.66%)</title><rect x="226.9" y="643.0" width="31.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.9" y="654.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (23 samples, 2.44%)</title><rect x="226.9" y="627.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.9" y="638.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (23 samples, 2.44%)</title><rect x="226.9" y="611.0" width="28.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.9" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.28%)</title><rect x="226.9" y="595.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.64%)</title><rect x="233.2" y="579.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.64%)</title><rect x="233.2" y="563.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="236.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.64%)</title><rect x="233.2" y="547.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.64%)</title><rect x="233.2" y="531.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.64%)</title><rect x="233.2" y="515.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.64%)</title><rect x="233.2" y="499.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.64%)</title><rect x="233.2" y="483.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.11%)</title><rect x="240.7" y="579.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.11%)</title><rect x="240.7" y="563.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 1.17%)</title><rect x="242.0" y="595.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 1.06%)</title><rect x="243.2" y="579.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 1.06%)</title><rect x="243.2" y="563.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="246.2" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 1.06%)</title><rect x="243.2" y="547.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="246.2" y="558.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.53%)</title><rect x="248.3" y="531.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.3" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="253.3" y="515.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="256.3" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="254.5" y="531.0" width="1.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="257.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.11%)</title><rect x="255.8" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.11%)</title><rect x="255.8" y="611.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.11%)</title><rect x="255.8" y="595.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="255.8" y="579.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.11%)</title><rect x="257.0" y="627.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="260.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.11%)</title><rect x="258.3" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.11%)</title><rect x="258.3" y="627.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.11%)</title><rect x="258.3" y="611.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.3" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.11%)</title><rect x="258.3" y="595.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="258.3" y="579.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.96%)</title><rect x="259.5" y="675.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (9 samples, 0.96%)</title><rect x="259.5" y="659.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.64%)</title><rect x="259.5" y="643.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.11%)</title><rect x="259.5" y="627.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="262.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1038119911.accept (1 samples, 0.11%)</title><rect x="259.5" y="611.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.11%)</title><rect x="259.5" y="595.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.11%)</title><rect x="259.5" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.11%)</title><rect x="259.5" y="563.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.11%)</title><rect x="259.5" y="547.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.5" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.11%)</title><rect x="259.5" y="531.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.5" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="259.5" y="515.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.5" y="526.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="260.8" y="627.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="260.8" y="611.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.8" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="260.8" y="595.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.11%)</title><rect x="260.8" y="579.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.11%)</title><rect x="262.1" y="627.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.11%)</title><rect x="262.1" y="611.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.1" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.11%)</title><rect x="262.1" y="595.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.11%)</title><rect x="262.1" y="579.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.1" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.11%)</title><rect x="262.1" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="265.1" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.11%)</title><rect x="262.1" y="547.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.32%)</title><rect x="263.3" y="627.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.32%)</title><rect x="263.3" y="611.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.32%)</title><rect x="263.3" y="595.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.32%)</title><rect x="263.3" y="579.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.32%)</title><rect x="263.3" y="563.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.32%)</title><rect x="263.3" y="547.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.32%)</title><rect x="263.3" y="531.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.3" y="542.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="263.3" y="515.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.3" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (2 samples, 0.21%)</title><rect x="264.6" y="515.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (3 samples, 0.32%)</title><rect x="267.1" y="643.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="270.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.21%)</title><rect x="268.3" y="627.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="271.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.21%)</title><rect x="268.3" y="611.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.21%)</title><rect x="268.3" y="595.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.21%)</title><rect x="268.3" y="579.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="268.3" y="563.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="268.3" y="547.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.21%)</title><rect x="268.3" y="531.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.21%)</title><rect x="268.3" y="515.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="526.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.21%)</title><rect x="268.3" y="499.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.21%)</title><rect x="268.3" y="483.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.3" y="494.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.11%)</title><rect x="268.3" y="467.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.3" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates$$Lambda$242/432397042.apply (1 samples, 0.11%)</title><rect x="269.6" y="467.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.lambda$stream$0 (1 samples, 0.11%)</title><rect x="269.6" y="451.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="272.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.21%)</title><rect x="270.8" y="675.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.21%)</title><rect x="270.8" y="659.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.21%)</title><rect x="270.8" y="643.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.21%)</title><rect x="270.8" y="627.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.21%)</title><rect x="270.8" y="611.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.add (1 samples, 0.11%)</title><rect x="270.8" y="595.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.8" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.addFirst (1 samples, 0.11%)</title><rect x="270.8" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="272.1" y="595.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.11%)</title><rect x="272.1" y="579.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.11%)</title><rect x="272.1" y="563.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.11%)</title><rect x="273.3" y="675.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.11%)</title><rect x="273.3" y="659.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.11%)</title><rect x="273.3" y="643.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="276.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.11%)</title><rect x="273.3" y="627.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.11%)</title><rect x="273.3" y="611.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.11%)</title><rect x="274.6" y="675.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="274.6" y="659.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="274.6" y="643.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="274.6" y="627.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="277.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="274.6" y="611.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (618 samples, 65.67%)</title><rect x="275.8" y="755.0" width="775.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.8" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (618 samples, 65.67%)</title><rect x="275.8" y="739.0" width="775.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.8" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (618 samples, 65.67%)</title><rect x="275.8" y="723.0" width="775.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.8" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1291183414.run (389 samples, 41.34%)</title><rect x="279.6" y="707.0" width="487.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.6" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (389 samples, 41.34%)</title><rect x="279.6" y="691.0" width="487.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="282.6" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (389 samples, 41.34%)</title><rect x="279.6" y="675.0" width="487.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.6" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (387 samples, 41.13%)</title><rect x="279.6" y="659.0" width="485.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.6" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sch..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="287.1" y="643.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="290.1" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="287.1" y="627.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="290.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (13 samples, 1.38%)</title><rect x="288.4" y="643.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.4" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (13 samples, 1.38%)</title><rect x="288.4" y="627.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.4" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 1.38%)</title><rect x="288.4" y="611.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="288.4" y="595.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.4" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 1.28%)</title><rect x="289.6" y="595.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.6" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.96%)</title><rect x="293.4" y="579.0" width="11.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="296.4" y="590.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.96%)</title><rect x="293.4" y="563.0" width="11.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="296.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 3.93%)</title><rect x="304.7" y="643.0" width="46.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.7" y="654.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.21%)</title><rect x="321.0" y="627.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="324.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.11%)</title><rect x="323.5" y="627.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.5" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.11%)</title><rect x="323.5" y="611.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/406533239.get$Lambda (1 samples, 0.11%)</title><rect x="323.5" y="595.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.5" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="323.5" y="579.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="326.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="323.5" y="563.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="326.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="323.5" y="547.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="326.5" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="323.5" y="531.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="326.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 2.23%)</title><rect x="324.8" y="627.0" width="26.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="327.8" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (21 samples, 2.23%)</title><rect x="324.8" y="611.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.8" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 2.23%)</title><rect x="324.8" y="595.0" width="26.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.8" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.21%)</title><rect x="324.8" y="579.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.21%)</title><rect x="324.8" y="563.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.21%)</title><rect x="324.8" y="547.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/406533239.accept (1 samples, 0.11%)</title><rect x="324.8" y="531.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.8" y="542.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="326.0" y="531.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="329.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 2.02%)</title><rect x="327.3" y="579.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.3" y="590.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$296/406533239.accept (19 samples, 2.02%)</title><rect x="327.3" y="563.0" width="23.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.3" y="574.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (19 samples, 2.02%)</title><rect x="327.3" y="547.0" width="23.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.3" y="558.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 2.02%)</title><rect x="327.3" y="531.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.3" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (19 samples, 2.02%)</title><rect x="327.3" y="515.0" width="23.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.3" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (19 samples, 2.02%)</title><rect x="327.3" y="499.0" width="23.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.3" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.85%)</title><rect x="327.3" y="483.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (8 samples, 0.85%)</title><rect x="327.3" y="467.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/194322201.accept (2 samples, 0.21%)</title><rect x="331.0" y="451.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.0" y="462.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.32%)</title><rect x="333.5" y="451.0" width="3.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="336.5" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.17%)</title><rect x="337.3" y="483.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="340.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (105 samples, 11.16%)</title><rect x="351.1" y="643.0" width="131.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.1" y="654.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (105 samples, 11.16%)</title><rect x="351.1" y="627.0" width="131.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.1" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (105 samples, 11.16%)</title><rect x="351.1" y="611.0" width="131.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.1" y="622.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (105 samples, 11.16%)</title><rect x="351.1" y="595.0" width="131.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.1" y="606.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (105 samples, 11.16%)</title><rect x="351.1" y="579.0" width="131.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.1" y="590.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (105 samples, 11.16%)</title><rect x="351.1" y="563.0" width="131.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="354.1" y="574.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (33 samples, 3.51%)</title><rect x="351.1" y="547.0" width="41.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="354.1" y="558.0">com..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="366.1" y="531.0" width="3.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="369.1" y="542.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="366.1" y="515.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="369.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.11%)</title><rect x="369.9" y="531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.11%)</title><rect x="369.9" y="515.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.11%)</title><rect x="369.9" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="369.9" y="483.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.9" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="369.9" y="467.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.9" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="369.9" y="451.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.9" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.11%)</title><rect x="369.9" y="435.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (17 samples, 1.81%)</title><rect x="371.1" y="531.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="374.1" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 0.53%)</title><rect x="386.2" y="515.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.43%)</title><rect x="386.2" y="499.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.2" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.32%)</title><rect x="386.2" y="483.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="389.2" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.21%)</title><rect x="387.4" y="467.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="390.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.21%)</title><rect x="387.4" y="451.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="390.4" y="462.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="387.4" y="435.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="390.4" y="446.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="388.7" y="435.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="391.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="388.7" y="419.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="391.7" y="430.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.11%)</title><rect x="388.7" y="403.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="391.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.11%)</title><rect x="390.0" y="483.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="391.2" y="499.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="394.2" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="391.2" y="483.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="394.2" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="391.2" y="467.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="394.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="391.2" y="451.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="394.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="391.2" y="435.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="394.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="391.2" y="419.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="394.2" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="391.2" y="403.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.2" y="414.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.11%)</title><rect x="391.2" y="387.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.2" y="398.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.11%)</title><rect x="391.2" y="371.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="394.2" y="382.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.11%)</title><rect x="391.2" y="355.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="394.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (67 samples, 7.12%)</title><rect x="392.5" y="547.0" width="84.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.5" y="558.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (4 samples, 0.43%)</title><rect x="393.7" y="531.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.43%)</title><rect x="398.7" y="531.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="401.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.43%)</title><rect x="398.7" y="515.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (13 samples, 1.38%)</title><rect x="403.8" y="531.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.96%)</title><rect x="408.8" y="515.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.74%)</title><rect x="411.3" y="499.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.43%)</title><rect x="415.0" y="483.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.32%)</title><rect x="416.3" y="467.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="419.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.43%)</title><rect x="420.1" y="531.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.32%)</title><rect x="421.3" y="515.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (41 samples, 4.36%)</title><rect x="425.1" y="531.0" width="51.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.1" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.11%)</title><rect x="425.1" y="515.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="428.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (40 samples, 4.25%)</title><rect x="426.3" y="515.0" width="50.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="429.3" y="526.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.74%)</title><rect x="427.6" y="499.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.32%)</title><rect x="430.1" y="483.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="433.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.32%)</title><rect x="430.1" y="467.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="433.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.32%)</title><rect x="430.1" y="451.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="433.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.32%)</title><rect x="430.1" y="435.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.11%)</title><rect x="432.6" y="419.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="435.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.21%)</title><rect x="433.8" y="483.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.11%)</title><rect x="433.8" y="467.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="436.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.11%)</title><rect x="435.1" y="467.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.11%)</title><rect x="435.1" y="451.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="438.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.11%)</title><rect x="435.1" y="435.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="438.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.11%)</title><rect x="435.1" y="419.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (32 samples, 3.40%)</title><rect x="436.4" y="499.0" width="40.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="439.4" y="510.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (32 samples, 3.40%)</title><rect x="436.4" y="483.0" width="40.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.4" y="494.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (32 samples, 3.40%)</title><rect x="436.4" y="467.0" width="40.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="439.4" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.38%)</title><rect x="438.9" y="451.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.43%)</title><rect x="446.4" y="435.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.43%)</title><rect x="446.4" y="419.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.43%)</title><rect x="446.4" y="403.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="449.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.43%)</title><rect x="446.4" y="387.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.21%)</title><rect x="451.4" y="435.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.21%)</title><rect x="451.4" y="419.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="454.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.11%)</title><rect x="453.9" y="435.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="456.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.74%)</title><rect x="455.2" y="451.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.53%)</title><rect x="457.7" y="435.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.53%)</title><rect x="457.7" y="419.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.53%)</title><rect x="457.7" y="403.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (5 samples, 0.53%)</title><rect x="457.7" y="387.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="460.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.11%)</title><rect x="463.9" y="451.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.64%)</title><rect x="465.2" y="451.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.64%)</title><rect x="465.2" y="435.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.64%)</title><rect x="465.2" y="419.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.64%)</title><rect x="465.2" y="403.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.2" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.64%)</title><rect x="465.2" y="387.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="468.2" y="398.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.11%)</title><rect x="471.5" y="371.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.5" y="382.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.11%)</title><rect x="471.5" y="355.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.5" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="471.5" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="474.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="471.5" y="323.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="474.5" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.11%)</title><rect x="471.5" y="307.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="474.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.32%)</title><rect x="472.7" y="451.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.7" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.32%)</title><rect x="472.7" y="435.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.32%)</title><rect x="472.7" y="419.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="475.2" y="403.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.53%)</title><rect x="476.5" y="547.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.53%)</title><rect x="476.5" y="531.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.53%)</title><rect x="476.5" y="515.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.53%)</title><rect x="476.5" y="499.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="479.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.53%)</title><rect x="476.5" y="483.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (221 samples, 23.49%)</title><rect x="482.8" y="643.0" width="277.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="485.8" y="654.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.21%)</title><rect x="496.5" y="627.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="499.5" y="638.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="496.5" y="611.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="499.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (34 samples, 3.61%)</title><rect x="499.1" y="627.0" width="42.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="502.1" y="638.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (34 samples, 3.61%)</title><rect x="499.1" y="611.0" width="42.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.1" y="622.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 3.40%)</title><rect x="501.6" y="595.0" width="40.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.6" y="606.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.53%)</title><rect x="502.8" y="579.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.53%)</title><rect x="502.8" y="563.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.53%)</title><rect x="502.8" y="547.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.8" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.53%)</title><rect x="502.8" y="531.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="505.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (20 samples, 2.13%)</title><rect x="509.1" y="579.0" width="25.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.1" y="590.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (20 samples, 2.13%)</title><rect x="509.1" y="563.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.1" y="574.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (20 samples, 2.13%)</title><rect x="509.1" y="547.0" width="25.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.1" y="558.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (20 samples, 2.13%)</title><rect x="509.1" y="531.0" width="25.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="512.1" y="542.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 0.64%)</title><rect x="534.2" y="579.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="537.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.11%)</title><rect x="541.7" y="627.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="544.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.11%)</title><rect x="541.7" y="611.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (101 samples, 10.73%)</title><rect x="542.9" y="627.0" width="126.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.9" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (93 samples, 9.88%)</title><rect x="542.9" y="611.0" width="116.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.9" y="622.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (22 samples, 2.34%)</title><rect x="551.7" y="595.0" width="27.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="554.7" y="606.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="559.2" y="579.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="562.2" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="559.2" y="563.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="562.2" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="559.2" y="547.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="562.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="559.2" y="531.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="562.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="559.2" y="515.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="562.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (11 samples, 1.17%)</title><rect x="560.5" y="579.0" width="13.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="563.5" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (11 samples, 1.17%)</title><rect x="560.5" y="563.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="563.5" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.64%)</title><rect x="560.5" y="547.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="563.5" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.64%)</title><rect x="560.5" y="531.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="563.5" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.64%)</title><rect x="560.5" y="515.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="563.5" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.64%)</title><rect x="560.5" y="499.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="563.5" y="510.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.11%)</title><rect x="561.8" y="483.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="564.8" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.11%)</title><rect x="563.0" y="483.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="566.0" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.11%)</title><rect x="563.0" y="467.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="566.0" y="478.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.11%)</title><rect x="563.0" y="451.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="566.0" y="462.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="563.0" y="435.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="566.0" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.32%)</title><rect x="564.3" y="483.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="567.3" y="494.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.11%)</title><rect x="564.3" y="467.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.3" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="565.5" y="467.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="568.5" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="565.5" y="451.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="568.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="565.5" y="435.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="568.5" y="446.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.11%)</title><rect x="565.5" y="419.0" width="1.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="568.5" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.11%)</title><rect x="566.8" y="467.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="569.8" y="478.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.53%)</title><rect x="568.0" y="547.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="571.0" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.43%)</title><rect x="574.3" y="579.0" width="5.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="577.3" y="590.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.85%)</title><rect x="579.3" y="595.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.3" y="606.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (5 samples, 0.53%)</title><rect x="579.3" y="579.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (5 samples, 0.53%)</title><rect x="579.3" y="563.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="582.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.32%)</title><rect x="585.6" y="579.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.32%)</title><rect x="585.6" y="563.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="588.6" y="574.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.11%)</title><rect x="589.3" y="595.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="592.3" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="590.6" y="595.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="593.6" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="594.4" y="595.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="597.4" y="606.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (51 samples, 5.42%)</title><rect x="595.6" y="595.0" width="64.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="598.6" y="606.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (51 samples, 5.42%)</title><rect x="595.6" y="579.0" width="64.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="598.6" y="590.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.32%)</title><rect x="595.6" y="563.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="598.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.32%)</title><rect x="595.6" y="547.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="598.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.32%)</title><rect x="595.6" y="531.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.32%)</title><rect x="595.6" y="515.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="598.6" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="599.4" y="563.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="602.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="599.4" y="547.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="602.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="599.4" y="531.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="602.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.11%)</title><rect x="599.4" y="515.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="602.4" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (47 samples, 4.99%)</title><rect x="600.6" y="563.0" width="59.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.6" y="574.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (46 samples, 4.89%)</title><rect x="601.9" y="547.0" width="57.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.9" y="558.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (21 samples, 2.23%)</title><rect x="633.2" y="531.0" width="26.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.2" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.21%)</title><rect x="647.0" y="515.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="650.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.64%)</title><rect x="649.5" y="515.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.5" y="526.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.21%)</title><rect x="657.1" y="515.0" width="2.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="660.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.85%)</title><rect x="659.6" y="611.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.6" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.85%)</title><rect x="659.6" y="595.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.85%)</title><rect x="659.6" y="579.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.85%)</title><rect x="659.6" y="563.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.6" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="665.8" y="547.0" width="3.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="668.8" y="558.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="665.8" y="531.0" width="3.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="668.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (55 samples, 5.84%)</title><rect x="669.6" y="627.0" width="69.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.6" y="638.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (55 samples, 5.84%)</title><rect x="669.6" y="611.0" width="69.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="672.6" y="622.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1678637145.process (25 samples, 2.66%)</title><rect x="672.1" y="595.0" width="31.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.1" y="606.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 2.66%)</title><rect x="672.1" y="579.0" width="31.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="675.1" y="590.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 2.34%)</title><rect x="672.1" y="563.0" width="27.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.1" y="574.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="673.4" y="547.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="676.4" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="673.4" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="676.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="673.4" y="515.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="676.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="673.4" y="499.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="676.4" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.11%)</title><rect x="673.4" y="483.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="676.4" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="674.6" y="547.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.6" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="674.6" y="531.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="677.6" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.11%)</title><rect x="674.6" y="515.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.6" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.11%)</title><rect x="674.6" y="499.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.11%)</title><rect x="674.6" y="483.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.64%)</title><rect x="675.9" y="547.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.9" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.53%)</title><rect x="677.1" y="531.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.1" y="542.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.53%)</title><rect x="677.1" y="515.0" width="6.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="680.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.21%)</title><rect x="683.4" y="547.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="686.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 1.06%)</title><rect x="685.9" y="547.0" width="12.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="688.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.11%)</title><rect x="698.4" y="547.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="701.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.32%)</title><rect x="699.7" y="563.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="702.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.21%)</title><rect x="700.9" y="547.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="703.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.53%)</title><rect x="703.5" y="595.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="706.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.21%)</title><rect x="709.7" y="595.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="712.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.11%)</title><rect x="709.7" y="579.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="712.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="709.7" y="563.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="712.7" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="709.7" y="547.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="712.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="709.7" y="531.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="712.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.11%)</title><rect x="711.0" y="579.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="714.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.11%)</title><rect x="711.0" y="563.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="714.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.11%)</title><rect x="711.0" y="547.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="714.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="712.2" y="595.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="712.2" y="579.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="715.2" y="590.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.32%)</title><rect x="713.5" y="579.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="716.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (3 samples, 0.32%)</title><rect x="717.2" y="595.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.2" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (3 samples, 0.32%)</title><rect x="717.2" y="579.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/1030127809.get$Lambda (3 samples, 0.32%)</title><rect x="717.2" y="563.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="720.2" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.11%)</title><rect x="721.0" y="595.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.0" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.43%)</title><rect x="722.3" y="595.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.3" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.32%)</title><rect x="723.5" y="579.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.5" y="590.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.32%)</title><rect x="723.5" y="563.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="726.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.21%)</title><rect x="727.3" y="595.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="730.3" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.21%)</title><rect x="727.3" y="579.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="730.3" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.53%)</title><rect x="729.8" y="595.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="732.3" y="579.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="735.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.11%)</title><rect x="732.3" y="563.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="735.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.21%)</title><rect x="733.5" y="579.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="736.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="736.1" y="595.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="736.1" y="579.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.21%)</title><rect x="736.1" y="563.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="739.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.21%)</title><rect x="736.1" y="547.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.21%)</title><rect x="736.1" y="531.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="739.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.21%)</title><rect x="736.1" y="515.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="739.1" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="737.3" y="499.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="740.3" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1621969366.linkToTargetMethod (1 samples, 0.11%)</title><rect x="738.6" y="627.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="741.6" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/936580213.invokeStatic_L3_L (1 samples, 0.11%)</title><rect x="738.6" y="611.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="741.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/958945566.get$Lambda (1 samples, 0.11%)</title><rect x="738.6" y="595.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="741.6" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="738.6" y="579.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="741.6" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="738.6" y="563.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="741.6" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="738.6" y="547.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="741.6" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="738.6" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="741.6" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="738.6" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="741.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.49%)</title><rect x="739.8" y="627.0" width="17.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.49%)</title><rect x="739.8" y="611.0" width="17.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="742.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.49%)</title><rect x="739.8" y="595.0" width="17.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.43%)</title><rect x="739.8" y="579.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="742.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.43%)</title><rect x="739.8" y="563.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.43%)</title><rect x="739.8" y="547.0" width="5.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="742.8" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="743.6" y="531.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="746.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 1.06%)</title><rect x="744.8" y="579.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="747.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$295/958945566.accept (8 samples, 0.85%)</title><rect x="747.3" y="563.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="750.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (8 samples, 0.85%)</title><rect x="747.3" y="547.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (8 samples, 0.85%)</title><rect x="747.3" y="531.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="750.3" y="542.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (8 samples, 0.85%)</title><rect x="747.3" y="515.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.3" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.create (8 samples, 0.85%)</title><rect x="747.3" y="499.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="750.3" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="749.9" y="483.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="752.9" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.43%)</title><rect x="751.1" y="483.0" width="5.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="754.1" y="494.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="751.1" y="467.0" width="5.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="754.1" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="756.1" y="483.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="759.1" y="494.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.21%)</title><rect x="757.4" y="627.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="760.4" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.43%)</title><rect x="759.9" y="643.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="762.9" y="654.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="759.9" y="627.0" width="5.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="762.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.21%)</title><rect x="764.9" y="659.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="767.9" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.21%)</title><rect x="764.9" y="643.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.9" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.21%)</title><rect x="764.9" y="627.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.11%)</title><rect x="764.9" y="611.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="766.2" y="611.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="769.2" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="766.2" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.2" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="766.2" y="579.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="769.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="766.2" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="769.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.11%)</title><rect x="766.2" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="769.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.21%)</title><rect x="767.4" y="707.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="770.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.21%)</title><rect x="767.4" y="691.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="770.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.21%)</title><rect x="767.4" y="675.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="770.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.21%)</title><rect x="767.4" y="659.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="770.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.11%)</title><rect x="768.7" y="643.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="771.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (224 samples, 23.80%)</title><rect x="769.9" y="707.0" width="280.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.9" y="718.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (222 samples, 23.59%)</title><rect x="772.4" y="691.0" width="278.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="775.4" y="702.0">java/util/concurrent/LinkedBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (220 samples, 23.38%)</title><rect x="774.9" y="675.0" width="275.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.9" y="686.0">java/util/concurrent/locks/AbstractQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 2.13%)</title><rect x="790.0" y="659.0" width="25.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="793.0" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (16 samples, 1.70%)</title><rect x="815.1" y="659.0" width="20.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="818.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (16 samples, 1.70%)</title><rect x="815.1" y="643.0" width="20.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (172 samples, 18.28%)</title><rect x="835.1" y="659.0" width="215.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="838.1" y="670.0">java/util/concurrent/locks/L..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (160 samples, 17.00%)</title><rect x="850.2" y="643.0" width="200.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="853.2" y="654.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="853.9" y="627.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="856.9" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="855.2" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.2" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (153 samples, 16.26%)</title><rect x="856.4" y="627.0" width="191.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="859.4" y="638.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="861.5" y="611.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.5" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (13 samples, 1.38%)</title><rect x="862.7" y="611.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="865.7" y="622.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.64%)</title><rect x="866.5" y="595.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.5" y="606.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.32%)</title><rect x="866.5" y="579.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="869.5" y="590.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.11%)</title><rect x="869.0" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="872.0" y="574.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.32%)</title><rect x="870.2" y="579.0" width="3.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="873.2" y="590.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="874.0" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.0" y="606.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="875.2" y="595.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="878.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.21%)</title><rect x="876.5" y="595.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.5" y="606.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.64%)</title><rect x="879.0" y="611.0" width="7.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="882.0" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (49 samples, 5.21%)</title><rect x="886.5" y="611.0" width="61.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="889.5" y="622.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 6.06%)</title><rect x="948.0" y="611.0" width="71.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="951.0" y="622.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.53%)</title><rect x="1019.5" y="611.0" width="6.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1022.5" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="1025.7" y="611.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1028.7" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.43%)</title><rect x="1027.0" y="611.0" width="5.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1030.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.21%)</title><rect x="1032.0" y="611.0" width="2.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1035.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.32%)</title><rect x="1034.5" y="611.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1037.5" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.21%)</title><rect x="1038.3" y="611.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1041.3" y="622.0"></text>
</g>
<g>
<title>_init (2 samples, 0.21%)</title><rect x="1040.8" y="611.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1043.8" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.11%)</title><rect x="1043.3" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.3" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.21%)</title><rect x="1044.5" y="611.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.5" y="622.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="1047.0" y="611.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="1048.3" y="627.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1051.3" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1049.6" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1050.8" y="755.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1053.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1050.8" y="739.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1050.8" y="723.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.11%)</title><rect x="1050.8" y="707.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1053.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.11%)</title><rect x="1050.8" y="691.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1053.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.11%)</title><rect x="1050.8" y="675.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1053.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="659.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1053.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="643.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="627.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1053.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="611.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.11%)</title><rect x="1050.8" y="595.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1053.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.11%)</title><rect x="1050.8" y="579.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1053.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.11%)</title><rect x="1050.8" y="563.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1053.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="547.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1053.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$2.onSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="531.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1053.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$2.onSuccess (1 samples, 0.11%)</title><rect x="1050.8" y="515.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1053.8" y="526.0"></text>
</g>
<g>
<title>start_thread (110 samples, 11.69%)</title><rect x="1052.1" y="755.0" width="137.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1055.1" y="766.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (110 samples, 11.69%)</title><rect x="1052.1" y="739.0" width="137.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1055.1" y="750.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 2.44%)</title><rect x="1052.1" y="723.0" width="28.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1055.1" y="734.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.21%)</title><rect x="1052.1" y="707.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1055.1" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.21%)</title><rect x="1052.1" y="691.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1055.1" y="702.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.21%)</title><rect x="1052.1" y="675.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1055.1" y="686.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 2.23%)</title><rect x="1054.6" y="707.0" width="26.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.6" y="718.0">G..</text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.74%)</title><rect x="1054.6" y="691.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1057.6" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.32%)</title><rect x="1054.6" y="675.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.6" y="686.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.11%)</title><rect x="1054.6" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.6" y="670.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.11%)</title><rect x="1054.6" y="643.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1057.6" y="654.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.11%)</title><rect x="1054.6" y="627.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.6" y="638.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.21%)</title><rect x="1055.8" y="659.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.11%)</title><rect x="1057.1" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.1" y="654.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.11%)</title><rect x="1057.1" y="627.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1060.1" y="638.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.11%)</title><rect x="1057.1" y="611.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1060.1" y="622.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.11%)</title><rect x="1057.1" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1060.1" y="606.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.11%)</title><rect x="1057.1" y="579.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.1" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.43%)</title><rect x="1058.3" y="675.0" width="5.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.3" y="686.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.43%)</title><rect x="1058.3" y="659.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.3" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (14 samples, 1.49%)</title><rect x="1063.3" y="691.0" width="17.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1066.3" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (14 samples, 1.49%)</title><rect x="1063.3" y="675.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (14 samples, 1.49%)</title><rect x="1063.3" y="659.0" width="17.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.3" y="670.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (14 samples, 1.49%)</title><rect x="1063.3" y="643.0" width="17.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1066.3" y="654.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (14 samples, 1.49%)</title><rect x="1063.3" y="627.0" width="17.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.3" y="638.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (14 samples, 1.49%)</title><rect x="1063.3" y="611.0" width="17.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.3" y="622.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (7 samples, 0.74%)</title><rect x="1072.1" y="595.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1075.1" y="606.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.32%)</title><rect x="1072.1" y="579.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1075.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.21%)</title><rect x="1075.9" y="579.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1078.9" y="590.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (2 samples, 0.21%)</title><rect x="1075.9" y="563.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.9" y="574.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1078.4" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1081.4" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1078.4" y="563.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.4" y="574.0"></text>
</g>
<g>
<title>FilterIntoCSClosure::do_oop(unsigned int*) (1 samples, 0.11%)</title><rect x="1078.4" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.4" y="558.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.11%)</title><rect x="1079.6" y="579.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1082.6" y="590.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 9.03%)</title><rect x="1080.9" y="723.0" width="106.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1083.9" y="734.0">JavaThread::r..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 9.03%)</title><rect x="1080.9" y="707.0" width="106.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1083.9" y="718.0">JavaThread::t..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 9.03%)</title><rect x="1080.9" y="691.0" width="106.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.9" y="702.0">CompileBroker..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (84 samples, 8.93%)</title><rect x="1080.9" y="675.0" width="105.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.9" y="686.0">CompileBroker..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (84 samples, 8.93%)</title><rect x="1080.9" y="659.0" width="105.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.9" y="670.0">C2Compiler::c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (84 samples, 8.93%)</title><rect x="1080.9" y="643.0" width="105.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.9" y="654.0">Compile::Comp..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.11%)</title><rect x="1080.9" y="627.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1083.9" y="638.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.11%)</title><rect x="1080.9" y="611.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1080.9" y="595.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1083.9" y="606.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (38 samples, 4.04%)</title><rect x="1082.2" y="627.0" width="47.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1085.2" y="638.0">Comp..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.32%)</title><rect x="1082.2" y="611.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.2" y="622.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.21%)</title><rect x="1082.2" y="595.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1085.2" y="606.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.11%)</title><rect x="1082.2" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.2" y="590.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.11%)</title><rect x="1082.2" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1085.2" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.11%)</title><rect x="1083.4" y="579.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.4" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.11%)</title><rect x="1083.4" y="563.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.4" y="574.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.11%)</title><rect x="1084.7" y="595.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1087.7" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.21%)</title><rect x="1085.9" y="611.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1088.9" y="622.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.21%)</title><rect x="1085.9" y="595.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.9" y="606.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.11%)</title><rect x="1087.2" y="579.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.2" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.32%)</title><rect x="1088.4" y="611.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1091.4" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.32%)</title><rect x="1088.4" y="595.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1091.4" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (3 samples, 0.32%)</title><rect x="1088.4" y="579.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (30 samples, 3.19%)</title><rect x="1092.2" y="611.0" width="37.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1095.2" y="622.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.11%)</title><rect x="1092.2" y="595.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.2" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.11%)</title><rect x="1093.4" y="595.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.4" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.11%)</title><rect x="1093.4" y="579.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1096.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.11%)</title><rect x="1094.7" y="595.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.7" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1094.7" y="579.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1097.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.64%)</title><rect x="1096.0" y="595.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.0" y="606.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.11%)</title><rect x="1101.0" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.0" y="590.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.11%)</title><rect x="1101.0" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.0" y="574.0"></text>
</g>
<g>
<title>loadRangeNode::rule() const (1 samples, 0.11%)</title><rect x="1102.2" y="579.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.53%)</title><rect x="1103.5" y="595.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.5" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1106.0" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1109.0" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1106.0" y="563.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.0" y="574.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.11%)</title><rect x="1107.2" y="579.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.2" y="590.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.11%)</title><rect x="1108.5" y="579.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.5" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.11%)</title><rect x="1109.7" y="595.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1109.7" y="579.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.11%)</title><rect x="1111.0" y="595.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.0" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.21%)</title><rect x="1112.3" y="595.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.32%)</title><rect x="1114.8" y="595.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="606.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.11%)</title><rect x="1117.3" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.11%)</title><rect x="1118.5" y="595.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.5" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.11%)</title><rect x="1119.8" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.8" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.11%)</title><rect x="1119.8" y="579.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.8" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.11%)</title><rect x="1119.8" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.8" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.21%)</title><rect x="1121.0" y="595.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.0" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.21%)</title><rect x="1121.0" y="579.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.0" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.11%)</title><rect x="1123.5" y="595.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.5" y="606.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.11%)</title><rect x="1123.5" y="579.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.5" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.32%)</title><rect x="1124.8" y="595.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.8" y="606.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.11%)</title><rect x="1124.8" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.8" y="590.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.11%)</title><rect x="1126.0" y="579.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.0" y="590.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1127.3" y="579.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.3" y="590.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="1127.3" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.3" y="574.0"></text>
</g>
<g>
<title>rRegIOper::type() const (1 samples, 0.11%)</title><rect x="1128.6" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.6" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (41 samples, 4.36%)</title><rect x="1129.8" y="627.0" width="51.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.8" y="638.0">Compi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.21%)</title><rect x="1129.8" y="611.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.21%)</title><rect x="1129.8" y="595.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1131.1" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.1" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.11%)</title><rect x="1131.1" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (24 samples, 2.55%)</title><rect x="1132.3" y="611.0" width="30.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.3" y="622.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1132.3" y="595.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.3" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (21 samples, 2.23%)</title><rect x="1133.6" y="595.0" width="26.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.6" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 2.13%)</title><rect x="1134.8" y="579.0" width="25.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.8" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (20 samples, 2.13%)</title><rect x="1134.8" y="563.0" width="25.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.8" y="574.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.32%)</title><rect x="1156.1" y="547.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.1" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.11%)</title><rect x="1159.9" y="595.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1161.2" y="595.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.11%)</title><rect x="1161.2" y="579.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.11%)</title><rect x="1161.2" y="563.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.11%)</title><rect x="1161.2" y="547.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (10 samples, 1.06%)</title><rect x="1162.4" y="611.0" width="12.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.4" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (10 samples, 1.06%)</title><rect x="1162.4" y="595.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.4" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.21%)</title><rect x="1162.4" y="579.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.4" y="590.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.11%)</title><rect x="1164.9" y="579.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.21%)</title><rect x="1166.2" y="579.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.2" y="590.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.11%)</title><rect x="1167.4" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1168.7" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.7" y="590.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1168.7" y="563.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.7" y="574.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.21%)</title><rect x="1169.9" y="579.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.21%)</title><rect x="1169.9" y="563.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1169.9" y="547.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1169.9" y="531.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="515.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="499.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="483.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="467.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="451.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.9" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="435.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="419.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="403.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="387.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.9" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="371.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.9" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="355.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.9" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="339.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.9" y="350.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1169.9" y="323.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="334.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1169.9" y="307.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.9" y="318.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1171.2" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="526.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1171.2" y="499.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.2" y="510.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1172.4" y="579.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="590.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1172.4" y="563.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.4" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.11%)</title><rect x="1172.4" y="547.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.4" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.11%)</title><rect x="1172.4" y="531.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.4" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1172.4" y="515.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.4" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1172.4" y="499.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.4" y="510.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1173.7" y="579.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (4 samples, 0.43%)</title><rect x="1175.0" y="611.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>Node::init_req(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1175.0" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.0" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1176.2" y="595.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1176.2" y="579.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.2" y="590.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1176.2" y="563.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.2" y="574.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 0.21%)</title><rect x="1177.5" y="595.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.5" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.21%)</title><rect x="1177.5" y="579.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.5" y="590.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.21%)</title><rect x="1177.5" y="563.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.5" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1180.0" y="611.0" width="1.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.43%)</title><rect x="1181.2" y="627.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.43%)</title><rect x="1181.2" y="611.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.43%)</title><rect x="1181.2" y="595.0" width="5.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.43%)</title><rect x="1181.2" y="579.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.43%)</title><rect x="1181.2" y="563.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.43%)</title><rect x="1181.2" y="547.0" width="5.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1181.2" y="531.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1181.2" y="515.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1181.2" y="499.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.2" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1181.2" y="483.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.2" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1181.2" y="467.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1181.2" y="451.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1181.2" y="435.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1181.2" y="419.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.2" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1181.2" y="403.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1181.2" y="387.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1181.2" y="371.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1181.2" y="355.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="366.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1181.2" y="339.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1184.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1182.5" y="531.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.32%)</title><rect x="1182.5" y="515.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.11%)</title><rect x="1182.5" y="499.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.11%)</title><rect x="1182.5" y="483.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.11%)</title><rect x="1182.5" y="467.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1182.5" y="451.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseTransform*) (1 samples, 0.11%)</title><rect x="1182.5" y="435.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1182.5" y="419.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.11%)</title><rect x="1182.5" y="403.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.11%)</title><rect x="1182.5" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1182.5" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1183.7" y="499.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1183.7" y="483.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1183.7" y="467.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.21%)</title><rect x="1183.7" y="451.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.7" y="435.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.7" y="419.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.7" y="403.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.7" y="387.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.7" y="371.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.7" y="355.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.7" y="339.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.7" y="323.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.7" y="307.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.7" y="291.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.7" y="275.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.7" y="259.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.7" y="243.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.7" y="227.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.7" y="238.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.11%)</title><rect x="1183.7" y="211.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.7" y="222.0"></text>
</g>
<g>
<title>GraphKit::GraphKit(JVMState*) (1 samples, 0.11%)</title><rect x="1183.7" y="195.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="206.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1183.7" y="179.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1186.7" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1185.0" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1185.0" y="419.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1185.0" y="403.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1185.0" y="387.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1185.0" y="371.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1185.0" y="355.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1185.0" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1185.0" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1185.0" y="307.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1185.0" y="291.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1185.0" y="275.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1185.0" y="259.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1185.0" y="243.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1185.0" y="227.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1185.0" y="211.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1185.0" y="195.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1185.0" y="179.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1185.0" y="163.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1185.0" y="147.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.0" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1185.0" y="131.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.0" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1185.0" y="115.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.0" y="126.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.11%)</title><rect x="1185.0" y="99.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.0" y="110.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.11%)</title><rect x="1185.0" y="83.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.0" y="94.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.11%)</title><rect x="1185.0" y="67.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.0" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1185.0" y="51.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.0" y="62.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1185.0" y="35.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.0" y="46.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.11%)</title><rect x="1186.2" y="675.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="686.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.11%)</title><rect x="1186.2" y="659.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.11%)</title><rect x="1186.2" y="643.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.2" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.11%)</title><rect x="1186.2" y="627.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.2" y="638.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.11%)</title><rect x="1186.2" y="611.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.21%)</title><rect x="1187.5" y="723.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.21%)</title><rect x="1187.5" y="707.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="718.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.21%)</title><rect x="1187.5" y="691.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="702.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.21%)</title><rect x="1187.5" y="675.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.5" y="686.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.21%)</title><rect x="1187.5" y="659.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.21%)</title><rect x="1187.5" y="643.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.11%)</title><rect x="1187.5" y="627.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="638.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.11%)</title><rect x="1187.5" y="611.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="622.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.11%)</title><rect x="1187.5" y="595.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.5" y="606.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="1188.7" y="627.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.7" y="638.0"></text>
</g>
</g>
</svg>

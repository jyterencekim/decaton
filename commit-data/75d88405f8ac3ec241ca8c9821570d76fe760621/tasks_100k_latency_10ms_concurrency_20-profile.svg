<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (253 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.40%)</title><rect x="10.0" y="1219.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.40%)</title><rect x="10.0" y="1203.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 7.11%)</title><rect x="14.7" y="1219.0" width="83.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1230.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (18 samples, 7.11%)</title><rect x="14.7" y="1203.0" width="83.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.7" y="1214.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.79%)</title><rect x="14.7" y="1187.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.79%)</title><rect x="14.7" y="1171.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.79%)</title><rect x="14.7" y="1155.0" width="9.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.maybeThrowInvalidGroupIdException (1 samples, 0.40%)</title><rect x="14.7" y="1139.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.40%)</title><rect x="19.3" y="1139.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.40%)</title><rect x="19.3" y="1123.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="19.3" y="1107.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.40%)</title><rect x="19.3" y="1091.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.40%)</title><rect x="19.3" y="1075.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.40%)</title><rect x="19.3" y="1059.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.40%)</title><rect x="19.3" y="1043.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.40%)</title><rect x="19.3" y="1027.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.&lt;init&gt; (1 samples, 0.40%)</title><rect x="19.3" y="1011.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.&lt;init&gt; (1 samples, 0.40%)</title><rect x="19.3" y="995.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.40%)</title><rect x="19.3" y="979.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 6.32%)</title><rect x="24.0" y="1187.0" width="74.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.0" y="1198.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.40%)</title><rect x="24.0" y="1171.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.40%)</title><rect x="24.0" y="1155.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.40%)</title><rect x="24.0" y="1139.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="28.7" y="1171.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="28.7" y="1155.0" width="4.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="31.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.19%)</title><rect x="33.3" y="1171.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/21369333.accept (2 samples, 0.79%)</title><rect x="33.3" y="1155.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 0.79%)</title><rect x="33.3" y="1139.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.79%)</title><rect x="33.3" y="1123.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="36.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.79%)</title><rect x="33.3" y="1107.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.79%)</title><rect x="33.3" y="1091.0" width="9.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="36.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.79%)</title><rect x="33.3" y="1075.0" width="9.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.79%)</title><rect x="33.3" y="1059.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.79%)</title><rect x="33.3" y="1043.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.40%)</title><rect x="42.6" y="1155.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (1 samples, 0.40%)</title><rect x="42.6" y="1139.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.40%)</title><rect x="42.6" y="1123.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.40%)</title><rect x="42.6" y="1107.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.6" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="42.6" y="1091.0" width="4.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="45.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.35%)</title><rect x="47.3" y="1171.0" width="51.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.3" y="1182.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.35%)</title><rect x="47.3" y="1155.0" width="51.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.3" y="1166.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.77%)</title><rect x="47.3" y="1139.0" width="32.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.3" y="1150.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="47.3" y="1123.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="47.3" y="1107.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="47.3" y="1091.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="47.3" y="1075.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.40%)</title><rect x="47.3" y="1059.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.3" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.40%)</title><rect x="47.3" y="1043.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.3" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.40%)</title><rect x="47.3" y="1027.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.3" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.40%)</title><rect x="47.3" y="1011.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.40%)</title><rect x="47.3" y="995.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.40%)</title><rect x="47.3" y="979.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.3" y="990.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.40%)</title><rect x="47.3" y="963.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="50.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.98%)</title><rect x="52.0" y="1123.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.0" y="1134.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.40%)</title><rect x="52.0" y="1107.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.0" y="1118.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.40%)</title><rect x="52.0" y="1091.0" width="4.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="55.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.19%)</title><rect x="56.6" y="1107.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (3 samples, 1.19%)</title><rect x="56.6" y="1091.0" width="14.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="59.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.19%)</title><rect x="56.6" y="1075.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.40%)</title><rect x="56.6" y="1059.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.40%)</title><rect x="56.6" y="1043.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.40%)</title><rect x="56.6" y="1027.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.40%)</title><rect x="56.6" y="1011.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.40%)</title><rect x="56.6" y="995.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.40%)</title><rect x="56.6" y="979.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.40%)</title><rect x="56.6" y="963.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.40%)</title><rect x="56.6" y="947.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.79%)</title><rect x="61.3" y="1059.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.79%)</title><rect x="61.3" y="1043.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.79%)</title><rect x="61.3" y="1027.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.79%)</title><rect x="61.3" y="1011.0" width="9.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.40%)</title><rect x="70.6" y="1107.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.40%)</title><rect x="70.6" y="1091.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.40%)</title><rect x="70.6" y="1075.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.6" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.40%)</title><rect x="70.6" y="1059.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.6" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="70.6" y="1043.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.40%)</title><rect x="70.6" y="1027.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="75.3" y="1123.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="75.3" y="1107.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.40%)</title><rect x="75.3" y="1091.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="75.3" y="1075.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="75.3" y="1059.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="75.3" y="1043.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="75.3" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.79%)</title><rect x="80.0" y="1139.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.40%)</title><rect x="80.0" y="1123.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.40%)</title><rect x="80.0" y="1107.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="80.0" y="1091.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="80.0" y="1075.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="80.0" y="1059.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.0" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="80.0" y="1043.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="80.0" y="1027.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.40%)</title><rect x="80.0" y="1011.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="83.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$84/362766656.get (1 samples, 0.40%)</title><rect x="80.0" y="995.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.40%)</title><rect x="84.6" y="1123.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.40%)</title><rect x="84.6" y="1107.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.40%)</title><rect x="84.6" y="1091.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.40%)</title><rect x="84.6" y="1075.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.40%)</title><rect x="89.3" y="1139.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="89.3" y="1123.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="92.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="89.3" y="1107.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="89.3" y="1091.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.40%)</title><rect x="89.3" y="1075.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.40%)</title><rect x="89.3" y="1059.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.40%)</title><rect x="89.3" y="1043.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.40%)</title><rect x="89.3" y="1027.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.40%)</title><rect x="89.3" y="1011.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.3" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.40%)</title><rect x="89.3" y="995.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.3" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.40%)</title><rect x="89.3" y="979.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.3" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (1 samples, 0.40%)</title><rect x="89.3" y="963.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.3" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="89.3" y="947.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="94.0" y="1139.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="94.0" y="1123.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.40%)</title><rect x="94.0" y="1107.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (120 samples, 47.43%)</title><rect x="98.6" y="1219.0" width="559.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.6" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (120 samples, 47.43%)</title><rect x="98.6" y="1203.0" width="559.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="101.6" y="1214.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (120 samples, 47.43%)</title><rect x="98.6" y="1187.0" width="559.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.6" y="1198.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/964016.run (115 samples, 45.45%)</title><rect x="107.9" y="1171.0" width="536.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="110.9" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (115 samples, 45.45%)</title><rect x="107.9" y="1155.0" width="536.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.9" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (115 samples, 45.45%)</title><rect x="107.9" y="1139.0" width="536.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.9" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (115 samples, 45.45%)</title><rect x="107.9" y="1123.0" width="536.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="110.9" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.79%)</title><rect x="107.9" y="1107.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.79%)</title><rect x="107.9" y="1091.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="110.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.79%)</title><rect x="107.9" y="1075.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.79%)</title><rect x="107.9" y="1059.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="110.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (11 samples, 4.35%)</title><rect x="117.3" y="1107.0" width="51.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="1118.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.35%)</title><rect x="117.3" y="1091.0" width="51.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.3" y="1102.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 4.35%)</title><rect x="117.3" y="1075.0" width="51.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.3" y="1086.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 3.56%)</title><rect x="126.6" y="1059.0" width="42.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="129.6" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.40%)</title><rect x="126.6" y="1043.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.40%)</title><rect x="126.6" y="1027.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="129.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.40%)</title><rect x="126.6" y="1011.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="129.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1561609879.accept (1 samples, 0.40%)</title><rect x="126.6" y="995.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="129.6" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 3.16%)</title><rect x="131.3" y="1043.0" width="37.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="134.3" y="1054.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$298/1561609879.accept (8 samples, 3.16%)</title><rect x="131.3" y="1027.0" width="37.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.3" y="1038.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (8 samples, 3.16%)</title><rect x="131.3" y="1011.0" width="37.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.3" y="1022.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 3.16%)</title><rect x="131.3" y="995.0" width="37.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.3" y="1006.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 2.37%)</title><rect x="140.6" y="979.0" width="28.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.6" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/352421491.accept (1 samples, 0.40%)</title><rect x="149.9" y="963.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.9" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1684598170.accept (1 samples, 0.40%)</title><rect x="154.6" y="963.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="157.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.79%)</title><rect x="159.2" y="963.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.79%)</title><rect x="159.2" y="947.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="162.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (21 samples, 8.30%)</title><rect x="168.6" y="1107.0" width="97.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="171.6" y="1118.0">com/linecor..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="168.6" y="1091.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="171.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="168.6" y="1075.0" width="4.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="171.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (20 samples, 7.91%)</title><rect x="173.2" y="1091.0" width="93.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.2" y="1102.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (20 samples, 7.91%)</title><rect x="173.2" y="1075.0" width="93.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.2" y="1086.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 7.91%)</title><rect x="173.2" y="1059.0" width="93.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="1070.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 7.91%)</title><rect x="173.2" y="1043.0" width="93.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.2" y="1054.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 7.91%)</title><rect x="173.2" y="1027.0" width="93.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="1038.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 3.95%)</title><rect x="173.2" y="1011.0" width="46.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.2" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 2.37%)</title><rect x="173.2" y="995.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.2" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 2.37%)</title><rect x="173.2" y="979.0" width="28.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.2" y="990.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (6 samples, 2.37%)</title><rect x="173.2" y="963.0" width="28.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.2" y="974.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 2.37%)</title><rect x="173.2" y="947.0" width="28.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.2" y="958.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 1.98%)</title><rect x="173.2" y="931.0" width="23.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.2" y="942.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="196.6" y="931.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.58%)</title><rect x="201.2" y="995.0" width="18.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.58%)</title><rect x="201.2" y="979.0" width="18.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.2" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="201.2" y="963.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="204.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="201.2" y="947.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="204.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.40%)</title><rect x="205.9" y="963.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.40%)</title><rect x="205.9" y="947.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.79%)</title><rect x="210.6" y="963.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.79%)</title><rect x="210.6" y="947.0" width="9.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.40%)</title><rect x="210.6" y="931.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.40%)</title><rect x="215.2" y="931.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="218.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="215.2" y="915.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="218.2" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="215.2" y="899.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="218.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="215.2" y="883.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="218.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 3.56%)</title><rect x="219.9" y="1011.0" width="42.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.9" y="1022.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.79%)</title><rect x="219.9" y="995.0" width="9.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.79%)</title><rect x="219.9" y="979.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="224.5" y="963.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.79%)</title><rect x="229.2" y="995.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="233.9" y="979.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="233.9" y="963.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.40%)</title><rect x="238.5" y="995.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.40%)</title><rect x="238.5" y="979.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="238.5" y="963.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="241.5" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="238.5" y="947.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="241.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="238.5" y="931.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="241.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.40%)</title><rect x="238.5" y="915.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="241.5" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.40%)</title><rect x="238.5" y="899.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="241.5" y="910.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.40%)</title><rect x="238.5" y="883.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="241.5" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.40%)</title><rect x="238.5" y="867.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="241.5" y="878.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.40%)</title><rect x="238.5" y="851.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="241.5" y="862.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.40%)</title><rect x="238.5" y="835.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="241.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 1.58%)</title><rect x="243.2" y="995.0" width="18.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.58%)</title><rect x="243.2" y="979.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="243.2" y="963.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="246.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="243.2" y="947.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.40%)</title><rect x="243.2" y="931.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.19%)</title><rect x="247.9" y="963.0" width="14.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.19%)</title><rect x="247.9" y="947.0" width="14.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.19%)</title><rect x="247.9" y="931.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="247.9" y="915.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="247.9" y="899.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="247.9" y="883.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="247.9" y="867.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.40%)</title><rect x="252.5" y="915.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="252.5" y="899.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="252.5" y="883.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.40%)</title><rect x="257.2" y="915.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.40%)</title><rect x="261.9" y="1011.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="264.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.40%)</title><rect x="261.9" y="995.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.40%)</title><rect x="261.9" y="979.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.40%)</title><rect x="261.9" y="963.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.9" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="261.9" y="947.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (81 samples, 32.02%)</title><rect x="266.5" y="1107.0" width="377.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.5" y="1118.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (11 samples, 4.35%)</title><rect x="266.5" y="1091.0" width="51.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="269.5" y="1102.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (10 samples, 3.95%)</title><rect x="271.2" y="1075.0" width="46.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.2" y="1086.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 3.56%)</title><rect x="275.8" y="1059.0" width="42.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.8" y="1070.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 3.56%)</title><rect x="275.8" y="1043.0" width="42.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.8" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 3.16%)</title><rect x="280.5" y="1027.0" width="37.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.5" y="1038.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 1.98%)</title><rect x="294.5" y="1011.0" width="23.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="297.5" y="1022.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="317.8" y="1091.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.40%)</title><rect x="317.8" y="1075.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (11 samples, 4.35%)</title><rect x="322.5" y="1091.0" width="51.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.5" y="1102.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 4.35%)</title><rect x="322.5" y="1075.0" width="51.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.5" y="1086.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.79%)</title><rect x="327.2" y="1059.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.79%)</title><rect x="327.2" y="1043.0" width="9.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.79%)</title><rect x="327.2" y="1027.0" width="9.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.2" y="1038.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="331.8" y="1011.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="334.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.40%)</title><rect x="336.5" y="1059.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.40%)</title><rect x="336.5" y="1043.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.5" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="336.5" y="1027.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="339.5" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="336.5" y="1011.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="339.5" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="336.5" y="995.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="339.5" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.40%)</title><rect x="336.5" y="979.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="339.5" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.40%)</title><rect x="336.5" y="963.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.5" y="974.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.40%)</title><rect x="336.5" y="947.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="339.5" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.40%)</title><rect x="336.5" y="931.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="339.5" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.40%)</title><rect x="336.5" y="915.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="339.5" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.77%)</title><rect x="341.1" y="1059.0" width="32.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.1" y="1070.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.77%)</title><rect x="341.1" y="1043.0" width="32.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.1" y="1054.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="341.1" y="1027.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.40%)</title><rect x="341.1" y="1011.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="341.1" y="995.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.1" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.40%)</title><rect x="341.1" y="979.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="341.1" y="963.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="344.1" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.37%)</title><rect x="345.8" y="1027.0" width="28.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.8" y="1038.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 1.98%)</title><rect x="350.5" y="1011.0" width="23.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.5" y="1022.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.19%)</title><rect x="359.8" y="995.0" width="14.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.40%)</title><rect x="364.5" y="979.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="367.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.40%)</title><rect x="369.1" y="979.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (49 samples, 19.37%)</title><rect x="373.8" y="1091.0" width="228.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="376.8" y="1102.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (49 samples, 19.37%)</title><rect x="373.8" y="1075.0" width="228.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="376.8" y="1086.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/2082248242.process (39 samples, 15.42%)</title><rect x="378.5" y="1059.0" width="181.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.5" y="1070.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (39 samples, 15.42%)</title><rect x="378.5" y="1043.0" width="181.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.5" y="1054.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (37 samples, 14.62%)</title><rect x="383.1" y="1027.0" width="172.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.1" y="1038.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.79%)</title><rect x="383.1" y="1011.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="386.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.79%)</title><rect x="383.1" y="995.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.1" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.79%)</title><rect x="383.1" y="979.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.1" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.79%)</title><rect x="383.1" y="963.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="386.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.40%)</title><rect x="387.8" y="947.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="390.8" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (35 samples, 13.83%)</title><rect x="392.5" y="1011.0" width="163.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.5" y="1022.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (34 samples, 13.44%)</title><rect x="392.5" y="995.0" width="158.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.5" y="1006.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (30 samples, 11.86%)</title><rect x="401.8" y="979.0" width="139.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="404.8" y="990.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.79%)</title><rect x="406.4" y="963.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="409.4" y="974.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.40%)</title><rect x="415.8" y="963.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.8" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="420.4" y="963.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="423.4" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.19%)</title><rect x="425.1" y="963.0" width="14.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="428.1" y="974.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="434.4" y="947.0" width="4.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="437.4" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (22 samples, 8.70%)</title><rect x="439.1" y="963.0" width="102.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="442.1" y="974.0">os::sleep(Th..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.79%)</title><rect x="462.4" y="947.0" width="9.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="465.4" y="958.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.40%)</title><rect x="467.1" y="931.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="470.1" y="942.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.79%)</title><rect x="471.7" y="947.0" width="9.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="474.7" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 4.35%)</title><rect x="481.1" y="947.0" width="51.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="484.1" y="958.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.40%)</title><rect x="532.4" y="947.0" width="4.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="535.4" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.40%)</title><rect x="537.0" y="947.0" width="4.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="540.0" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.79%)</title><rect x="541.7" y="979.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="544.7" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="551.0" y="995.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="554.0" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="551.0" y="979.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="554.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.40%)</title><rect x="555.7" y="1027.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="555.7" y="1011.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="558.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.40%)</title><rect x="555.7" y="995.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="558.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="555.7" y="979.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="558.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.40%)</title><rect x="560.4" y="1059.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="563.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.40%)</title><rect x="565.0" y="1059.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="568.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.40%)</title><rect x="565.0" y="1043.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="568.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/462744063.get$Lambda (1 samples, 0.40%)</title><rect x="565.0" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="568.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.79%)</title><rect x="569.7" y="1059.0" width="9.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.79%)</title><rect x="569.7" y="1043.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.7" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="569.7" y="1027.0" width="4.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="572.7" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.40%)</title><rect x="574.3" y="1027.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="577.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="579.0" y="1059.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="582.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.40%)</title><rect x="583.7" y="1059.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.79%)</title><rect x="588.3" y="1059.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.79%)</title><rect x="588.3" y="1043.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="591.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.79%)</title><rect x="588.3" y="1027.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="591.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.40%)</title><rect x="588.3" y="1011.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="591.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.40%)</title><rect x="588.3" y="995.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="591.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.40%)</title><rect x="588.3" y="979.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="591.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="593.0" y="1011.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="596.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/462744063.accept (1 samples, 0.40%)</title><rect x="593.0" y="995.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="596.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (1 samples, 0.40%)</title><rect x="593.0" y="979.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.40%)</title><rect x="597.7" y="1059.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.56%)</title><rect x="602.3" y="1091.0" width="42.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="605.3" y="1102.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.56%)</title><rect x="602.3" y="1075.0" width="42.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="605.3" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.79%)</title><rect x="635.0" y="1059.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.40%)</title><rect x="635.0" y="1043.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.40%)</title><rect x="635.0" y="1027.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.40%)</title><rect x="635.0" y="1011.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1475096039.accept (1 samples, 0.40%)</title><rect x="635.0" y="995.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="639.6" y="1043.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$297/1475096039.accept (1 samples, 0.40%)</title><rect x="639.6" y="1027.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (1 samples, 0.40%)</title><rect x="639.6" y="1011.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="639.6" y="995.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.6" y="1006.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.40%)</title><rect x="639.6" y="979.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.6" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.40%)</title><rect x="639.6" y="963.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.19%)</title><rect x="644.3" y="1171.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.79%)</title><rect x="649.0" y="1155.0" width="9.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="652.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.79%)</title><rect x="649.0" y="1139.0" width="9.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="652.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.79%)</title><rect x="649.0" y="1123.0" width="9.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.79%)</title><rect x="649.0" y="1107.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="652.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.40%)</title><rect x="658.3" y="1219.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.40%)</title><rect x="658.3" y="1203.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="661.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="658.3" y="1187.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="661.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.40%)</title><rect x="658.3" y="1171.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.40%)</title><rect x="658.3" y="1155.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.40%)</title><rect x="658.3" y="1139.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="661.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$90/165456265.get (1 samples, 0.40%)</title><rect x="658.3" y="1123.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="661.3" y="1134.0"></text>
</g>
<g>
<title>start_thread (113 samples, 44.66%)</title><rect x="663.0" y="1219.0" width="527.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="666.0" y="1230.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (113 samples, 44.66%)</title><rect x="663.0" y="1203.0" width="527.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="666.0" y="1214.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 1.19%)</title><rect x="663.0" y="1187.0" width="14.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="666.0" y="1198.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.40%)</title><rect x="663.0" y="1171.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="666.0" y="1182.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.40%)</title><rect x="663.0" y="1155.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="666.0" y="1166.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="663.0" y="1139.0" width="4.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="666.0" y="1150.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.79%)</title><rect x="667.6" y="1171.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="670.6" y="1182.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.40%)</title><rect x="667.6" y="1155.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="670.6" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.40%)</title><rect x="667.6" y="1139.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="670.6" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="667.6" y="1123.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="670.6" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.40%)</title><rect x="667.6" y="1107.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="670.6" y="1118.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.40%)</title><rect x="667.6" y="1091.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="670.6" y="1102.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="672.3" y="1155.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="675.3" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="672.3" y="1139.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.3" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.40%)</title><rect x="672.3" y="1123.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="675.3" y="1134.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.40%)</title><rect x="672.3" y="1107.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="675.3" y="1118.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.40%)</title><rect x="672.3" y="1091.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="675.3" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.40%)</title><rect x="672.3" y="1075.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="675.3" y="1086.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.40%)</title><rect x="672.3" y="1059.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="675.3" y="1070.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.40%)</title><rect x="672.3" y="1043.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="675.3" y="1054.0"></text>
</g>
<g>
<title>G1ParPushHeapRSClosure::do_oop(unsigned int*) (1 samples, 0.40%)</title><rect x="672.3" y="1027.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="675.3" y="1038.0"></text>
</g>
<g>
<title>JavaThread::run() (110 samples, 43.48%)</title><rect x="677.0" y="1187.0" width="513.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.0" y="1198.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (110 samples, 43.48%)</title><rect x="677.0" y="1171.0" width="513.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="680.0" y="1182.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (109 samples, 43.08%)</title><rect x="677.0" y="1155.0" width="508.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="680.0" y="1166.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (108 samples, 42.69%)</title><rect x="677.0" y="1139.0" width="503.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="680.0" y="1150.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (106 samples, 41.90%)</title><rect x="677.0" y="1123.0" width="494.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="680.0" y="1134.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (106 samples, 41.90%)</title><rect x="677.0" y="1107.0" width="494.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="680.0" y="1118.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bo..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.40%)</title><rect x="677.0" y="1091.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="680.0" y="1102.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.40%)</title><rect x="677.0" y="1075.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.0" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="677.0" y="1059.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="680.0" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="677.0" y="1043.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="680.0" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="677.0" y="1027.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="680.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="677.0" y="1011.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="680.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="677.0" y="995.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="680.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="677.0" y="979.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="680.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="677.0" y="963.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.0" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.40%)</title><rect x="677.0" y="947.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.0" y="958.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.40%)</title><rect x="677.0" y="931.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="680.0" y="942.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (65 samples, 25.69%)</title><rect x="681.6" y="1091.0" width="303.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="684.6" y="1102.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.79%)</title><rect x="681.6" y="1075.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="684.6" y="1086.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.40%)</title><rect x="681.6" y="1059.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="684.6" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.40%)</title><rect x="686.3" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="689.3" y="1070.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.40%)</title><rect x="686.3" y="1043.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="689.3" y="1054.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.40%)</title><rect x="686.3" y="1027.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="689.3" y="1038.0"></text>
</g>
<g>
<title>CallStaticJavaDirectNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.40%)</title><rect x="686.3" y="1011.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="689.3" y="1022.0"></text>
</g>
<g>
<title>CompiledStaticCall::emit_to_interp_stub(CodeBuffer&amp;) (1 samples, 0.40%)</title><rect x="686.3" y="995.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="689.3" y="1006.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.40%)</title><rect x="686.3" y="979.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="689.3" y="990.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.40%)</title><rect x="686.3" y="963.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="689.3" y="974.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.40%)</title><rect x="686.3" y="947.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="689.3" y="958.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.19%)</title><rect x="690.9" y="1075.0" width="14.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="693.9" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="690.9" y="1059.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.9" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.40%)</title><rect x="690.9" y="1043.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="693.9" y="1054.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.40%)</title><rect x="695.6" y="1059.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="698.6" y="1070.0"></text>
</g>
<g>
<title>loadNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.40%)</title><rect x="700.3" y="1059.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="703.3" y="1070.0"></text>
</g>
<g>
<title>Address::make_raw(int, int, int, int, relocInfo::relocType) (1 samples, 0.40%)</title><rect x="700.3" y="1043.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="703.3" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.37%)</title><rect x="704.9" y="1075.0" width="28.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.9" y="1086.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.37%)</title><rect x="704.9" y="1059.0" width="28.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="707.9" y="1070.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.19%)</title><rect x="709.6" y="1043.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="712.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.79%)</title><rect x="723.6" y="1043.0" width="9.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="723.6" y="1027.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="726.6" y="1038.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.40%)</title><rect x="728.3" y="1027.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="731.3" y="1038.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.40%)</title><rect x="728.3" y="1011.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.3" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.40%)</title><rect x="732.9" y="1075.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="735.9" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.40%)</title><rect x="732.9" y="1059.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="735.9" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.98%)</title><rect x="737.6" y="1075.0" width="23.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="740.6" y="1086.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.98%)</title><rect x="737.6" y="1059.0" width="23.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="740.6" y="1070.0">P..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.40%)</title><rect x="737.6" y="1043.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.6" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="742.3" y="1043.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="745.3" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.79%)</title><rect x="746.9" y="1043.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="749.9" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.40%)</title><rect x="751.6" y="1027.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="754.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="756.2" y="1043.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="759.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 18.58%)</title><rect x="760.9" y="1075.0" width="219.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="763.9" y="1086.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.79%)</title><rect x="760.9" y="1059.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="763.9" y="1070.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 1.19%)</title><rect x="770.2" y="1059.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="773.2" y="1070.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.40%)</title><rect x="779.6" y="1043.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="782.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 1.58%)</title><rect x="784.2" y="1059.0" width="18.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="787.2" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.40%)</title><rect x="784.2" y="1043.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.40%)</title><rect x="788.9" y="1043.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.79%)</title><rect x="793.6" y="1043.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="796.6" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="798.2" y="1027.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="801.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 2.37%)</title><rect x="802.9" y="1059.0" width="28.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="805.9" y="1070.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.40%)</title><rect x="826.2" y="1043.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="829.2" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 3.56%)</title><rect x="830.9" y="1059.0" width="41.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.9" y="1070.0">Pha..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.19%)</title><rect x="858.9" y="1043.0" width="13.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="861.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.79%)</title><rect x="863.5" y="1027.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="866.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.40%)</title><rect x="872.8" y="1059.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.40%)</title><rect x="872.8" y="1043.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="875.8" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="872.8" y="1027.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="875.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.19%)</title><rect x="877.5" y="1059.0" width="14.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="880.5" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="886.8" y="1043.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="889.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.40%)</title><rect x="891.5" y="1059.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.40%)</title><rect x="891.5" y="1043.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.19%)</title><rect x="896.2" y="1059.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="899.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.19%)</title><rect x="896.2" y="1043.0" width="14.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="899.2" y="1054.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 1.98%)</title><rect x="910.2" y="1059.0" width="23.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.2" y="1070.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 1.98%)</title><rect x="910.2" y="1043.0" width="23.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="913.2" y="1054.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 1.98%)</title><rect x="910.2" y="1027.0" width="23.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="913.2" y="1038.0">P..</text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 1.19%)</title><rect x="910.2" y="1011.0" width="14.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="919.5" y="995.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.5" y="1006.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.79%)</title><rect x="924.2" y="1011.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="927.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.79%)</title><rect x="933.5" y="1059.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="936.5" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 2.77%)</title><rect x="942.8" y="1059.0" width="32.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.8" y="1070.0">Ph..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="956.8" y="1043.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="959.8" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.79%)</title><rect x="961.5" y="1043.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.5" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="970.8" y="1043.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="973.8" y="1054.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="970.8" y="1027.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="973.8" y="1038.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.40%)</title><rect x="970.8" y="1011.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="973.8" y="1022.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.40%)</title><rect x="975.5" y="1059.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.5" y="1070.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.40%)</title><rect x="975.5" y="1043.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.5" y="1054.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.40%)</title><rect x="980.1" y="1075.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="983.1" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 11.86%)</title><rect x="984.8" y="1091.0" width="139.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="987.8" y="1102.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.40%)</title><rect x="984.8" y="1075.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.8" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.40%)</title><rect x="984.8" y="1059.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.8" y="1070.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.40%)</title><rect x="984.8" y="1043.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.8" y="1054.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.40%)</title><rect x="984.8" y="1027.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.79%)</title><rect x="989.4" y="1075.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="992.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.79%)</title><rect x="989.4" y="1059.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.79%)</title><rect x="989.4" y="1043.0" width="9.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (2 samples, 0.79%)</title><rect x="989.4" y="1027.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.40%)</title><rect x="994.1" y="1011.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="997.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.40%)</title><rect x="994.1" y="995.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="997.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="998.8" y="1075.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.8" y="1086.0"></text>
</g>
<g>
<title>Conv2BNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="998.8" y="1059.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1001.8" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.40%)</title><rect x="1003.4" y="1075.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1006.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.40%)</title><rect x="1003.4" y="1059.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1006.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (19 samples, 7.51%)</title><rect x="1008.1" y="1075.0" width="88.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.1" y="1086.0">PhaseIdeal..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.40%)</title><rect x="1008.1" y="1059.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.40%)</title><rect x="1008.1" y="1043.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1011.1" y="1054.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.40%)</title><rect x="1008.1" y="1027.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1011.1" y="1038.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.40%)</title><rect x="1008.1" y="1011.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1011.1" y="1022.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.40%)</title><rect x="1012.8" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (12 samples, 4.74%)</title><rect x="1017.4" y="1059.0" width="56.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1020.4" y="1070.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 3.95%)</title><rect x="1026.8" y="1043.0" width="46.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.8" y="1054.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (10 samples, 3.95%)</title><rect x="1026.8" y="1027.0" width="46.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.8" y="1038.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.40%)</title><rect x="1073.4" y="1059.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1076.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.40%)</title><rect x="1073.4" y="1043.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.19%)</title><rect x="1078.1" y="1059.0" width="14.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.40%)</title><rect x="1078.1" y="1043.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.40%)</title><rect x="1078.1" y="1027.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1081.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.79%)</title><rect x="1082.7" y="1043.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.40%)</title><rect x="1082.7" y="1027.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1082.7" y="1011.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.40%)</title><rect x="1082.7" y="995.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1085.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1087.4" y="1027.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1087.4" y="1011.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.4" y="1022.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.40%)</title><rect x="1087.4" y="995.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1090.4" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1092.1" y="1059.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1092.1" y="1043.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.1" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1092.1" y="1027.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.1" y="1038.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.40%)</title><rect x="1092.1" y="1011.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 2.37%)</title><rect x="1096.7" y="1075.0" width="28.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.7" y="1086.0">P..</text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.40%)</title><rect x="1096.7" y="1059.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 1.98%)</title><rect x="1101.4" y="1059.0" width="23.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.4" y="1070.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1101.4" y="1043.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.4" y="1054.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1101.4" y="1027.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.4" y="1038.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1106.0" y="1043.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.0" y="1054.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.40%)</title><rect x="1106.0" y="1027.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.0" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.40%)</title><rect x="1106.0" y="1011.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.0" y="1022.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1106.0" y="995.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.0" y="1006.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.40%)</title><rect x="1106.0" y="979.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.0" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.79%)</title><rect x="1110.7" y="1043.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.7" y="1054.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1120.0" y="1043.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.0" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1120.0" y="1027.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.0" y="1038.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1120.0" y="1011.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.0" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 3.95%)</title><rect x="1124.7" y="1091.0" width="46.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.7" y="1102.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 3.95%)</title><rect x="1124.7" y="1075.0" width="46.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.7" y="1086.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 3.95%)</title><rect x="1124.7" y="1059.0" width="46.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="1070.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 3.95%)</title><rect x="1124.7" y="1043.0" width="46.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.7" y="1054.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 3.95%)</title><rect x="1124.7" y="1027.0" width="46.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.7" y="1038.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 3.95%)</title><rect x="1124.7" y="1011.0" width="46.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="1022.0">Pars..</text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.40%)</title><rect x="1124.7" y="995.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.7" y="1006.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.40%)</title><rect x="1124.7" y="979.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.7" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1124.7" y="963.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.7" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1124.7" y="947.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.7" y="958.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.40%)</title><rect x="1124.7" y="931.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 3.56%)</title><rect x="1129.4" y="995.0" width="41.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.4" y="1006.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 3.56%)</title><rect x="1129.4" y="979.0" width="41.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.4" y="990.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 3.56%)</title><rect x="1129.4" y="963.0" width="41.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.4" y="974.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 3.56%)</title><rect x="1129.4" y="947.0" width="41.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.4" y="958.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 3.56%)</title><rect x="1129.4" y="931.0" width="41.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.4" y="942.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.16%)</title><rect x="1129.4" y="915.0" width="37.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.4" y="926.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.37%)</title><rect x="1129.4" y="899.0" width="28.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.4" y="910.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.37%)</title><rect x="1129.4" y="883.0" width="28.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.4" y="894.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.37%)</title><rect x="1129.4" y="867.0" width="28.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.4" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.37%)</title><rect x="1129.4" y="851.0" width="28.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.4" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.37%)</title><rect x="1129.4" y="835.0" width="28.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.4" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.37%)</title><rect x="1129.4" y="819.0" width="28.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.4" y="830.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1129.4" y="803.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.4" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1129.4" y="787.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.4" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1129.4" y="771.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1129.4" y="755.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1129.4" y="739.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1129.4" y="723.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1129.4" y="707.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1129.4" y="691.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1129.4" y="675.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.4" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.40%)</title><rect x="1129.4" y="659.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1129.4" y="643.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1129.4" y="627.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.4" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1129.4" y="611.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.4" y="622.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.40%)</title><rect x="1129.4" y="595.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.58%)</title><rect x="1134.0" y="803.0" width="18.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.58%)</title><rect x="1134.0" y="787.0" width="18.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.58%)</title><rect x="1134.0" y="771.0" width="18.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.58%)</title><rect x="1134.0" y="755.0" width="18.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.58%)</title><rect x="1134.0" y="739.0" width="18.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.58%)</title><rect x="1134.0" y="723.0" width="18.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1137.0" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1134.0" y="707.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.0" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1134.0" y="691.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.0" y="702.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1134.0" y="675.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.0" y="686.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.40%)</title><rect x="1134.0" y="659.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="670.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.40%)</title><rect x="1134.0" y="643.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.0" y="654.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.40%)</title><rect x="1134.0" y="627.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.0" y="638.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.40%)</title><rect x="1134.0" y="611.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="622.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.40%)</title><rect x="1138.7" y="707.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="718.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.40%)</title><rect x="1138.7" y="691.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.7" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1138.7" y="675.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.7" y="686.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1138.7" y="659.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1143.4" y="707.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.4" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1143.4" y="691.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1143.4" y="675.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1143.4" y="659.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1143.4" y="643.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.4" y="627.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.4" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.4" y="611.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.4" y="595.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.4" y="579.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.4" y="563.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.4" y="547.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.4" y="531.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.4" y="515.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.4" y="499.0" width="4.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.4" y="483.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.4" y="467.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.4" y="451.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.4" y="435.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.4" y="446.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.4" y="419.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.4" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.40%)</title><rect x="1143.4" y="403.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.4" y="414.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.40%)</title><rect x="1143.4" y="387.0" width="4.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.4" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.40%)</title><rect x="1143.4" y="371.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.4" y="382.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.40%)</title><rect x="1143.4" y="355.0" width="4.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.4" y="366.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.40%)</title><rect x="1143.4" y="339.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="350.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.40%)</title><rect x="1148.0" y="627.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="638.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.40%)</title><rect x="1148.0" y="611.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.0" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.40%)</title><rect x="1148.0" y="595.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.0" y="606.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.40%)</title><rect x="1148.0" y="579.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.0" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1152.7" y="803.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="814.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1152.7" y="787.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1152.7" y="771.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.7" y="782.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1152.7" y="755.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.7" y="766.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.40%)</title><rect x="1152.7" y="739.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.7" y="750.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass*, Klass*, bool) (1 samples, 0.40%)</title><rect x="1152.7" y="723.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.7" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1157.4" y="899.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1157.4" y="883.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1157.4" y="867.0" width="9.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1157.4" y="851.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1157.4" y="835.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1157.4" y="819.0" width="9.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1157.4" y="803.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1157.4" y="787.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1157.4" y="771.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1157.4" y="755.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1157.4" y="739.0" width="4.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1157.4" y="723.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1157.4" y="707.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1157.4" y="691.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1157.4" y="675.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1157.4" y="659.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.40%)</title><rect x="1157.4" y="643.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1157.4" y="627.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1157.4" y="611.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1157.4" y="595.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1157.4" y="579.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1157.4" y="563.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.40%)</title><rect x="1157.4" y="547.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.40%)</title><rect x="1157.4" y="531.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.40%)</title><rect x="1157.4" y="515.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.40%)</title><rect x="1157.4" y="499.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.4" y="510.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.40%)</title><rect x="1157.4" y="483.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="494.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.40%)</title><rect x="1157.4" y="467.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="787.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="771.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="755.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="723.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="707.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="691.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="675.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="659.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="643.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="627.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="611.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.0" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="595.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.0" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="579.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="563.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="547.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="531.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="515.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.0" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="499.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1165.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="483.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="467.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="451.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.0" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="435.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.0" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="419.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="403.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.0" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="387.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="371.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="355.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="339.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="323.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="307.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="291.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="275.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="259.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="243.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="227.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="211.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="195.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1162.0" y="179.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1162.0" y="163.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1162.0" y="147.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1162.0" y="131.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.0" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1162.0" y="115.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1162.0" y="99.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.40%)</title><rect x="1162.0" y="83.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.0" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1162.0" y="67.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.0" y="78.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="1162.0" y="51.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.0" y="62.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.40%)</title><rect x="1162.0" y="35.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1166.7" y="915.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1166.7" y="899.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.7" y="910.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.40%)</title><rect x="1166.7" y="883.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.7" y="894.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.40%)</title><rect x="1166.7" y="867.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="878.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1166.7" y="851.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.7" y="862.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.40%)</title><rect x="1166.7" y="835.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.7" y="846.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.79%)</title><rect x="1171.3" y="1123.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.79%)</title><rect x="1171.3" y="1107.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.79%)</title><rect x="1171.3" y="1091.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.79%)</title><rect x="1171.3" y="1075.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.3" y="1086.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.40%)</title><rect x="1171.3" y="1059.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.3" y="1070.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1171.3" y="1043.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1054.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1171.3" y="1027.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.3" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1171.3" y="1011.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1171.3" y="995.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1171.3" y="979.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.3" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1171.3" y="963.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.3" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1171.3" y="947.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1171.3" y="931.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.3" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1171.3" y="915.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.3" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1171.3" y="899.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1171.3" y="883.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1171.3" y="867.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.3" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1171.3" y="851.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.40%)</title><rect x="1171.3" y="835.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="846.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.40%)</title><rect x="1171.3" y="819.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.3" y="830.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.40%)</title><rect x="1171.3" y="803.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.3" y="814.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.40%)</title><rect x="1171.3" y="787.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.40%)</title><rect x="1171.3" y="771.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_single(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1171.3" y="755.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.3" y="766.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.40%)</title><rect x="1176.0" y="1059.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.0" y="1070.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.40%)</title><rect x="1176.0" y="1043.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.0" y="1054.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle, Thread*) (1 samples, 0.40%)</title><rect x="1176.0" y="1027.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.0" y="1038.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.40%)</title><rect x="1176.0" y="1011.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.0" y="1022.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.40%)</title><rect x="1180.7" y="1139.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.40%)</title><rect x="1180.7" y="1123.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.40%)</title><rect x="1180.7" y="1107.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.40%)</title><rect x="1180.7" y="1091.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="1102.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.40%)</title><rect x="1180.7" y="1075.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="1086.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.40%)</title><rect x="1180.7" y="1059.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="1070.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.40%)</title><rect x="1185.3" y="1155.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="1166.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.40%)</title><rect x="1185.3" y="1139.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="1150.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.40%)</title><rect x="1185.3" y="1123.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.3" y="1134.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.40%)</title><rect x="1185.3" y="1107.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="1118.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.40%)</title><rect x="1185.3" y="1091.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.3" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.40%)</title><rect x="1185.3" y="1075.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1185.3" y="1059.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.3" y="1070.0"></text>
</g>
</g>
</svg>
